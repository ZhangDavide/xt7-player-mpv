' Gambas class file

Create Static

Public Struct Xoutput
  output_name As String
  mode_name As String
  w As Integer
  h As Integer
  x As Integer
  y As Integer
  r As Float
End Struct

Public Function get_sizes() As String[]
  'given an output name, returns a string[] as follows:
  '[outputname|modename|w|h|refresh],..,[outputname|modename|w|h|refresh]'
  Dim xrandr_output, a, b As String 
  Dim output_name As String
  Dim xrandr_output_splitted As String[]
  Dim tmp As String[]
  Dim i, j, k As Integer
  Dim aLine, bLine As String
  Dim modename, w, h, r As String
  Dim return_value As New String[]
  Dim mode As String
  Dim modes As New String[]
  
  Shell "xrandr --verbose --current" To xrandr_output
  xrandr_output_splitted = Split(xrandr_output, "\n", "", True)
  
  For i = 0 To xrandr_output_splitted.max 'search output_name
    aLine = xrandr_output_splitted[i] 
    If aLine Like "* connected *" Then output_name = Split(aline, " ", "", True)[0]

        If aLine Like "* (*) *Hz*HSync*VSync*" Then 'found the first modeline"
          modename = Split(aLine, " ", "", True)[0]
          a = xrandr_output_splitted[i + 1]
          b = xrandr_output_splitted[i + 2]

          w = Split(a, " ", "", True)[2]
          h = Split(b, " ", "", True)[2]

          tmp = Split(b, " ", "", True)
          r = Replace(tmp[tmp.max], "Hz", "", gb.IgnoreCase)

          mode = output_name & "|" & modename & "|" & w & "|" & h & "|" & r
          modes.Add(mode)
        Endif
  Next 'i
  
  Return modes
  
End


Public Function output_from_screen(s As Screen) As Xoutput
  'returns the display output name, resolution and refreshrate of the specified gb screen
  Dim xrandr_output As String
  Dim aLine, element, mode_name As String
  Dim xrandr_output_splitted As String[]
  Dim splitted As String[]
  Dim output_name, w, h, x, y As String
  Dim r As Float = -1
  Dim Xreturn As Xoutput
  Dim i, j As Integer

  Shell "xrandr --current" To xrandr_output
  xrandr_output_splitted = Split(xrandr_output, "\n", "", True)
  
  For i = 0 To xrandr_output_splitted.max
    'walk through xrandr lines, search For connected outputs
    aLine = xrandr_output_splitted[i]
    
    If InStr(aLine, " connected ") > 0 Then
      aLine = Replace(aLine, "primary ", "")
      splitted = Split(aLine, " x+", "", True)
      w = splitted[2]
      h = splitted[3]
      x = splitted[4]
      y = splitted[5]
      If s.w = w Then
        If s.h = h Then
          If s.x = x Then
            If s.y = y Then
              'screen match found
              output_name = splitted[0]
              'extract the refresh. find "*"
              For j = i + 1 To xrandr_output_splitted.max
                aLine = xrandr_output_splitted[j]
                If InStr(aLine, "*") > 0 Then
                  Stop
                  'found the mode, search which refresh ends with "*"
                  For Each element In Split(aLine, " ", "", True)
                    If Right(element) = "*" Then
                      Try r = CFloat(Left(element, -1))
                      If Not Error Then
                        mode_name = Split(aLine, " ", "", True)[0]
                        Break
                      Endif
                    Endif
                  Next
                Endif
                If r <> -1 Then Break
              Next
              Xreturn = New Xoutput
              Xreturn.output_name = output_name
              Xreturn.mode_name = mode_name
              Xreturn.w = w
              Xreturn.h = h
              Xreturn.r = r
              Goto returnlabel
            Endif
          Endif
        Endif
      Endif
    Endif
  Next

  returnlabel:
  Return Xreturn

End


Private Function Screenbypos(x As Integer, y As Integer) As Screen
  Dim s As Screen
  For Each s In Screens
    If (x >= s.x) And x <= (s.x + s.W) Then
      If (y >= s.y) And y <= (s.y + s.h) Then
        Return s
      Endif
    Endif
  Next
  
  'no screen found !? repeat with more tolerance:
  For Each s In Screens
    If (x + 50 >= s.x) And x <= (s.x + s.W + 50) Then
      If (y + 50 >= s.y) And y <= (s.y + s.h + 50) Then
        Return s
      Endif
    Endif
  Next

  'still no screen found? return the first.
  global.myDebug("Couldn 't get the matching screen (!)")
  Return Screens[0]
End

Public Sub Xoutput_from_obj(o As Object) As Xoutput
  'return on which screen ( output_name) is the center of the object o
  Dim s As Screen
  Dim out As Xoutput
  s = Screenbypos(o.screenx + (o.w Div 2), o.screeny + (o.h Div 2))
  Return output_from_screen(s)
End

Public Sub change_mode(output_name As String, mode As String, rate As Float)
  Dim xrandr_cmd As String = "xrandr --output " & output_name & " --mode " & mode & " --rate " & rate
  global.myDebug(xrandr_cmd)
  Shell xrandr_cmd
End


Public Function find_mode(s_output_name As String, s_w As Integer, s_h As Integer, s_fps As Integer, Optional AR_ERROR As Float = -1, Optional HZ_ERROR As Float = -1) As String
  'given an output-name
  'given a source resolution
  'given the source fps
  'Given an output name
  
  'search for a mode that
  '* has the same output name of the source
  '* has the same aspect ratio of the source resolution +/- 5%
  '* has a resolution >= than the source resolution
  '* has a refresh rate multiple of the (requested fps +/- 5%)

  Dim modes_db As New String[] ' '[outputname|modename|w|h|refresh],..,[outputname|modename|w|h|refresh]'
  Dim mode As String
  Dim mode_name As String

  Dim output_name As String
  Dim w, h As Integer
  Dim r As Float
  Dim i As Integer

  Dim t As Float
  Dim t_int As Integer
  Dim t_float As Float

  If AR_error < 0 Then AR_error = 0.05
  If Hz_error < 0 Then Hz_error = 0.05

  modes_db = get_sizes()

  For Each mode In modes_db
    output_name = Split(mode, "|", "", True)[0]
    If output_name = s_output_name Then
      mode_name = Split(mode, "|", "", True)[1] 
      w = CInt(Split(mode, "|", "", True)[2])
      h = CInt(Split(mode, "|", "", True)[3])
      r = CFloat(Split(mode, "|", "", True)[4])

      If Abs((w / h) - (s_w / s_h)) < (w / h) * AR_error Then
        global.mydebug("candidate:", mode, "\nHas the same aspect of the source +/- " & AR_ERROR)
        'check refresh
        ' come si fa a capire che una frequenza destinazione va bene?
        ' 
        ' divido la frequenza del monitor per quella del filmato, ad esempio
        ' 75 hz / 23.976
        ' esce 3.1281281
        ' poi divido la sua parte decimale per la sua parte intera:
        ' 0.1281281 / 3 = 0.0427
        ' se il numero che esce Ã¨ inferiore a 0.05 (che rappresenta il mio 5%) allora va bene.

        t = r / s_fps
        t_int = CInt(t)
        t_float = t - t_int
        If t_float / t_int <= Hz_error Then
          Return mode
        Endif
        
      Endif
    Endif
  Next
  Return ""
End



Public Sub test()
  Dim Xo As Xoutput
  Dim mode As String
  Dim mode_info As String[]
  Dim output_name, mode_name, w, h, refresh As String
  Dim message_text As String
  Dim rate As String
  Xo = Xoutput_from_obj(Fmain)
  mode = find_mode(Xo.output_name, Xo.w, Xo.h, 25, 0.05, 0.05)
  If mode = "" Then
    global.mydebug("No appropriate mode found")
    Return
  Endif
  
  '[outputname|modename|w|h|refresh]
  mode_info = Split(mode, "|")
  output_name = mode_info[0]
  mode_name = mode_info[1]
  w = mode_info[2]
  h = mode_info[3]
  rate = mode_info[4]
  
  message_text &= "\n"
  message_text &= ("Switch monitor resolution to:") & "\n"
  message_text &= ("output name: ") & output_name & "\n"
  message_text &= ("mode name: ") & mode_name & "\n"
  message_text &= ("resolution: ") & w & "x" & h & "\n"
  message_text &= ("refresh: ") & rate & "\n"
  
  If MyQuestion.Ask(message_text, "Switch", "Keep current") = 1 Then
    change_mode(output_name, mode_name, rate)
  Endif
  
  Stop
  
  change_mode(Xo.output_name, Xo.mode_name, Xo.r)
  
  
End

