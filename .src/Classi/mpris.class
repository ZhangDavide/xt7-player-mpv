' Gambas class file

' 

Inherits DBusObject


Create Static
' Event org_freedesktop_DBus_Properties_PropertiesChanged(args As String[])


Public Sub emit_propertychanged()
' Dim args As New Collection[]
' Dim prova As New String[]
' 
' 
' 'prova.add(org_mpris_MediaPlayer2_Player_Metadata_Read())
' prova.Add("a")
' Debug "a"
' Debug prova[0] 
' Debug "a"
' 'type mismatch?
'   DBus["/org/mpris/MediaPlayer2"].Raise(mpris, "org.freedesktop.DBus.Properties.PropertiesChanged", prova)

End


''ORG.MPRIS.MEDIAPLAYER2-----------------------------------------------------------------------------------------------------------------
Property Read org_mpris_MediaPlayer2_CanQuit As Boolean
Property Read org_mpris_MediaPlayer2_CanRaise As Boolean
Property Read org_mpris_MediaPlayer2_HasTrackList As Boolean
Property Read org_mpris_MediaPlayer2_Identity As String
Property Read org_mpris_MediaPlayer2_DesktopEntry As String 'opzionale
Property Read org_mpris_MediaPlayer2_SupportedUriSchemes As String[]
Property Read org_mpris_MediaPlayer2_SupportedMimeTypes As String[]
 
Function org_mpris_MediaPlayer2_CanQuit_Read() As Boolean
  Debug "Dbus"
  Return True
End

Function org_mpris_MediaPlayer2_CanRaise_Read() As Boolean
  Debug "Dbus"
  Return True
End

Function org_mpris_MediaPlayer2_HasTrackList_Read() As Boolean
  Debug "Dbus"
  Return True
End

Function org_mpris_MediaPlayer2_Identity_Read() As String
  Debug "Dbus"
  Return "xt7-player-mpv"
End
 
Function org_mpris_MediaPlayer2_DesktopEntry_Read() As String
  Debug "Dbus"
  Return "xt7-player-mpv"
End

Function org_mpris_MediaPlayer2_SupportedUriSchemes_Read() As String[]
  Debug "Dbus"
  Return ["file", "http"]
End
 
Function org_mpris_MediaPlayer2_SupportedMimeTypes_Read() As String[]
  Debug "Dbus"
  Return ["application/ogg", "application/x-ogg", "application/x-ogm-audio", "audio/aac", "audio/mp4", "audio/mpeg", "audio/mpegurl", "audio/ogg", "audio/vnd.rn-realaudio", "audio/vorbis", "audio/x-flac", "audio/x-mp3", "audio/x-mpeg", "audio/x-mpegurl", "audio/x-ms-wma", "audio/x-musepack", "audio/x-oggflac", "audio/x-pn-realaudio", "audio/x-scpls", "audio/x-speex", "audio/x-vorbis", "audio/x-vorbis+ogg", "audio/x-wav", "video/x-ms-asf", "x-content/audio-player"]
End

Public Function org_mpris_MediaPlayer2_Raise() 
  Debug "Dbus"
  FMain.Show()
End

 Public Function org_mpris_MediaPlayer2_Quit()
  Debug "Dbus"
    'we cannot just quit the application, because it would unregister
    'dbus before we exit this kifunction, leading to a runtime error
    'so use a timer to program a delayed quit.
    FMain.TimerQuit.start
 End

''ORG.MPRIS.MEDIAPLAYER2.PLAYER-----------------------------------------------------------------------------------------------------------------
Property Read org_mpris_MediaPlayer2_Player_PlaybackStatus As String
Property org_mpris_MediaPlayer2_Player_LoopStatus As String
Property org_mpris_MediaPlayer2_Player_Rate As Float
Property org_mpris_MediaPlayer2_Player_Shuffle As Boolean
Property Read org_mpris_MediaPlayer2_Player_Metadata As Collection
Property org_mpris_MediaPlayer2_Player_Volume As Float
Property Read org_mpris_MediaPlayer2_Player_Position As Long
Property Read org_mpris_MediaPlayer2_Player_MinimumRate As Float
Property Read org_mpris_MediaPlayer2_Player_MaximumRate As Float
Property Read org_mpris_MediaPlayer2_Player_CanGoNext As Boolean
Property Read org_mpris_MediaPlayer2_Player_CanGoPrevious As Boolean
Property Read org_mpris_MediaPlayer2_Player_CanPlay As Boolean
Property Read org_mpris_MediaPlayer2_Player_CanPause As Boolean
Property Read org_mpris_MediaPlayer2_Player_CanSeek As Boolean
Property Read org_mpris_MediaPlayer2_Player_CanControl As Boolean


Function org_mpris_MediaPlayer2_Player_PlayBackStatus_Read() As String
  Dim processrunning As Boolean = False
  Debug "Dbus"
  Try processrunning = FMain.mplayer.ProcessRunningOvr() 
  If Not processrunning Then Return "Stopped"
  If FMain.mplayer.paused(True) Then Return "Paused"
  Return "Playing"
End

Function org_mpris_MediaPlayer2_Player_LoopStatus_Read() As String
Debug "Dbus"
  If FMain.TogglePls.value Then 
    Return "Playlist"
      Else
    Return "None"
  Endif
End

Function org_mpris_MediaPlayer2_Player_LoopStatus_Write(p As String)
Debug "Dbus"
  FMain.TogglePls.value = (p = "Playlist")
End

Function org_mpris_MediaPlayer2_Player_Rate_Read() As Float
  Dim out As String
  Dim fout As Float
  Debug "Dbus"
  If Not FMain.mplayer.ProcessRunningOvr() Then Return 1
  out = FMain.mplayer.get_property_mpv("speed",,, True)
  Try fout = CFloat(out)
  If Not Error Then Return fout
  Return 1
End

Function org_mpris_MediaPlayer2_Player_Rate_Write(p As Float) 
  Debug "Dbus"
End

Function org_mpris_MediaPlayer2_Player_Shuffle_Read() As Boolean
  Debug "Dbus"
  Return FMain.ShufflePls.value
End

Function org_mpris_MediaPlayer2_Player_Shuffle_Write(p As Boolean) 
  Debug "Dbus"
  FMain.ShufflePls.value = p
End

Function org_mpris_MediaPlayer2_Player_Metadata_Read() As Collection
 Dim out As Collection
 
 out = New Collection
 out["xesam:url"] = "/my/track_" & CString(Rnd(0, 10000)) 'FMain.mplayer.getP("fullpath")
 out["mpris:trackid"] = "/path/to/dbus/boh" 'probably wrong type, should be "objectpath"

 If FMain.mplayer.ProcessRunningOvr() Then 
   Try out["mpris:length"] = CLong(FMain.mplayer.get_property_mpv("=duration", True, 1, True) * 1000000)
 Endif
  
 Return out

End

Function org_mpris_MediaPlayer2_Player_Volume_Read() As Float
Debug "Dbus"
   Return (FMain.SaveVolumeSlider.value * (100 Div FMain.SaveVolumeSlider.MaxValue))
End



Function org_mpris_MediaPlayer2_Player_Position_Read() As Long
  Debug "Dbus"
  If Not (FMain.mplayer.ProcessRunningOvr()) Then Return
  Return FMain.mplayer.CurrentTime(True) * 1000000
End

Function org_mpris_MediaPlayer2_Player_Position_Write() As Long
Debug "Dbus"
End

Function org_mpris_MediaPlayer2_Player_MinimumRate_Read() As Float
  Return "0.01"
Debug "Dbus"
End

Function org_mpris_MediaPlayer2_Player_MaximumRate_Read() As Float
  Return "1000"
Debug "Dbus"
End

Function org_mpris_MediaPlayer2_Player_CanGoNext_Read() As Boolean
Debug "Dbus"
  Return True
End

Function org_mpris_MediaPlayer2_Player_CanGoPrevious_Read() As Boolean
Debug "Dbus"
  Return True
End

Function org_mpris_MediaPlayer2_Player_CanPlay_Read() As Boolean
Debug "Dbus"
  Return True
End

Function org_mpris_MediaPlayer2_Player_CanPause_Read() As Boolean
Debug "Dbus"
  Return True
End

Function org_mpris_MediaPlayer2_Player_CanSeek_Read() As Boolean
Debug "Dbus"
  Return True
End

Function org_mpris_MediaPlayer2_Player_CanControl_Read() As Boolean
Debug "Dbus"
  Return True
End



Public Function org_mpris_MediaPlayer2_Player_Next()
Debug "Dbus"
  FMain.SelectNext(False, FMain.GetActivePlayQueue())
End

Public Function org_mpris_MediaPlayer2_Player_Previous()
Debug "Dbus"
  FMain.ButtonPrev_click()
End

Public Function org_mpris_MediaPlayer2_Player_Pause()
Debug "Dbus"
  If Not (FMain.mplayer.ProcessRunningOvr()) Then Return

    If FMain.mplayer.Paused() Then 
      global.myDebug("Already paused!")
        Else
      FMain.ButtonPlay_click()
  Endif
End

Public Function org_mpris_MediaPlayer2_Player_PlayPause()
Debug "Dbus"
   FMain.ButtonPlay_click()
End

Public Function org_mpris_MediaPlayer2_Player_Stop()
Debug "Dbus"
  FMain.buttonstop_click()
End

Public Function org_mpris_MediaPlayer2_Player_Play()
Debug "Dbus"
  If (FMain.mplayer.ProcessRunningOvr()) And (Not FMain.mplayer.paused()) Then Return 
  FMain.ButtonPlay_click()
End

Public Function org_mpris_MediaPlayer2_Player_Seek(p As Long)
global.myDebug("DBUS")
  FMain.mplayer.do_seek_by(p Div 1000000, FsForm.fullscreen)
End

Public Function org_mpris_MediaPlayer2_Player_SetPosition(o As Long, p As Long)
global.myDebug("DBUS")
  global.myDebug("Uninmplemented")
End

Public Function org_mpris_MediaPlayer2_Player_OpenUri(p As String)
global.myDebug("DBUS")
  FMain.Play(p)
End

Function org_mpris_MediaPlayer2_Player_Volume_Write(p As Float)
Debug "Dbus"
  If p <= 0 Then
    FMain.volume_set("0")
      Else
    FMain.volume_set(CStr(p * 100))
  Endif
End

