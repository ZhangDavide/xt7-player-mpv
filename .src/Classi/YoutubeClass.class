' Gambas class file

Public feedsinfo As New Collection 'a collection of feeds
Public feedinfo As New Collection  'a collection of a feed infos


Private Function TestKey(ykey As String) As Boolean
  Dim mywget As New WgetClass
  Dim test_url As String 
  Dim out As String
  test_url = "https://www.googleapis.com/youtube/v3/search?part=snippet&q=YouTube+Data+API&type=video&&maxResults=1&key=" & ykey
  test_url = "'" & test_url & "'"
  mywget.timeouts = " --connect-timeout=5 --dns-timeout=5 --read-timeout=20 --tries=3 "
  out = mywget.DownloadAsync(test_url)
  If out = "" Then global.myDebug("Key test failed")
  Return out <> ""
End


Private Function webkey() As String
  Dim mywget As New Wgetclass
  Dim wk As String
  wk = Trim(mywget.DownloadAsync(AK_URL))
  Return wk
End


Private NO_WEB_KEY As Boolean = False
Private KEY_OK As String

Private Sub APIKEY() As String
  Dim ykey As String
  Dim lkey_file As String = global.ConfPath & "/.ak.txt"

  'Just do this 'till a working key is found
  If KEY_OK <> "" Then Return KEY_OK
  'try the user spcified API KEY
  If GeneralOptions.UseMyApiKeyCheckbox.value Then
    If Trim(GeneralOptions.API_KEY_USER_textbox.text) <> "" Then
      ykey = Trim(GeneralOptions.API_KEY_USER_textbox.text)
      If Not (TestKey(ykey)) Then
        Message.error(("User provided api key does not seem to work.") & "\n" & ("Trying shared and cached keys..."))
      Endif
      KEY_OK = ykey
      Return ykey
    Endif
  Endif

  'try web API KEY
  If Not (NO_WEB_KEY) Then
    ykey = ""
    ykey = webkey()
    If ykey <> "" Then 
      If TestKey(ykey) Then 
        global.myDebug("Got new remote key")
        Try File.Save(lkey_file, ykey)
        global.myDebug("saved new remote key as local")
        KEY_OK = ykey
        Return ykey
      Endif
    Endif
  Endif
  NO_WEB_KEY = True 'flag to avoid trying to get keys from web again

  'try local cached api key
  ykey = ""
  Try ykey = File.Load(lkey_file)
  If Not Error Then 
    If TestKey(ykey) Then 
      global.myDebug("Got local key")
      KEY_OK = ykey
      Return ykey
    Endif
  Endif

  'if we reach here, no working keys were found :(
  global.myDebug("Could not get a vaild key")
  Message.Error("\n" & ("Invalid or missing API KEY") & "\n\n" & ("You could try again later.") & ".\n")
  NO_WEB_KEY = False 'local key failed as well, we'll rely on webkeys again 
  Return ""
End


Public Sub init_tree(tree As Treeview)
  tree.clear
  Try Tree.Add("custom_search_results", ("Custom search results"), picture["youtubeicon.png"])

  ' Tree.Add("most_recent", ("Most recent"), picture["youtubeicon.png"])
  ' Tree.Add("top_rated", ("Top Rated"), picture["youtubeicon.png"])
  ' Tree.Add("most_popular", ("Most popular"), picture["youtubeicon.png"]) '
  'Tree.Add("top_favorites", ("Top favourites"), picture["youtubeicon.png"])
 ' Tree.Add("most_viewed", ("Most viewed"), picture["youtubeicon.png"])
  'Tree.Add("most_discussed", ("Most discussed"), picture["youtubeicon.png"])
  'Tree.Add("most_responded", ("Most responded"), picture["youtubeicon.png"])
  'Tree.Add("recently_featured", ("Recently featured"), picture["youtubeicon.png"])
  'Tree.Add("related", ("*Related Videos"), picture["youtubeicon.png"])
End

Public Sub _new(tree As Treeview)
  init_tree(tree)
End




Public Function ChannelIdFromName(uploader As String) As String
  Dim mywget As New Wgetclass
  Dim url As String = "'https://www.googleapis.com/youtube/v3/channels?key=" & APIKEY() & "&part=id&forUsername=" & uploader & "'"
  Dim answer, out As String
  Dim jdecoded As Collection
  answer = mywget.DownloadAsync(url)
  jdecoded = JSON.Decode(answer)
  Try out = jdecoded["items"][0]["id"]
  Return out
End


Public Sub GetRelated(sourcefeed As String, tree As Treeview, relatedtotext As String, Optional otheropts As String = "", Optional resizew As Integer = 0)

  Dim AskUrl As String

  Dim v As Integer = 1 'api version
  Dim videoid As String

  videoid = getvideoid(sourcefeed)
                                                                        '"relatedToVideoId"
  AskUrl = "https://www.googleapis.com/youtube/v3/search?part=snippet"
  Askurl &= "&key=" & APIKEY()
  Askurl &= otheropts
  AskUrl &= "&type=video"
  AskUrl &= "&relatedToVideoId=" & videoid

  relatedtotext = ("More Related to: ") & relatedtotext
  GetResults(tree, tree.current.key, otheropts,, videoid, resizew)

  Tree.Item.Expanded = True

End


Private AK_URL As String = "http://xt7-player.sourceforge.net/xt7forum/ak.php"

Static Public Function MidC(s As String, a As String, Optional b As String) As String
  'return the first occurrence of the string between a and b
  'if b is omitted then all the string starting from a is returned
  Dim mmid As String
  mMid = Mid(s, InStr(s, a) + 1)
  If b <> "" Then 
    Return Left(mmid, InStr(mmid, b) - 1)
      Else
    Return mMid
  Endif
End


Private Function time_decode(T1 As String) As Integer
  Dim t, l As String
  Dim total As Integer = 0
 'PT12H3M48S,PT12H3M,PT3H48S,PT3M48S,PT3M,PT48S...
  If Not (T1 Like ("PT*")) Then Return 0
  T1 = Replace(T1, "PT", "")
  T1 = Replace(T1, "H", "H ")
  T1 = Replace(T1, "M", "M ")
  T1 = Trim(T1)

  For Each t In Split(T1, " ", "", True)
    l = Upper(t)
    Select l
      Case Like "*H"
        Try total = total + Left(l, -1) * 3600
        If Error Then Return 0
      Case Like "*M"
        Try total = total + Left(l, -1) * 60
        If Error Then Return 0
      Case Like "*S"
        Try total = total + Left(l, -1) 
        If Error Then Return 0
    End Select
  Next
  Return total
End




Public Sub FormatTime(seconds As String) As String
    Dim iseconds, hh, mm, ss, restosec As Integer
    Dim Shh, Smm, Sss As String
      Try iseconds = Val(seconds)
      If Error Then iseconds = 0
      hh = iseconds Div 3600
      restosec = (iseconds - (hh * 3600))
      mm = restosec Div 60
      ss = (restosec - (mm * 60))
      
      Sss = ss
      If Len(Sss) = 1 Then Sss = "0" & Sss
      Smm = mm
      If Len(Smm) = 1 Then Smm = "0" & Smm
      Shh = hh
      If Len(Shh) = 1 Then Shh = "0" & Shh
    Return Shh & ":" & Smm & ":" & Sss
End


Public Function getvideoid(url As String) As String
  Dim videoid As String
  Dim tmpsplit As String[]
  If url Like "*youtube*/*?v=*" Then
    videoid = Split(url, "=", "", True)[1]
    If videoid Like "*&*" Then videoid = Split(videoid, "&")[0]
      Else If videoid Like "*&*" Then
    'cut from v= to EOL or "&"
        videoid = Mid(url, InStr(url, "v=", InStr(url, "/") + 1) + 2)
        If InStr(videoid, "&") <> 0 Then videoid = Left(videoid, InStr(videoid, "&") - 1)
      Else
        tmpsplit = Split(url, "/", "", True)
        videoid = tmpsplit[tmpsplit.count - 1]
        videoid = Split(videoid, "?")[0]
  Endif
  Return videoid
End

Public currentvideoid As String = ""


Public Cookiesfile As String = ""

Public Function YoutubeDlInstalled() As Boolean
  Dim ytdlinstalled As String = ""
  If Not GeneralOptions.InitDone Then GeneralOptions.Init()
  Shell "which youtube-dl" To ytdlinstalled
  'Shell "which " & GeneralOptions.youtubedlexe.text To ytdlinstalled
   If Trim(ytdlinstalled) = "" Then 
    Message.error(("youtube-dl seems to be missing. \nInstall it to watch youtube videos."), "Ok")
    Return False
  Endif
  Return True
End



Private ytdlout As String = Temp(Rnd(0, 1000) & "youtubedl-out")

Public Function GetTitle(sourceurl As String) As String
    Dim videoid As String
    Dim title As String
    videoid = getvideoid(sourceurl)
    Shell "youtube-dl " & videoid & " -e" To title
    Return Trim(title)
End


Public Function get_formats(maxR As Integer, Optional threedee As Boolean = False) As String
  
  
  Dim fSorted As New String[] 'formats sorted by resolution
  Dim i, mFormat As String
  Dim height, code As Integer
  Dim out As String
  
If threedee Then
  fSorted.Add("720,84,mp4")
  fSorted.Add("520,85,mp4")
  fSorted.Add("360,82,mp4")
  fSorted.Add("240,83,mp4")
  fSorted.Add("720,102,webm")
  fSorted.Add("360,101,webm")
  fSorted.Add("360,100,webm")
Endif
  ' fSorted.Add("1080,37,mp4")
  ' fSorted.Add("360,18,mp4")
  ' fSorted.Add("1080,46,webm")
  ' fSorted.Add("720,45,webm")
  ' fSorted.Add("480,44,webm")
  ' fSorted.Add("360,43,webm")
  ' fSorted.Add("480,35,flv")
  ' fSorted.Add("360,34,flv")
  ' fSorted.Add("240,5,flv")
'http://en.wikipedia.org/wiki/YouTube#Quality_and_codecs
  fSorted.Add("3072,38,mp4")
 ' fSorted.Add("1080,137,mp4")'DASH
  fSorted.Add("1080,37,mp4")
 ' fSorted.Add("720,136,mp4")'DASH
 
  fSorted.Add("720,22,mp4")
  
 ' fSorted.Add("480,135,mp4")'DASH
 ' fSorted.Add("360,141,mp4")'DASH
 ' fSorted.Add("360,140,mp4")'DASH
 ' fSorted.Add("360,139,mp4")'DASH
 ' fSorted.Add("360,134,mp4")'DASH
  
  fSorted.Add("360,18,mp4")
 ' fSorted.Add("240,133,mp4")'DASH

 ' fSorted.Add("144,160,mp4")'DASH
  fSorted.Add("1080,46,webm")

  fSorted.Add("720,45,webm")
  fSorted.Add("480,44,webm")
'  fSorted.Add("360,172,webm")'DASH
 ' fSorted.Add("360,171,webm") 'DASH
  fSorted.Add("360,43,webm")
  fSorted.Add("720,120,flv")
  fSorted.Add("480,35,flv")
  fSorted.Add("360,34,flv")
  fSorted.Add("270,6,flv")
  fSorted.Add("270,13,3gp")
  fSorted.Add("240,5,flv")
  fSorted.Add("240,36,3gp")
  fSorted.Add("144,17,3gp")


  For Each i In fsorted
    height = Split(i, ",", "", True)[0]
    If height <= maxR Then
      mFormat = Split(i, ",", "", True)[2]
      'If mFormat = "mp4" Then
        code = Split(i, ",", "", True)[1]
        out &= code & "/"
      'Endif
    Endif
  Next
  out = Left(out, -1)
  Return out
End



Public Function realvideourl(sourceurl As String, maxformat As String) As String
  Dim videoid As String
  Dim fmtcode As Integer
  Dim fmt As String
  Dim i As Integer
  Dim fSorted As New String[] 'formats sorted by container (mp4,webm,flv) then resolution becausewebm and flv gives more seek troubles
  Dim useless As String
  Dim fmtresult As String
  Dim luckyformat As String
  Dim ytdlprocess As Process
  Dim ytdloutlines As String[]
  Dim UrlAndFormats As New Collection

  If Not YoutubeDlInstalled() Then Return

  videoid = getvideoid(sourceurl)
  currentvideoid = videoid
  global.myDebug(videoid)

If GeneralOptions.Get3dYT.value = True Then
  fSorted.Add("720,84,mp4")
  fSorted.Add("520,85,mp4")
  fSorted.Add("360,82,mp4")
  fSorted.Add("240,83,mp4")
  fSorted.Add("720,102,webm")
  fSorted.Add("360,101,webm")
  fSorted.Add("360,100,webm")
Endif
  ' fSorted.Add("1080,37,mp4")
  ' fSorted.Add("360,18,mp4")
  ' fSorted.Add("1080,46,webm")
  ' fSorted.Add("720,45,webm")
  ' fSorted.Add("480,44,webm")
  ' fSorted.Add("360,43,webm")
  ' fSorted.Add("480,35,flv")
  ' fSorted.Add("360,34,flv")
  ' fSorted.Add("240,5,flv")
'http://en.wikipedia.org/wiki/YouTube#Quality_and_codecs
  fSorted.Add("3072,38,mp4")
 ' fSorted.Add("1080,137,mp4")'DASH
  fSorted.Add("1080,37,mp4")
 ' fSorted.Add("720,136,mp4")'DASH
 
  fSorted.Add("720,22,mp4")
  
 ' fSorted.Add("480,135,mp4")'DASH
 ' fSorted.Add("360,141,mp4")'DASH
 ' fSorted.Add("360,140,mp4")'DASH
 ' fSorted.Add("360,139,mp4")'DASH
 ' fSorted.Add("360,134,mp4")'DASH
  
  fSorted.Add("360,18,mp4")
 ' fSorted.Add("240,133,mp4")'DASH
             '3D
 ' fSorted.Add("144,160,mp4")'DASH
  fSorted.Add("1080,46,webm")

  fSorted.Add("720,45,webm")
  fSorted.Add("480,44,webm")
'  fSorted.Add("360,172,webm")'DASH
 ' fSorted.Add("360,171,webm") 'DASH
  fSorted.Add("360,43,webm")
  fSorted.Add("720,120,flv")
  fSorted.Add("480,35,flv")
  fSorted.Add("360,34,flv")
  fSorted.Add("270,6,flv")
  fSorted.Add("270,13,3gp")
  fSorted.Add("240,5,flv")
  fSorted.Add("240,36,3gp")
  fSorted.Add("144,17,3gp")


  'strip out any format higher than maxformat and delete previous temp files
  For i = fsorted.max DownTo 0 
    If CInt(Split(fsorted[i], ",")[0]) > CInt(Replace(maxformat, "p", "")) Then 
      useless = fsorted.Extract(i)[0]
      global.myDebug("dropping " & useless)
    Endif
  Next
  
  Cookiesfile = Temp(Rnd(0, 1000) & "ytcookie")
  global.myDebug("cookiesfile: " & cookiesfile)

  'search for the code of the exact resolution in mp4:
  For Each fmt In fsorted
    If (fmt Like Replace(maxformat, "p", "") & ",*,mp4") Then 
      luckyformat = Split(fmt, ",")[1]
    Endif
  Next
  'the space is intentional to play videoid(s) which begins with a "-"
  ytdlprocess = Shell "youtube-dl ' " & videoid & "' --get-format --get-url --all-formats --prefer-insecure  --cookies " & Cookiesfile & " >" & ytdlout
  global.myDebug("youtube-dl ' " & videoid & "' --get-format --get-url --all-formats --prefer-insecure --cookies " & Cookiesfile & " >" & ytdlout)
  Repeat
    Wait 0.02
  Until ytdlprocess.State <> Process.Running

  Try ytdloutlines = Split(File.Load(ytdlout), "\n", "", True)
  If Not Error Then 
    Try Kill ytdlout
      Else
    Return
  Endif
  
  If ytdloutlines.count = 0 Then Return
  For i = 0 To ytdloutlines.max Step 2
    'Try UrlAndFormats[ytdloutlines[i + 1]] = ytdloutlines[i]
    Try UrlAndFormats[Split(ytdloutlines[i + 1], " ")[0]] = ytdloutlines[i] 'split(ytdloutlines[i],"")[0]
  Next
  
  'pick up the first (if they exists) mp4 or webm or flv
  'our array is already sorted that way.
  For Each fmt In fsorted
    fmtcode = Split(fmt, ",")[1]
    Try fmtresult = UrlAndFormats[fmtcode]
    If Not Error Then
      If fmtresult Like "*http*" Then
        global.myDebug(fmtresult)
        Return Trim(fmtresult)
      Endif
    Endif
  Next

End

Public urlexists As Integer = -1


Public Function IsYoutubeLink(url As String) As Boolean
  'return true if the url is a youtube link that needs to be decoded.
  Dim needsdecoding As Boolean = True
 ' global.myDebug(url)
  url = Lower(url)
  needsdecoding = needsdecoding And ((url Like "http://*.youtube.*/*") Or (url Like "https://*.youtube.*/*") Or (url Like "http://*.googlevideo.*/*") Or (url Like "https://*.googlevideo.*/*"))
  needsdecoding = needsdecoding And (Not (url Like "*t=*"))
  needsdecoding = needsdecoding And (Not (url Like "*ip=*"))
  needsdecoding = needsdecoding And (Not (url Like "*fexp=*"))
  needsdecoding = needsdecoding And (Not (url Like "*expire=*"))
  needsdecoding = needsdecoding And (Not (url Like "*signature=*"))
  If needsdecoding Then FMain.needytcookie = True
  Return needsdecoding
End

Public Sub Select_NextTreeItem(MyTree As Treeview)
  Global.IsNextSelected = True
  MyTree.movecurrent
  If MyTree.MoveBelow() Then 
    Global.IsNextSelected = False
    Try MyTree.MoveFirst()
  Endif

  If Not Error Then
    Try MyTree.Item.selected = True
  Endif
  Wait 0.1 'needed for grid select event to fill new mplayer.media_fullpath,maybe tunable
End


Public Sub Select_PrevTreeItem(MyTree As Treeview)
  MyTree.movecurrent
    If MyTree.MoveAbove() Then Try MyTree.MoveLast()
  If Not Error Then
    Try MyTree.Item.selected = True
  Endif
  Wait 0.1 'needed for grid select event to fill new mplayer.media_fullpath,maybe tunable
End


Public Struct YoutubeItem
  duration As Integer
  published As String
  channelId As String
  channeltitle As String
  title As String
  description As String
  thumbnail As String
  playurl As String
End Struct


Public Function GetResults(youtubetree As Treeview, under As String, queryopts As String, Optional pagetoken As String = "", Optional relatedto As String = "", resizew As Integer) As Collection
  'query youtube and append results in the current thread in youtubetree
  'add a link at the end to show more results.
  Dim AskUrl As String
  Dim detailurl As String
  Dim j_main, j_detail As String
  Dim jdecoded As New Collection
  Dim detail_jdecoded As New Collection
  Dim i, r, rd As Integer
  Dim wget As New Wgetclass
  Dim video As New YoutubeItem
  Dim videos As New Collection
  Dim videoid As String
  Dim treetext As String
  Dim previous As String
  Dim mr_query, mr_key, mr_text As String
  Dim mr_picture As Picture

  AskUrl = "https://www.googleapis.com/youtube/v3/search?part=snippet"
  AskUrl &= "&type=video"
  AskUrl &= queryopts
  If relatedto <> "" Then Askurl &= "&relatedToVideoId=" & relatedto
  If pagetoken <> "" Then AskUrl &= "&pageToken=" & pagetoken
  Askurl &= "&key=" & APIKEY()


  j_main = wget.DownloadAsync("'" & AskUrl & "'")
  Try jdecoded = JSON.Decode(j_main)
  If Error Then Goto ReturnErrorLabel
  If jdecoded = Null Then Goto ReturnErrorLabel
  
  Try r = jdecoded["items"].count
  If Error Then Goto ReturnErrorLabel
  If r = 0 Then Goto ReturnErrorLabel
  
  'use a single query to get all of the durations
  'put the durations into a collection with key = videoid
  detailurl = "https://www.googleapis.com/youtube/v3/videos?part=contentDetails&key=" & APIKEY() & "&id=" 
  For i = 0 To r - 1
    videoid = ""
    Try videoid = jdecoded["items"][i]["id"]["videoId"]
    If videoid <> "" Then
      detailurl &= videoid & ","
    Endif
  Next
  If Right(detailurl) = "," Then detailurl = Left(detailurl, -1)
  detailurl = "'" & detailurl & "'"
  j_detail = wget.DownloadAsync(detailurl)

  Try detail_jdecoded = JSON.Decode(j_detail)
  Try rd = detail_jdecoded["items"].count

  For i = 0 To rd - 1
    video = New YoutubeItem

    videoid = detail_jdecoded["items"][i]["id"]
    video.duration = time_decode(detail_jdecoded["items"][i]["contentDetails"]["duration"])
    Try video.published = jdecoded["items"][i]["snippet"]["publishedAt"]
    Try video.channelId = jdecoded["items"][i]["snippet"]["channelId"]
    Try video.channeltitle = jdecoded["items"][i]["snippet"]["channelTitle"]
    Try video.title = jdecoded["items"][i]["snippet"]["title"]
    Try video.description = jdecoded["items"][i]["snippet"]["description"]
    Try video.playurl = "http://www.youtube.com/watch?v=" & videoid
    Try video.thumbnail = jdecoded["items"][i]["snippet"]["thumbnails"]["default"]["url"]    
    videos.Add(video, videoid)
    'Stop
    If Not youtubetree.Exist(videoid) Then
      treetext = video.title & "\n"
      treetext &= FormatTime(video.duration)
      
      'parentkey means where to put search results; no null values allowed
      youtubetree.Add(videoid, treetext, temp_picture(resizew), under)
      Try youtubetree[youtubetree.item.parentkey].Expanded = True
      Wait
      'defer the download of the picture
      Get_Thumb_defer(youtubetree, videoid, video.thumbnail, resizew)
    Endif
  Next

  'Add more results item
  Try mr_key = "__MORERESULTS__" & Rnd(0, 9999) 
  Try mr_key &= Chr(8) & queryopts & Chr(8) & jdecoded["nextPageToken"]
  If Not Error Then
    mr_text = ("See more results") '& ": (" & more_results_text & ")"
    mr_picture = picture["icon:/" & (resizew Div 2) & "/find"]
    youtubetree.Add(mr_key, mr_text, mr_picture, under)
  Endif
  
  'tree tag holds all the video informations
  youtubetree.tag = collection_join(youtubetree.tag, videos)

  Return Null
  ReturnErrorLabel:
  If Error Then 
    Message.Error("No results or error")
    Return Null
  Endif

End


Private Function collection_join(c1 As Collection, c2 As Collection) As Collection
  Dim c3 As New Collection
  Dim k As String
  Dim v As Variant
  If c1 = Null Then Return c2
  If c2 = Null Then Return c1
  For Each v In c1
    k = c1.key
    Try c3.Add(v, k)
  Next
  For Each v In c2
    k = c2.key
    Try c3.Add(v, k)
  Next
  Return c3
End


Public Struct downinfo
  tree As Treeview
  tree_key As String
  dfile As String
  max_w As Integer
End Struct

Public hAsyncClient As HttpClient

Private Function Get_Thumb_defer(tree As Treeview, tree_key As String, t_url As String, max_w As Integer)
  Dim di As New Downinfo
  Dim dfile As String = Temp()
  di.tree_key = tree_key
  di.tree = tree
  di.dfile = dfile
  di.max_w = max_w

  HAsyncClient = New HttpClient As "hAsyncClient"

  HAsyncClient.tag = di
  hAsyncClient.URL = t_url
  hAsyncClient.TimeOut = 5
  hAsyncClient.Async = True
  hAsyncClient.TargetFile = dfile
  hAsyncClient.Get()
End



Public Function temp_picture(resizew As Integer) As Picture
  Dim tmppicture As Picture
  Dim aspect As Float = 1.33333
  Try tmppicture = picture["black.png"]
  If resizew <> 0 Then
    tmppicture = tmppicture.Image.Stretch(resizew, CInt(resizew / aspect)).picture
  Endif
  Return CoverManager.Shadowed(tmppicture).picture
End

Public Sub hAsyncClient_Finished()
  Dim di As Downinfo = Last.tag
  Dim tmppicture As Picture
  Dim aspect As Float = 1.33333

  tmppicture = Picture.Load(di.dfile).Image.Stretch(di.max_w, CInt(di.max_w / aspect)).picture
  Try di.tree[di.tree_key].Picture = CoverManager.Shadowed(tmppicture).picture
  Try Kill di.dfile
End


