' Gambas class file

'Copyright (C) 2007, 2008 Antonio Orefice

Public AlreadyLoaded As Boolean = False 'true if the form loaded it's settings from disk at least one time
Private exportfilespath As String
Public exportfile As String
Public albumviewtexlen As Integer = 30
Public mouseonfsform As Boolean = False
Public IceRadio As New IceCastClass

Private Media_Next_path As String = ""

Public Struct mpvOption
  name As String
  data As String
End Struct


Public Struct EventInfo
  Start_time_date As Date
  ServiceID As String
  EventID As String
  ChannelName As String
  Duration_date As Date
  Free_Ca_mode As String
  event_name As String
  text_char As String
  category As String
  icon As String
End Struct

Private Function IsTabChildren(name As String, Optional index As Integer = 99999) As Boolean
  
  Dim found As Boolean = False
  Dim theobject As Object
  
  If index <> 99999 Then
    For Each theobject In Leftsidetabs[index].Children
      If theobject.name = name Then
        found = True
        Break
      Endif
    Next 'theobject
  Else
    For Each theobject In Leftsidetabs.Current.Children
      If theobject.name = name Then
        found = True
        Break
      Endif
    Next 'theobject
  Endif
  Return found
  
End

Public Function TabSelectedLibrary() As Boolean

  Return IsTabChildren("NOPARSETABLIBRARY")

End

Public Function TabSelectedPlaylist() As Boolean

  Return IsTabChildren("NOPARSETABPLAYLIST")

End

Public Function TabSelectedFlash() As Boolean

  Return IsTabChildren("NOPARSETABFLASH")

End

Public Function TabSelectedShoutcast() As Boolean

  Return IsTabChildren("NOPARSETABSHOUTCAST")

End

Public Function TabSelectedyoutube() As Boolean

  Return IsTabChildren("NOPARSETABYOUTUBE")

End

Public Function TabSelectedCDDA() As Boolean

  Return IsTabChildren("NOPARSETABCDDA")

End

Public Function TabSelectedDVD() As Boolean

  Return IsTabChildren("NOPARSETABDVD")

End

Public Function TabSelectedDVB() As Boolean

  Return IsTabChildren("NOPARSETABDVB")

End

Public Function TabSelectedBrowse() As Boolean

  Return IsTabChildren("NOPARSETABBROWSE")

End

Public Function TabSelectedDVDAt(index As Integer) As Boolean

  Return IsTabChildren("NOPARSETABDVD", index)

End

Public Function TabSelectedCDDAAt(index As Integer) As Boolean

  Return IsTabChildren("NOPARSETABCDDA", index)

End

Public Function TabSelectedPodCasts() As Boolean

  Return IsTabChildren("NOPARSETABPODCAST")

End

Public Function TabSelectedMediaInfo() As Boolean

  Return IsTabChildren("NOPARSETABMEDIAINFO")

End

Public Function TabSelectedAlbums() As Boolean

  Return IsTabChildren("NOPARSETABALBUMS")

End

Public Function TabSelectedProfiles() As Boolean

  Return IsTabChildren("NOPARSETABPROFILES")

End

Public closing As Boolean = False

' with compiz window manager window position is not correctly restored,
' so we measure the delta and apply it.
Public ScreenXBefore As Integer
Public ScreenYBefore As Integer
Public FullScreenSwitchDeltaX As Integer = 0
Public FullScreenSwitchDeltaY As Integer = 0

Public mypodcast As New Podcast
Public MyRadio As New ShoutCastClass
Public Youtube As New Youtubeclass

Public mplayer As New MplayerClass 


Public MyFlash As FlashClass

Public MyLibrary As New PlaylistClass
Public MyPlaylist As New PlaylistClass
Public MyDVBTList As New PlaylistClass
Public Host As Object
Public MyAlbumsLib As New AlbumView



Public Shutdown As String = "FALSE"

Public hLock As Stream

Public IsDVD As Boolean = False
Public ISCDDA As Boolean = False

Public FullyLoaded As Boolean = False

Private MousePos As String = "0.0"
Public Alternate As Boolean = True
Private IgnoreMouse As Boolean = False
Public ResizeFactor As Float = 0
Public old_ResizeFactor As Float = 1

Private PostVFilters As String = ""
Private mouseleft As Boolean = False 'used to manage dblclick event in videoarea group
Private MouseOnFmain As Boolean = True 'used to manage autohide panels on multihead screens ;-)
'statusbar time format, can be:
'0- 00:00:00/00:00:00 (total formatted time)
'1- -00:00:00/00:00:00 (remaining formatted time)
'2- 0000/0000 (total seconds)
'3- -0000/0000 (total remaining seconds)
Private TimeFormat As Integer = "0"
Private DoSlideUp As Boolean = True 'used to manage controlpanel hide/show smootly

Public PlayStarted As Boolean = False
Public EndOfMediaReached As Boolean = False
Public SplitterLayout As Integer[]
Public LeftsideWasVisible As Boolean = False
Private VEqHasBeenSet As Boolean = False 'To Apply video equalizer settings just one time :)

Public LastFocusedObj As Object

Private GuiDragging As Boolean = False 'if gui is dragging dont read hotkeys

Private Const MIME_ROWS As String = "text/x-xt7-rows-list"

'If you want to change tabstrip order, then you'll have to modify this too:
Private Const TabStripLibrary As Integer = 0
Private Const TabStripPlaylist As Integer = 1
Private Const TabStripMediaInfo As Integer = 2

'mousedrag is incorrectly raised on dblclick on videogrouparea, so we use this:
Public SwitchingFullScreen As Boolean = False

Private UserStopped As Boolean = False 'if user has hit stop, don't advance in playlist.
Private FirstPlay As Boolean = False ' used to avoid playing the media at startup if togglepls button is toggled

Public LastDvdID As String = ""            'used to manage dvd disk changes

Public DVDTabID As Integer = "-1"  'as we hide the dvd tab, we loose the caption, so we must remember the id
Public CDDATabID As Integer = "-1"
Public FlashTabID As Integer = "-1"  'as we hide the Flash tab, we loose the caption, so we must remember the id

Private DynaGuiTools As New DynaGuiClass

Public TagEditMode As Boolean = False

Public trayicon1 As Trayicon

Public Sub InitTrayIcon()
  'Dim trayicon1 As New TrayIcon

  Dim SystemTray As Boolean = True
  Try SystemTray = desktop.HasSystemTray
  If Error Then
    Debug "Couldn't check if your desktop has a system tray, assuming it has"
  Endif
  If Not SystemTray Then Return
  Try trayicon1 = New Trayicon
  If Error Then Debug "Cannot Init Trayicon"
  'trayicon1.Picture = picture.Load("trayicon.png")
  trayicon1.Picture = picture.Load("xt7-player-mpv.png")
  'trayicon1.Picture.Image.Stretch(trayicon1.w, trayicon1.h)
  trayicon1.Visible = True
  Try Object.Attach(Trayicon1, Me, "Trayicon1")
  If Error Then Debug "Cannot Init Trayicon"
End

Public Sub Form_Open()
  SetFlexSpaceVisibility(False)
  'init dynagui toolbar objects
  DynaGuiTools.AllowedContainers = ["MainToolbar"] ', "SliderBox"]
  DynaGuiTools.YOffset = - Me.Font.TextHeight("Ij") - 8
  'Hide the coverbox
  If GeneralOptions.CoverCHK2.value Then ShowAudioPanel(False)
  'Popup translation needed dialog:
  If global.TranslationNeeded Then
    If Not (Exist(TranslationNeeded.Notranslatefile)) Then TranslationNeeded.show
  Endif

End

Public Sub SetFlexSpaceVisibility(Visibility As Boolean)

  If Visibility = True Then
    FlexSpace.border = Border.plain
    FlexSpace.background = Color.White
  Else
    FlexSpace.border = Border.none 'gambas3
  Endif

End

Public Sub DynaGuiToolbar_Click()

  Dim ButtonName As String
  If MenuToolBarLocked.checked Then
    Try ButtonName = Last.name
    If (Not Error ) Then
      Select Case ButtonName
        Case "ShowVolBtn2"
          ShowVolBtn2_Click()
        Case "OpenNetworkBTN"
          OpenNetworkBTN_Click()
        ' Case "ConfigureChainsBTN"
        '   If (Not global.initearlyformsdone) Then InitEarlyForms()
        '   ConfigureChainsBTN_Click()
        ' Case "ConfigureBTN"
        '   If (Not global.initearlyformsdone) Then InitEarlyForms()
        '   ConfigureBTN_Click()
        Case "RealtimeBTN"
          If (Not global.initearlyformsdone) Then InitEarlyForms()
          Global.Center(fmain, realtimeform)
          RealtimeForm.show()
        Case "ShowVideoEq"
          If (Not global.initearlyformsdone) Then InitEarlyForms()
          ShowVideoEq_Click()
        Case "ShowAudioEq"
          If (Not global.initearlyformsdone) Then InitEarlyForms()
          ShowAudioEq_Click()
        Case "SwitchAudioBTN"
          SwitchAudioBTN_Click()
        Case "SwitchSubBtn"
          SwitchSubBtn_Click()
        Case "PoweroffBTN"
          If (Not global.initearlyformsdone) Then InitEarlyForms()
          PowerffBTN_click()
        Case "SwitchSidePanelBTN"
          SwitchSidePanelBTN_click()
        Case "FullScreenBtn"
          FullScreenBtn_click()
        Case "TagEditorBtn"
          TagEditorBtn_click()
        Case "ConfigureBTN"
          alloptionsmenu.popup
      End Select
    Endif
  Endif

End

'--------------------------------------------------



Public Sub TagEditorBtn_click()
  
  EditTagModeSwitch1_Click()
  
End

Public Sub InitLibrary(MyLibrary As PlaylistClass, LibraryGrid As Gridview, WithMplayer As Boolean)

  Dim Tag As String
  Dim i As Integer = 0

  MyLibrary.Init(WithMplayer)
  LibraryGrid.Columns.count = MyLibrary.ColumnIndex.Count
  For Each Tag In MyLibrary.ColumnIndex
    LibraryGrid.Columns[i].Text = MyLibrary.ColumnIndex.Key
    i = i + 1
  Next
  MyLibrary.Load(LibraryGrid, global.confpath)
  ' Try Object.SetProperty(librarygrid, "sorted", True) 'use setproperty to make it compile with gb 3.0 too
  If Lower(librarygrid.name) = "playlistgrid" Then PlayListSelInfoBox.visible = False
  GridRefreshWorkaround(librarygrid)

End

Public Sub HideGrid(Librarygrid As Gridview)

  librarygrid.visible = False

End

Public Sub ShowGrid(LibraryGrid As Gridview)

  Select Case librarygrid.name
    Case "PlaylistGrid"
      WaitPanel2.visible = False
      playlistgrid.visible = True
    Case "LibraryGrid"
      WaitPanel.visible = False
      LibraryGrid.visible = True
    Case "DVBTGrid"
      WaitPanel3.visible = False
      dvbtgrid.visible = True
      HBox19.visible = True
  End Select
  librarygrid.scrollx = 0
  librarygrid.scrolly = 0

End

Public Sub AllInit_Pre()
  shadeup.visible = False
  VersionCheck()
  'MakeProfilePath() <--maininit already did this
  MakeScreenshotsPath()
  Try Mkdir global.confpath & "/.ExportFiles/"
  ExportFilesPath = global.confpath & "/.ExportFiles/"
  FileView1.visible = False
  tagpanel.Reparent(zzzfake)
  'mplayer.FillLog = TRUE
  InitPropertiesGrid()
  AspectMenu.visible = False
  Try Kill "/tmp/FakeInput.conf"
  Try Copy "FakeInput.conf" To "/tmp/FakeInput.conf"
  SetDvdTabVisibility(False)
  SetCDDATabVisibility(False)
  If Not (Exist(global.confpath & "/" & "Factory_Defaults.profile")) Then
    'inizializza prma tutto:
    InitEarlyForms()
    ReallySaveAllSettings("Factory_Defaults", False) 'before loading user settings, make a profile with factory values.
  Endif
  Global.LoadEarlySettings(global.CurrentProfile) 'slow
  'the following has To be called after loadearlysettings because 
  'Is There where we load generaloptions form settings
  If generaloptions.ShowCoversInListChk.value Then
    covermanager.prebuffer()
    Debug "the User likes cover, so we prebuffer cover list In background..."
    Debug
  Endif
  
  If global.pluginmode Then 
    Leftsidepanel.hide
    bottomvbox.hide
  Endif
  
  HideGrid(PlaylistGrid)
  HideGrid(LibraryGrid)
  HideGrid(dvbtGrid)
  SetDvdTabVisibility(False)
  SetCDDATabVisibility(False)
  SetStyle_early()

End

Public Sub InitEarlyForms()

  Debug "start at: " & Time
  Debug
  Try Last.mouse = mouse.wait
  fmain.mouse = mouse.wait
  global.initearlyformsdone = True
  SubAndOsd.Init()
  VFiltersCfg.Init()
  AFiltersCfg.Init()
  GeneralOptions.Init()
  Try Last.mouse = mouse.default
  fmain.mouse = mouse.default
  Debug "Ends at:" & Time
  Debug

End

Public Sub AllInit_Post()
  
  Dim savefileview1path As String
  Hsplit1ResizeDelayed = New Timer As "Hsplit1ResizeDelayed" 'used to delay the hsplit resize and better performance
  Hsplit1ResizeDelayed.delay = 300
  Hsplit1ResizeDelayed.Enabled = False
  savefileview1path = FileView1.dir
  FileView1.dir = "non/esistent/dir/i/am/very/sure/of/this/1234432100/don/t/you"
  FileView1.visible = True
  FileView1.dir = savefileview1path
  fileview1Myreload()
  Leftsidepanel.mouse = mouse.wait
  InitLibrary(MyLibrary, LibraryGrid, True)
  InitLibrary(MyPlaylist, PlayListGrid, True)
  InitLibrary(MyDVBTList, DVBTGrid, False)
  
  If TabSelectedAlbums() Then 
    Albums_Select()
  Endif  
  
  Try mypodcast.LoadPods(global.confpath & "/mypods.txt", PodcastTree)
  
  'some gtk component problem here
  Try ComboHistory.LoadHistory(Searchfield, global.confpath & "/" & global.CurrentProfile)
  Try ComboHistory.LoadHistory(SearchfieldPLS, global.confpath & "/" & global.CurrentProfile)
  Try ComboHistory.LoadHistory(searchfieldalbums, global.confpath & "/" & global.CurrentProfile)
  Try ComboHistory.LoadHistory(AddUriForm.UriInsComboBox, global.confpath & "/" & global.CurrentProfile)
  Try ComboHistory.LoadHistory(Fmain.UrlBox, global.confpath & "/" & global.CurrentProfile)
  Try ComboHistory.LoadHistory(youSearchfield, global.confpath & "/" & global.CurrentProfile)
  Try ComboHistory.LoadHistory(SearchFieldDVB, global.confpath & "/" & global.CurrentProfile)
  Myflash = New FlashClass As "MyFlash"
  InitFlashGrid()

  Leftsidepanel.mouse = mouse.Default
  Try GeneralOptions.LoadWatchDir(global.confpath & "/" & global.CurrentProfile)
  Try GeneralOptions.LoadExcludeDir(global.confpath & "/" & global.CurrentProfile)
  'kill prevoiusly launched xbindkeys
  Shell ("killall " & global.CustomBindKeys) For Read
  Application.ShowTooltips = GeneralOptions.ToolTipsCHK.value
  'Prepare our xbindkeys link, we'll need it to ensure only one at time.
  Shell ("ln -s $(which xbindkeys) " & global.confpath & "/Xt7BindKeys") For Read
  'start to listen for remote commands, one connection is ok.
  If Not global.pluginmode Then
    Mysocket.type = Net.Unix
    Mysocket.path = global.confpath & "/.localsocket"
    Mysocket.Listen(1)
  Endif
  InitGenresTag()
  Wait 0.5
  SetStyle_later()
  HotKeys.init()
  Try HotKeys.LoadHotKeys(global.confpath & "/" & global.CurrentProfile)
  Try UpdateProfilesTabList()
  UpdateMenuTabVisibility()
  If GeneralOptions.TrayCHK1.value Then Try InitTrayIcon()
  If TabSelectedShoutcast() Then
    ShoutCast_Select()
  Else If TabSelectedLibrary() Then
    LibraryGrid_Select()
  Else If TabSelectedPlaylist() Then
    LibraryGrid_Select()
  Else If TabSelectedyoutube() Then
    Youtube_Select()
  Endif
  global.AddUserExtensions(GeneralOptions.KnownExtensions.text)
  FullyLoaded = True
  ShowGrid(librarygrid)
  ShowGrid(playlistgrid)
  ShowGrid(DVBTGrid)
  If tabselectedbrowse() Then 
    FileView1_Arrange()
      Else
    shadeup.visible = True
  Endif
  If fmain.havetoshowbrowsetab Then
    fmain.havetoshowbrowsetab = False
    If Exist(Application.Args[1]) Then fmain.ShowBrowseTabTo(Application.Args[1])
  Endif
  If GeneralOptions.ToolTipsCHKDBUS.value Then Try ExportDbusProperties()
  updaterecentfiles()
  'we created a "default" empty profile, copy the factory settings to it
  If FirstTimeXt7 Then 
    ReallySaveAllSettings("default", False)
    global.currentprofile = "default"
    Try UpdateProfilesTabList()
  Endif

  Try GetLastVersion()

End

Private RecentFileEntry As Menu

Private HaveToPlay As String = ""

Public Sub updaterecentfiles()
  
  Dim history, entry As String
  Dim historyarray As String[]
  Dim sep As String = Chr(8)
  Dim HaveToSeek As String = ""

  Try history = file.Load(global.Historyfile)
  If Error Then Return
  'Clear and pupulate the list:
  ClearRecentFilesSub()
  historyarray = Split(history, "\n", "", True)
  historyarray.Reverse()
  For Each entry In historyarray
    RecentFileEntry = New Menu(MenuOpenRecent) As "RecentFileEntry"
    RecentFileEntry.name = Timer & Rnd(0, 10000)
    If entry Like "*" & sep & "*" Then 
      If HaveToPlay = "" Then
        Try HaveToPlay = Split(entry, sep, "", True, "")[0]
        If Not Error Then 
          Try HaveToSeek = Split(entry, sep, "", True, "")[1]
          entry = HaveToPlay
        Endif
      Endif
    Endif
    If entry Like ("*" & sep & "*") Then
      Try RecentFileEntry.caption = Split(entry, sep, "", True, "")[0]
      If Error Then Return
    Else
      RecentFileEntry.caption = entry
    Endif
    RecentFileEntry.Picture = picture["icon:/medium/recent"]
  Next 'entry
  RecentFileEntry = New Menu(MenuOpenRecent) As "ClearRecentFiles"
  RecentFileEntry.name = "menuclearrecent"
  RecentFileEntry.caption = "Clear History"
  RecentFileEntry.picture = picture["icon:/medium/delete"]
  
  'restore the previous media
  If GeneralOptions.RestorePlayCHK.value Then
    If HaveToPlay <> "" Then 
      If HaveToSeek <> "" Then
        If Not (PlayFromCommandline) Then 
          Play(HaveToPlay, " -ss " & HaveToSeek)
        Endif
      Endif
    Endif
  Endif

End

Public Sub RecentFileEntry_Click()

  Try Play(Last.caption)

End

Public Sub ClearRecentFiles_Click()

  Try Kill global.Historyfile
  If Not Error Then 
    ClearRecentFilesSub()
  Else
    Message.Error(("Couldn't clear the history!"), "Ok")
  Endif

End

Public Sub ClearRecentFilesSub()

  Dim child As Menu
  Repeat 
    For Each child In MenuOpenRecent.Children
      child.delete
    Next 'child
  Until (MenuOpenRecent.Children.count = 0)

End

Public Sub InitFlashGrid()

  MyFlash.Grid = Fmain.FlashGrid
  MyFlash.init()

End

Public Sub MakeProfilePath()

  Dim DefaultProfilepath As String = global.confpath & "/default.profile"
  'Try to make some profile folders
  If Not Exist(file.Dir(DefaultProfilepath), True) Then
    Try Mkdir File.dir(File.Dir(File.dir(File.Dir(File.Dir(DefaultProfilepath)))))
    Try Mkdir File.Dir(File.dir(File.Dir(File.Dir(DefaultProfilepath))))
    Try Mkdir File.dir(File.Dir(File.Dir(DefaultProfilepath)))
    Try Mkdir File.Dir(File.Dir(DefaultProfilepath))
    Try Mkdir File.Dir(DefaultProfilepath)
    Try Mkdir DefaultProfilepath
  Endif

End

Public Sub MakeScreenshotsPath()

  Try Shell "mkdir -p " & Global.ScreenshotFolder & " >/dev/null 2>&1" Wait

End

Private Sub InitGenresTag()
  
  tagbox5.add("A capella")
  tagbox5.add("Acid")
  tagbox5.add("Acid Jazz")
  tagbox5.add("Acid Punk")
  tagbox5.add("Acoustic")
  tagbox5.add("AlternRock")
  tagbox5.add("Alternative")
  tagbox5.add("Ambient")
  tagbox5.add("Anime")
  tagbox5.add("Avantgarde")
  tagbox5.add("Ballad")
  tagbox5.add("Bass")
  tagbox5.add("Beat")
  tagbox5.add("Bebob")
  tagbox5.add("Big Band")
  tagbox5.add("Black Metal")
  tagbox5.add("Bluegrass")
  tagbox5.add("Blues")
  tagbox5.add("Booty Bass")
  tagbox5.add("Britpop")
  tagbox5.add("Cabaret")
  tagbox5.add("Celtic")
  tagbox5.add("Chamber Music")
  tagbox5.add("Chanson")
  tagbox5.add("Chorus")
  tagbox5.add("Christian Gangsta Rap")
  tagbox5.add("Christian Rap")
  tagbox5.add("Christian Rock")
  tagbox5.add("Classic Rock")
  tagbox5.add("Classical")
  tagbox5.add("Club")
  tagbox5.add("Club-House")
  tagbox5.add("Comedy")
  tagbox5.add("Contemporary Christian")
  tagbox5.add("Country")
  tagbox5.add("Crossover")
  tagbox5.add("Cult")
  tagbox5.add("Dance")
  tagbox5.add("Dance Hall")
  tagbox5.add("Darkwave")
  tagbox5.add("Death Metal")
  tagbox5.add("Disco")
  tagbox5.add("Dream")
  tagbox5.add("Drum & Bass")
  tagbox5.add("Drum Solo")
  tagbox5.add("Duet")
  tagbox5.add("Easy Listening")
  tagbox5.add("Electronic")
  tagbox5.add("Ethnic")
  tagbox5.add("Euro-House")
  tagbox5.add("Euro-Techno")
  tagbox5.add("Eurodance")
  tagbox5.add("Fast Fusion")
  tagbox5.add("Folk")
  tagbox5.add("Folk-Rock")
  tagbox5.add("Folklore")
  tagbox5.add("Freestyle")
  tagbox5.add("Funk")
  tagbox5.add("Fusion")
  tagbox5.add("Game")
  tagbox5.add("Gangsta")
  tagbox5.add("Goa")
  tagbox5.add("Gospel")
  tagbox5.add("Gothic")
  tagbox5.add("Gothic Rock")
  tagbox5.add("Grunge")
  tagbox5.add("Hard Rock")
  tagbox5.add("Hardcore")
  tagbox5.add("Heavy Metal")
  tagbox5.add("Hip-Hop")
  tagbox5.add("House")
  tagbox5.add("Humour")
  tagbox5.add("Indie")
  tagbox5.add("Industrial")
  tagbox5.add("Instrumental")
  tagbox5.add("Instrumental Pop")
  tagbox5.add("Instrumental Rock")
  tagbox5.add("JPop")
  tagbox5.add("Jazz")
  tagbox5.add("Jazz+Funk")
  tagbox5.add("Jungle")
  tagbox5.add("Latin")
  tagbox5.add("Lo-Fi")
  tagbox5.add("Meditative")
  tagbox5.add("Merengue")
  tagbox5.add("Metal")
  tagbox5.add("Musical")
  tagbox5.add("National Folk")
  tagbox5.add("Native American")
  tagbox5.add("Negerpunk")
  tagbox5.add("New Age")
  tagbox5.add("New Wave")
  tagbox5.add("Noise")
  tagbox5.add("Oldies")
  tagbox5.add("Opera")
  tagbox5.add("Other")
  tagbox5.add("Polka")
  tagbox5.add("Polsk Punk")
  tagbox5.add("Pop")
  tagbox5.add("Pop-Folk")
  tagbox5.add("Pop/Funk")
  tagbox5.add("Porn Groove")
  tagbox5.add("Power Ballad")
  tagbox5.add("Pranks")
  tagbox5.add("Primus")
  tagbox5.add("Progressive Rock")
  tagbox5.add("Psychadelic")
  tagbox5.add("Psychedelic Rock")
  tagbox5.add("Punk")
  tagbox5.add("Punk Rock")
  tagbox5.add("R&B")
  tagbox5.add("Rap")
  tagbox5.add("Rave")
  tagbox5.add("Reggae")
  tagbox5.add("Retro")
  tagbox5.add("Revival")
  tagbox5.add("Rhythmic Soul")
  tagbox5.add("Rock")
  tagbox5.add("Rock & Roll")
  tagbox5.add("Salsa")
  tagbox5.add("Samba")
  tagbox5.add("Satire")
  tagbox5.add("Showtunes")
  tagbox5.add("Ska")
  tagbox5.add("Slow Jam")
  tagbox5.add("Slow Rock")
  tagbox5.add("Sonata")
  tagbox5.add("Soul")
  tagbox5.add("Sound Clip")
  tagbox5.add("Soundtrack")
  tagbox5.add("Southern Rock")
  tagbox5.add("Space")
  tagbox5.add("Speech")
  tagbox5.add("Swing")
  tagbox5.add("Symphonic Rock")
  tagbox5.add("Symphony")
  tagbox5.add("Synthpop")
  tagbox5.add("Tango")
  tagbox5.add("Techno")
  tagbox5.add("Techno-Industrial")
  tagbox5.add("Terror")
  tagbox5.add("Top 40")
  tagbox5.add("Trailer")
  tagbox5.add("Trance")
  tagbox5.add("Trash Metal")
  tagbox5.add("Tribal")
  tagbox5.add("Trip-Hop")
  tagbox5.add("Vocal")

End

Private paddingovr As Integer 
Public Sub ArrangeCpl(Optional NumButtonsCPL As Integer = 9)

  Dim ButtonWovr, ButtonHovr As Integer
  Dim TheObject As Object

  ' NumButtonsCPL = 0
  ' 'fix bottom panel for high sized fonts
  ' '---------------------------------------------------------------------------
   ButtonWovr = 36 '36
   ButtonHovr = 36 '36
   PaddingOvr = 4 '5
  ' 
  If global.pluginmode Then
    ' ButtonWovr = 24
    ' buttonhovr = 28
    PaddingOvr = 2
    'panel9.padding = 8
    volumecontainer.visible = True
  Endif

  For Each theobject In ControlPanel.Children
    If theobject.visible Then
      'If Not theobject Is Panel Then
        If Not (theobject Is Panel) Then theobject.w = ButtonWovr
        theobject.h = ButtonHovr
    Endif
  Next

  For Each theobject In ControlPanelright.Children
    If theobject.visible Then
      theobject.w = ButtonWovr
      theobject.h = ButtonHovr
    Endif
  Next

  controlframe.h = ButtonHovr + (paddingovr * 2)
  ControlPanel.x = controlframe.x + paddingovr
  ControlPanel.y = 0 + (paddingovr)

  ControlPanel.w = controlframe.w - controlpanelright.w - (paddingovr * 2)
  controlpanelright.y = ControlPanel.y
  Statusbar1.h = Statusbar1.Font.TextHeight("[IJ]") 
  If global.pluginmode Then statusbar1.visible = False
  SaveVolumeSlider.y = SaveVolumeSlider.Parent.h Div 6

End

Public Sub SetStyle_early()
  
  Dim TheObject As Object
  
  Dim backcolor As String = GeneralOptions.backcolorChooseBTN1.Background
  Dim forecolor As String = GeneralOptions.ColorChooseBTN1.Background
  Dim Userfont As Font = GeneralOptions.FontChooseBTN1.font
  ' 
  If Trim(generaloptions.BottomPanelImage.text) <> "" Then
    Try picturebox1.Picture = picture.Load(generaloptions.BottomPanelImage.text)
    If Error Then Debug "sorry, couldn't load the image " & generaloptions.BottomPanelImage.text
  Endif
  
  StatusLabelLeft.text = ""
  StatusLabelright.text = ""
  ' 
  shadeup.visible = False

  cachebar.w = 0
  cachebar.h = (fmain.font.textHeight("iJ") Div 4)
  
  'Set font size AND stile OF the whole form; beware the AudioForm!
  If global.pluginmode Then 
    Maintoolbar.h = 0
    toolbarbackground.hide
    'cachebar.h = 6
  Else
    If desktop.Height > 600 Then
      Maintoolbar.h = 32
    Else
      Maintoolbar.h = 24
    Endif
  Endif
  ' 
  ArrangeCpl(9)
  
  If audioform.AudioPanel.parent = Rightsidepanel Then
    If (Not mplayer.ProcessRunningOvr()) Then ShowAudioPanel(False) 
    SetSubControlsStyles(Fmain)
    For Each TheObject In Audioform.controls
      If theobject Is Label Then
        Try TheObject.font = GeneralOptions.FontChooseBTN2.font
        Try TheObject.Foreground = GeneralOptions.ColorChooseBTN2.Background
      Endif
    Next 'TheForm
    ShowAudioPanel(True)
  Else
    SetSubControlsStyles(Fmain)
    For Each TheObject In Audioform.controls
      If theobject Is Label Then
        Try TheObject.font = GeneralOptions.FontChooseBTN2.font
        Try TheObject.foreground = GeneralOptions.ColorChooseBTN2.Background
      Endif
    Next 'TheForm
  Endif
  
  audioform.Label1.Foreground = &HFFFF00&
  audioform.Label1.Font.Italic = True
  Audioform.Label1.Font.size = Audioform.Label2.Font.size + 4
  fmain.Statusbar1.Foreground = &HF0F0F0&
  fmain.Statusbar1.Background = &000000&
  
  'Then set specific ones:
  OverlayTrayTip.font = GeneralOptions.FontChooseBTN4.font
  OverlayTrayTip.foreground = GeneralOptions.ColorChooseBTN4.Background
  OverlayTrayTip.Panel2.background = GeneralOptions.backcolorChooseBTN3.Background
  
  Librarygrid.font = Userfont
  Librarygrid.Foreground = forecolor
  Librarygrid.Background = backcolor
  'Panel2.background = Librarygrid.Background
  
  Global.Alternatecolor = GeneralOptions.backcolorChooseBTN2.Background
  
  dvbtgrid.font = Userfont
  dvbtgrid.Foreground = forecolor
  dvbtgrid.Background = backcolor
  'panel3.Background = backcolor
  dvbtgrid.Rows.h = dvbtgrid.Font.TextHeight("^_") + global.rowpadding
  
  Playlistgrid.font = Userfont
  PlaylistGrid.Foreground = forecolor
  PlayListGrid.Background = backcolor
  'Panel1.background = backcolor
  
  FlashGrid.font = Userfont
  FlashGrid.Foreground = forecolor
  FlashGrid.Background = backcolor
  'Panel5.background = backcolor
  
  ProfilesListBox.font = Userfont
  ProfilesListBox.foreground = forecolor
  ProfilesListBox.background = backcolor
  
  CDDAGrid.font = Userfont
  CDDAGrid.Foreground = forecolor
  CDDAGrid.Background = backcolor
  'panel4.Background = backcolor
  
  treeview1.font = Userfont
  treeview1.Foreground = forecolor
  treeview1.Background = backcolor
  
  FileView1.font = Userfont
  FileView1.Foreground = forecolor
  FileView1.Background = backcolor
  
  AlbumGridView.font = Userfont
  AlbumGridView.Foreground = forecolor
  AlbumGridView.Background = backcolor
  'Panel8.background = backcolor
  
  PropertiesGrid.font = Userfont
  PropertiesGrid.Foreground = forecolor
  PropertiesGrid.Background = backcolor
  'Panel7.Background = backcolor
  
  youtubetree.font = Userfont
  youtubetree.Foreground = forecolor
  youtubetree.Background = backcolor
  
  GenresTree.font = Userfont
  GenresTree.Foreground = forecolor
  GenresTree.Background = backcolor
  
  PodcastTree.font = Userfont
  PodcastTree.Foreground = forecolor
  PodcastTree.Background = backcolor
  
  ShutResultGrid.font = Userfont
  ShutResultGrid.Foreground = forecolor
  ShutResultGrid.Background = backcolor
  'panel6.Background = backcolor
  
  SearchField.Font.size = zzzFake.Font.size
  SearchFieldPLS.Font.size = zzzFake.Font.size
  SearchFieldalbums.Font.size = zzzFake.Font.size
  SearchFieldDVB.Font.size = zzzFake.Font.size
  HBox12.background = Color.lighter(Color.Lighter((Hbox12.Parent.background)))
  HBox12.Foreground = Color.black
  Label2.Font.bold = True
  PlayListSelInfo.Foreground = Color.black
  LibrarySelInfo.Foreground = Color.black
  progressframe.background = Color.rgb(0, 0, 0, 215)
  Initprogress()
End

Public Sub SetStyle_later()
  
  SetSubControlsStyles(AddUriForm)
  SetSubControlsStyles(AfiltersCfg)
  SetSubControlsStyles(AskName)
  SetSubControlsStyles(NewChains)
  SetSubControlsStyles(CountDown)
  SetSubControlsStyles(CoverManager)
  SetSubControlsStyles(HotkeyGrab)
  SetSubControlsStyles(HotKeys)
  SetSubControlsStyles(SearchFields)
  SetSubControlsStyles(TextDialog)
  SetSubControlsStyles(VfiltersCfg)
  ' SetSubControlsStyles(XConfigureAudioDriver)
  ' SetSubControlsStyles(XConfigureVideoDriver)
  
  covermanager.ResizeShadowTemplate(generaloptions.IconWidthCombobox.text)
  
End

Public Sub SetSubControlsStyles(TheForm As Form)
  'descend into controls and set various attributes:
  
  Dim TheObject As Object
  Dim objvalid As Boolean

  If closing Then Return
  
  For Each TheObject In TheForm.controls
    Try objvalid = (theobject.name = "")
    If Not Error Then 
      If Not Lower(TheObject.Name) = "label2" Then
        Try TheObject.font = GeneralOptions.FontChooseBTN3.font
      Endif
      If Not (theobject Is Menu) Then
        If Not ((TheObject.parent Is Frame) Or (theobject.parent.parent Is Frame)) Then
          Try TheObject.foreground = GeneralOptions.ColorChooseBTN3.Background
        Endif
      Endif
      
      If TheObject.name = "CurrentProfileLabel" Then TheObject.font.bold = True
    Endif
  Next 'TheForm
  
End

Public Sub DelayTimer_Timer()
  
  DelayTimer.stop
  AllInit_Post()
  Debug "Ended at: " & Timer
  Debug

End

Private FirstTimeXt7 As Boolean = True ' has the user ever used xt7?
Private fastquit As Boolean = False
Public havetoshowbrowsetab As Boolean = False
Private PlayFromCommandline As Boolean = False

Public Sub MainInit()
  
  Dim AlreadyRunning As Boolean = False

  Dim MySettings As New SettingsClass
  'Disable Shutdown feature at start.

  FirstTimeXt7 = Not (Exist(global.ConfPath))
  ShutOff_Click()
  MakeProfilePath()
  
  Try Shell "mkdir -p " & Global.ScreenshotFolder & " >/dev/null 2>&1" Wait
  Try Mkdir User.home & "/.config/mpv/"
  covermanager.MakeCoverDirs()

  'TRY TO get a LOCK file:
  Try hLock = Lock global.confpath & "/.lock"
  If Error Then
    AlreadyRunning = True
  Else
    'as there are no other istances, it's good to remove inputpipes
    Shell "rm " & global.confpath & "/.InputPipes/Xt7Input-* >/dev/null 2>&1" Wait ' To out
    Shell "rm " & global.confpath & "/.ExportFiles/* >/dev/null 2>&1" Wait ' To out
  Endif
  If Not global.pluginmode Then
    If global.currentprofile = "" Then
      global.CurrentProfile = MySettings.GetLastProfile(global.confpath)
    Endif
  Else
    global.currentprofile = "pluginmode"
  Endif
  Try UpdateProfilesTabList()

  If (Application.Args.count >= 2) Then
    If alreadyrunning And (Not global.pluginmode) Then
      'try to play the file to the running xt7-player:
      zzzfake.sock_play(Application.Args[1])
      Fastquit = True
      fmain.form_Close()
    Else
      AllInit_pre()
      
      FirstPlay = True 'used to  avoid playing media at start when togglepls button is toggled
      Me.mouse = mouse.Wait
      If Not global.pluginmode Then
        FMain.LoadFormGeometry()
      Endif
      fmain.Show
      Wait 
      If Not (Application.Args[1] Like "-*") Then 
        Media_Next_path = DConv(Application.Args[1])
        PlayFromCommandline = True 
        SetActivePlayQueue("browse")
        Play(DConv(Application.Args[1]))
      Endif
      Me.Mouse = mouse.Default
      If Not global.pluginmode Then havetoshowbrowsetab = True
    Endif
  Endif
  If Application.Args.count = 1 Then 
    AllInit_pre()
    FMain.LoadFormGeometry()
    fmain.Show
  Endif
  
  DelayTimer.delay = 1000
  DelayTimer.Start
  
  If (Application.Args.count = 1) Or ((Application.Args.count > 1) And (Not alreadyrunning)) Then
    'FMain.LoadFormGeometry()
    fmain.Show
  Endif
  LeftSideTabs_Click()
  Debug "Myinit ended at: " & Timer
  Debug
  
End


Public Sub ShowBrowseTabTo(fullpath As String)

  Dim path As String
  Dim tabid As Integer

  If global.IsNetworkURI(fullpath) Then Return
  Try path = file.Dir(fullpath)
  If Error Then 
    Debug "error, please report"
    Debug
    Return
  Endif
  Try tabID = Global.TabIndexByName("browse", Leftsidetabs)
  If Error Then 
    Debug "error, please report"
    Debug
    Return
  Endif
  Try UrlBox.text = path
  Try FileView1.dir = path
  FileView1.ShowDetailed = True
  
  Leftsidetabs.Index = Tabid
  Wait 0.001
  FileView1.Current = file.name(fullpath)
  FileView1.refresh
  Wait 0.001

End

Public Sub InitPropertiesGrid()
  
  Dim i As Integer

  PropertiesGrid.Columns.count = 2
  PropertiesGrid.Rows.count = 21
  PropertiesGrid[0, 0].text = "FileName"
  PropertiesGrid[1, 0].text = "Path"
  PropertiesGrid[2, 0].text = "FileSize"
  PropertiesGrid[3, 0].text = "Length"
  PropertiesGrid[4, 0].text = "Type"
  PropertiesGrid[5, 0].text = "Album"
  PropertiesGrid[6, 0].text = "Artist"
  PropertiesGrid[7, 0].text = "Title"
  PropertiesGrid[8, 0].text = "Year"
  PropertiesGrid[9, 0].text = "Genre"
  PropertiesGrid[10, 0].text = "Track No."
  PropertiesGrid[11, 0].text = "Comment"
  PropertiesGrid[12, 0].text = "Audio Channels"
  PropertiesGrid[13, 0].text = "Audio Rate"
  PropertiesGrid[14, 0].text = "Audio Codec"
  PropertiesGrid[15, 0].text = "Audio Bitrate"
  PropertiesGrid[16, 0].text = "Video Resolution"
  PropertiesGrid[17, 0].text = "Video Fps"
  PropertiesGrid[18, 0].text = "Video Codec"
  PropertiesGrid[19, 0].text = "Video Bitrate"
  PropertiesGrid[20, 0].text = "Total Bitrate"
  
  For i = 0 To PropertiesGrid.Rows.count - 1
    PropertiesGrid[i, 0].Font.bold = True
  Next 'i
  
  PropertiesGrid.Columns[0].Width = "-1"      'Autosize Columns
  
End

Private Function OneOf(one As String, two As String) As String
  
  If one <> "" Then
    Return one
  Else
    Return two
  Endif
  
End

Private Function cdda_track_name(chapter As String) As String
  Dim ct As Integer
  Try ct = CInt(chapter) 
  Try Return Split(mplayer.getP("cddbtracks")[ct], Chr(8), "", False)[0]
  Return "0"
End


Public Sub FillPropertiesGrid()
  Dim i As Integer
  Dim cTime As Integer = 0
  Dim audio_codec As String = ""
  
  If Not mplayer.ProcessRunningOvr() Then Return
  
  For i = 0 To PropertiesGrid.Rows.count - 1
    PropertiesGrid[i, 1].Text = ""
  Next 'i
  
  PropertiesGrid[0, 1].text = mplayer.getP("fullpath")
  PropertiesGrid[1, 1].text = File.Name(mplayer.getP("fullpath"))

  PropertiesGrid[2, 1].text = mplayer.getP("size")
  PropertiesGrid[3, 1].text = mplayer.getP("length")
  PropertiesGrid[4, 1].text = mplayer.getP("file-format")

  PropertiesGrid[12, 1].text = mplayer.getP("=audio-channels")
  PropertiesGrid[13, 1].text = mplayer.getP("=audio-samplerate")
  PropertiesGrid[14, 1].text = mplayer.getP("audio-codec")
  Try PropertiesGrid[15, 1].text = (CInt(mplayer.getP("=audio-bitrate")) Div 1000) & "Kbps"
  
  If Not mplayer.getP("audioonly") Then
    PropertiesGrid[16, 1].text = mplayer.getP("width") & "x" & mplayer.getP("height")
    PropertiesGrid[17, 1].text = mplayer.getP("fps")
    PropertiesGrid[18, 1].text = mplayer.getP("video-codec")
    Try PropertiesGrid[19, 1].text = (CInt(mplayer.getP("=video-bitrate")) Div 1000) & "Kbps"
  Else

      PropertiesGrid[5, 1].text = mplayer.getP("Album")
      PropertiesGrid[6, 1].text = OneOf(mplayer.getP("artist"), mplayer.getP("author"))
      PropertiesGrid[7, 1].text = OneOf(mplayer.getP("title"), mplayer.getP("name"))
      PropertiesGrid[8, 1].text = OneOf(mplayer.getP("year"), mplayer.getP("creationdate"))
      PropertiesGrid[9, 1].text = mplayer.getP("genre")
      PropertiesGrid[10, 1].text = mplayer.getP("trackno")
      PropertiesGrid[11, 1].text = OneOf(mplayer.getP("Comment"), mplayer.getP("Comments"))

  Endif
  Try cTime = CInt(Split(mplayer.getP("=length"), ".", "", True)[0])
  Try PropertiesGrid[20, 1].text = CStr((CInt(mplayer.getP("size")) * 8) Div cTime)
  If PropertiesGrid[20, 1].text = 0 Then 
    Try PropertiesGrid[20, 1].text = ">=" & CStr((CInt(mplayer.getP("=audio-bitrate")) Div 1000) + (CInt(mplayer.getP("=video-bitrate")) Div 1000)) 
  Endif
  PropertiesGrid[20, 1].text &= "Kbps"
  
  
  PropertiesGrid.Columns[1].Width = "-1"      'Autosize Columns
  
  'init pretty panel too
  If GeneralOptions.CoverCHK2.value Then
    audioform.label12.text = PropertiesGrid[6, 1].text
    audioform.label13.text = PropertiesGrid[5, 1].text
    audioform.label14.text = PropertiesGrid[8, 1].text
    audioform.label15.text = PropertiesGrid[7, 1].text
    audioform.label16.text = PropertiesGrid[11, 1].text
    audioform.label18.text = PropertiesGrid[1, 1].text
    audioform.label19.text = PropertiesGrid[3, 1].text
    If Trim(PropertiesGrid[2, 1].text) <> "" Then 
      audioform.label20.text = PropertiesGrid[2, 1].text & "KB"
    Else
      audioform.label20.text = ("Unknown")
    Endif
    Try audio_codec = Split(Trim(PropertiesGrid[14, 1].text), " ", "", True)[0]
    If audio_codec <> "" Then audioform.label21.text = audio_codec
    If (Trim(PropertiesGrid[15, 1].text) <> "") Then audioform.label21.text = audioform.label21.text & "@" & PropertiesGrid[15, 1].text
    If (Trim(PropertiesGrid[12, 1].text) <> "") Then audioform.label21.text = audioform.label21.text & ", " & PropertiesGrid[12, 1].text & (" channels")
    If (Trim(PropertiesGrid[13, 1].text) <> "") Then audioform.label21.text = audioform.label21.text & "@" & PropertiesGrid[13, 1].text & "Hz"
  Endif
  
  If (global.IsAudioFile(mplayer.getP("fullpath"))) Or (global.IsNetworkURI(mplayer.getP("fullpath"))) Or (Lower(mplayer.getP("fullpath")) Like "cdd?://*") Then
    AutoresizeAudioForm()
  Endif

End

Public Sub Form_Close()
  Dim MySettings As New SettingsClass
  Dim t0 As Float = Timer()

  Try Shell "rm -R " & global.ConfPath & "/" & "thumbcontainer.* &>/dev/null"
  StartClass.ProcessSignals(False)
  If buttoncapture.value Then StopDumping(generaloptions.dvbfinaldir.text)
  
  Try Unlock hLock
  Repeat
    FMain.Mysocket.Close
  Until FMain.Mysocket.status = Net.inactive
  Debug "closed socket"
  Debug
  
  Try HotKeys.xbindkeys.kill
  
  ChooseAspect.visible = False
  'it is needed for lockfile and local socket to be correctly freed:
  Try trayicon1.Delete
  Closing = True
  
  If Not (fastquit Or global.pluginmode) Then
    fmain.SaveFormGeometry()
    Me.hide
    If mplayer.ProcessRunningOvr() Then
      If Not (global.IsNetworkURI(mplayer.getP("fullpath"))) Then
        AddHistory(mplayer.getP("fullpath"), mplayer.CurrentTime()) 
      Endif
    Endif
  Endif
  ButtonStop_Click() 'don't remove me.
  
  Try AFiltersCfg.hide
  Try AddUriForm.hide
  Try AskName.hide
  Try AudioForm.hide
  Try NewChains.hide
  Try ChooseAspect.hide
  Try CountDown.hide
  Try CoverManager.hide
  Try DVBTuner.hide
  Try FMain.hide
  Try OpenSubtitesForm.hide
  Try GeneralOptions.hide
  Try HotKeyGrab.hide
  Try HotKeys.hide
  Try LogWindow.hide
  Try MyAskName.hide
  Try MyQuestion.hide
  Try OverlayTrayTip.hide
  Try ProfileManager.hide
  Try Searchfields.hide
  Try ServiceForm.hide
  Try SubAndOsd.hide
  Try TextDialog.hide
  Try TranslationNeeded.hide
  Try VFiltersCfg.hide
  Try VideoEqualizer.hide
  ' Try XConfigureAudioDriver.hide
  ' Try XConfigureVideoDriver.hide
  Try Xt7Egg.hide
  Try zzzFake.hide
  Try realtimeform.hide
  Try EpgForm.hide
  'Try ButtonMenu.hide
  Try ladspahelper.hide
  Try FormLyrics.hide
  Try AudioConvert.hide
  Debug "hidden all forms"
  Debug
  
  Try timerpluginmode.stop
  
  If ChooseAspect.visible Then ChooseAspect.CancelBtn_Click
  
  'delete temporary covers on exit:
  Try Shell "rm -R " & global.confpath & "/covertmp/* >/dev/null 2>&1" Wait
  'delete temporary screenshots on exit (if any)
  Try Shell "rm -R " & global.confpath & "/.xt7-screenshots/* >/dev/null 2>&1" Wait
  
  If (fsform.FullScreen = True) Then FullScreenSwitch()
  'OneSecTimer.Stop
  If mplayer.ProcessRunningOvr() Then
    mplayer.do_stop()
    ExecutePostCmd()
  Endif
  Debug "post command executed"
  Debug
  MyLibrary.MplayerTag.do_stop()
  MyPlaylist.MplayerTag.do_stop()
  Debug "mplayer stopped"
  Debug
  Try HotKeys.xbindkeys.kill
  Print "xbindkeys killed"

  If Not fastquit Then
    
    If GeneralOptions.SaveOnExitCHK.value = True Then
      Try Global.SaveAllSettings(global.CurrentProfile)
      If Error Then 
        Debug "couldn't save all settings at exit as requested..."
        Debug
      Else
        Debug "All settings saved"
        Debug
      Endif
    Else
      global.SaveMandatorySettings(global.CurrentProfile)
    Endif
  Endif

  If Not (fastquit Or global.pluginmode) Then
    MySettings.WriteLastProfile(Global.confpath, global.CurrentProfile)
    Debug "wrote last profile"
    Debug
  Endif
  
  'stop any epg scanning instance
  epgform.StopScan()
  
  'kill all recordings processes
  Try MyFlash.StopAllRecordings()
  
  'this allow to close the Fake form.
  'Try Application.MainWindow.Close 'crashes!
  fmain.close
  zzzFake.Close
  
  Try AFiltersCfg.close
  Try AddUriForm.close
  Try AskName.close
  Try AudioForm.close
  Try NewChains.close
  Try ChooseAspect.close
  Try CountDown.close
  Try CoverManager.close
  Try DVBTuner.close
  Try FMain.close
  Try GeneralOptions.close
  Try OpenSubtitesForm.close
  Try HotKeyGrab.close
  Try HotKeys.close
  Try LogWindow.close
  Try MyAskName.close
  Try MyQuestion.close
  Try OverlayTrayTip.close
  Try ProfileManager.close
  Try Searchfields.close
  Try ServiceForm.close
  Try SubAndOsd.close
  Try TextDialog.close
  Try TranslationNeeded.close
  Try VFiltersCfg.close
  Try VideoEqualizer.close
  ' Try XConfigureAudioDriver.close
  ' Try XConfigureVideoDriver.close
  Try Xt7Egg.close
  Try realtimeform.close
  Try DBus.Session.Unregister(mpris)
  Try epgform.close
 'Try ButtonMenu.close
  Try fsform.close
  Try ladspahelper.close
  Try FormLyrics.close
  Try AudioConvert.close 
  
  Debug "time to close = " & CStr(Timer() - t0)
  Print "Bye"
  Wait 0.5
  Quit
End

Public ForcedZoomRT As String = "" 'leave "NOBARS" "HALFBARS" or empty

Public Sub OLD_CorrectAreaAspect()
  'this sets the draweing area of the form to the aspect of the video
  Dim VideoW As Integer = 4
  Dim VideoH As Integer = 3
  Dim Aspect As Float = 1.333
  Dim TmpX, TmpY, TmpW, TmpH As Integer
  
  If Not mplayer.ProcessRunningOvr() Then Return
  If fmain.closing Then Return
  If global.IsImgFile(mplayer.getP("fullpath")) Then mplayer.do_seek(0)

  Try VideoW = mplayer.getP("video-params/dw")
  Try VideoH = mplayer.getP("video-params/dh")
  If (VideoW > 0) And (VideoH > 0) Then
    If ForcedAspectRT = "default" Then
      Aspect = VideoW / VideoH
    Else
      Try Aspect = CFloat(ForcedAspectRT)
    Endif
    
    'Drawing area must fit in the outerbox, so try to set the width and calculate the Height:
    TmpW = OuterBox.Width '* ResizeFactor
    TmpH = OuterBox.Width / Aspect '* ResizeFactor
    
    'Disable caching for high pan-scan as it slows down
    If ((TmpW > OuterBox.Width) Or (TmpH > OuterBox.Height)) Then
      TmpH = (OuterBox.Height) '* ResizeFactor
      TmpW = (OuterBox.Height * Aspect) '* ResizeFactor
    Endif

    'apply the zoom factor:
    Select Case ForcedZoomRT
      Case "NOBARS"
        ResizeFactor = aspect / (outerbox.w / outerbox.h)
        If ResizeFactor < 1 Then resizefactor = 1 / ResizeFactor
      Case "HALFBARS"
        ResizeFactor = 1 + (((aspect / (outerbox.w / outerbox.h)) - 1) / 2)
        If ResizeFactor < 1 Then resizefactor = 1 / ResizeFactor
    End Select
    Object.Lock(realtimeform.PanscanSlider)
    realtimeform.PanscanSlider.value = resizefactor * 10000
    Object.unLock(realtimeform.PanscanSlider)
    TmpW = TmpW * resizefactor
    TmpH = TmpH * resizefactor
    
    'finally, resize and center VideoBox in Outerbox 
    TmpX = (OuterBox.Width / 2) - (TmpW / 2)
    TmpY = (OuterBox.Height / 2) - (TmpH / 2)

    If (tmpw > 64) Then VideoBox.Move(TmpX, TmpY, TmpW + 1, TmpH + 1) 'don't touch (tmpw>64) or else heavy swap will occour!
  Endif
  
End

Public Sub CorrectAreaAspect()
  'this sets the draweing area of the form to the aspect of the video
  Dim dW As Integer = 4
  Dim dH As Integer = 3
  Dim AR As Float = 1.333
  Dim NoBarResize As Float
  Dim TmpX, TmpY, TmpW, TmpH As Integer

  If Not mplayer.ProcessRunningOvr() Then Return

  If fmain.closing Then Return
  If global.IsImgFile(mplayer.getP("fullpath")) Then mplayer.do_seek(0)
  
  Try dW = mplayer.getP("video-params/dw")
  Try dH = mplayer.getP("video-params/dh")
  AR = dW / dH

  NoBarResize = (videobox.h / (VideoBox.w / AR)) - 1

  'apply the zoom factor:
  Select Case ForcedZoomRT
    Case "NOBARS"
      ResizeFactor = NoBarResize
    Case "HALFBARS"
      ResizeFactor = NoBarResize / 2
  End Select
  Object.Lock(realtimeform.PanscanSlider)
  realtimeform.PanscanSlider.value = resizefactor * 10000
  Object.unLock(realtimeform.PanscanSlider)

  VideoBox.move(0, 0, outerbox.w, outerbox.h)
  mplayer.set_property_mpv("video-zoom", Replace(CStr(resizefactor), ",", "."))

End

Public Sub SaveFormGeometry()
  
  Dim PrevScreenX As Integer = fmain.screenx
  Dim PrevScreeny As Integer = fmain.screeny
  Dim deltax As Integer
  Dim deltay As Integer
  
  If (GeneralOptions.SaveGeometryCHK.value = True) Then
    If (GeneralOptions.SaveGeometryCompizCHK.value = True) Then
      fmain.Move(fmain.screenx, fmain.screeny)
      fmain.refresh
      Wait 0.03
      deltax = (fmain.screenx - prevscreenx) * 2
      deltay = (fmain.screeny - prevscreeny) * 2
      SubSaveFormGeometry(- deltax, - deltay)
    Else
      SubSaveFormGeometry(fmain.x - fmain.screenx, fmain.y - fmain.screeny)
    Endif
  Endif

End

Public Sub SubSaveFormGeometry(offsetx As Integer, offsety As Integer)
  
  Dim myfile As File
  Dim myfilename As String = global.confpath & "/" & "fmain.geometry"
  Dim maximized As String
  
  If fmain.maximized Then 
    maximized = "T"
  Else
    maximized = "F"
  Endif

  
  myfile = Open myfilename For Write Create
  Print #myfile, CStr(fmain.screenx + offsetx) & ";" & CStr(fmain.screeny + offsety) & ";" & fmain.w & ";" & fmain.h & ";" & Maximized & ";"
  Close #myfile

End

Public Sub LoadFormGeometry()
  
  Dim myfile As File
  Dim myfilename As String = global.confpath & "/" & "fmain.geometry"
  Dim geometry As String
  Dim rx, ry, rw, rh As Integer
  
  If Exist(myfilename) Then
    myfile = Open myfilename For Read
    Try Line Input #myfile, geometry
    If Not Error Then
      Try rx = Split(geometry, ";", "", True)[0]
      Try ry = Split(geometry, ";", "", True)[1]
      Try rw = Split(geometry, ";", "", True)[2]
      Try rh = Split(geometry, ";", "", True)[3]
      Try fmain.maximized = (Split(geometry, ";", "", True)[4] = "T")
      fmain.Move(rx, ry, rw, rh)
    Endif
    Close #myfile
  Endif
  fmain.refresh

End

Public Sub Form_Resize()
  Dim menuheight As Integer = 0
  
  If fmain.Menus.Visible Then menuheight = fmain.Font.textheight("Ij") + 4
  If mplayer.ProcessRunningOvr() Then UpdateStatusBar(CUSTOMTITLE_OLD, CTIME_OLD, CACHEVALUE_OLD)
  
  If fmain.h < controlframe.h + Maintoolbar.h + statusbar1.h + menuheight Then fmain.h = controlframe.h + Maintoolbar.h + statusbar1.h + menuheight
  If fmain.w < 500 Then fmain.w = 500
  
  CostrainFormSizes()
  CorrectAreaAspect()
  Try fmain.Picture = fmain.Picture.Image.Stretch(fmain.w, fmain.h).picture
  HSplit1_Resize()
End

Public Sub ButtonOpen_Click()
  If Not fullyloaded Then Return
  With Global
    If MyDialog.path = "" Then myDialog.Path = .StartFolder
    myDialog.filter = [.videofilter, .videofiltername, .audiofilter, .audiofiltername]
  End With
  If myDialog.OpenFile() Then Return
  Media_Next_path = DConv(myDialog.Path)
  TogglePls.value = False
  Play(mplayer.getP("fullpath"))
  
End

Private prevmpoutput As String = "__________"
Private repeatedmpoutlines As Integer = 0

Public Sub mplayeroutputavailable(outline As String)
  
  If (Trim(outline) <> "") Then
    If mplayer.gotheaders Then
      If Not (outline Like "*A:*") Then
        If Not (outline Like "*V:*") Then
          LogWindow.LogArea.pos = Len(LogWindow.LogArea.text) 'go to the end
          
          If Trim(outline) = prevmpoutput Then          'we get a dupe message,
            Try repeatedmpoutlines = repeatedmpoutlines + 1
          Else
            repeatedmpoutlines = 0
          Endif
          If repeatedmpoutlines > 30 Then
            If (repeatedmpoutlines Mod 5) = 0 Then
              LogWindow.LogArea.Insert("R ") 'write "."
              LogWindow.Label2.visible = True
            Endif
          Else
            'put something on the log, but skip program_id lines (from dvb-t)
            If Not (outline Like "*PROGRAM_ID=*") Then LogWindow.LogArea.Insert(outline & "\n")
            prevmpoutput = Trim(outline)
          Endif
        Endif
      Endif
    Endif
  Endif
  
End

Public Sub GridRefreshWorkaround(librarygrid As Gridview)
  'seems something has a bug here and scrollbars didn't show up at first.
  librarygrid.Rows.h = librarygrid.Rows.h
  Object.SetProperty(librarygrid.parent, "Padding", Object.GetProperty(librarygrid.parent, "Padding") + 1)
  Object.SetProperty(librarygrid.parent, "Padding", Object.GetProperty(librarygrid.parent, "Padding") - 1)
End

Public Sub ButtonStop_Click()
  UserStopped = True
  InitABLoop()
  Stopmthumbler()
  previousfile_cover = ""
  videobox.cached = False
  zzzfake.PanelNowNext.visible = False
  If buttoncapture.value Then StopDumping(generaloptions.dvbfinaldir.text)
  buttoncapture.enabled = False
  buttoncapture.visible = buttoncapture.enabled
  ABLoopButton.visible = False
  ArrangeCpl()
  Try LibraryGrid.Columns[0].Refresh
  myopensubs.clear 'needed to avoid hammering opensubtitles.org
  mplayer.do_stop
  VideoBox.Refresh
  ShowAudioPanel(False)

  aspectmenu.visible = False
  videobox.clear
  Try ClearStreamsMenu()
  Try epgform.dvbsnoop.Stopit()
  ButtonNowNext.Hide()
  ArrangeCpl()
  'UpdateSeekSlider() 'fixmempv cambiati header
  'SeekBar_Change() 'fixmempv cambiati header
End

Public Sub Buttonfwd_Click()

  mplayer.do_ffwd()

End

Public Sub ButtonRew_Click()

  mplayer.do_slow

End


Public Sub ButtonPlay_Click()
  If mplayer.ProcessRunningOvr() Then
    If mplayer.Paused() Then
      'OneSecTimer.start
      ButtonPlay.picture = Picture["media-playback-pause.png"]
      mplayer.do_leave_pause()
    Else
      mplayer.do_pause()
      ButtonPlay.picture = Picture["media-playback-start.png"]
    Endif
  Else
    Play(Media_Next_path)
  Endif
  VideoBox.setfocus
  If TabSelectedYoutube() Then Try customtitle = youtubetree.Current.text
End


Public Sub ClearStreamsMenu()
  
  Dim child As Menu
  
  Repeat
    'clear all previous sub-menus
    For Each child In Streamsaudiomenu.Children
      child.delete
    Next 'child
  Until (Streamsaudiomenu.Children.count = 0)
  Repeat
    For Each child In Streamssubtitlesmenu.Children
      child.delete
    Next 'child
  Until (Streamsaudiomenu.Children.count = 0) And (Streamssubtitlesmenu.Children.count = 0)
  
End

Public Sub ClearMenu(target As Menu)

  Dim child As Menu
  Repeat
    For Each child In target.Children
      child.delete
    Next 'child
  Until target.children.count = 0

End

Public Sub ClearChaptersAndTitlesMenu()
  Dim child As Menu
  Repeat
    'clear all previous sub-menus
    For Each child In MenuTitles.Children
      child.delete
    Next 'child
  Until (Menutitles.Children.count = 0) 'AND (Streamssubtitlesmenu.Children.count = 0)
End

Private menuopensubsearchbyhash As Menu
Private fakemenu As Menu

Public Function FillStreamsMenu()
  
  Dim i As Integer
  Dim AudioMenu, SubMenu As Menu
  Dim menuopensubtitles As Menu
  
  Dim menuopensubsearchmanual As Menu
  Dim menuopensubconfigurelanguages As Menu
  'read audiotracks and subtitletracks from mplayer class
  'and compile streams menu accordingly
  Streamsmenu.Enabled = ((mplayer.getP("audiotracks").count > 0) Or (mplayer.getP("subtitletracks").count > 0))
  If Streamsmenu.enabled Then
    Streamsaudiomenu.Enabled = (mplayer.getP("audiotracks").count > 0)
  Endif
  ClearStreamsMenu()
  
  'fill audio streams menu
  If Streamsaudiomenu.enabled Then
    For i = 0 To mplayer.getP("audiotracks").count - 1
      AudioMenu = New Menu(Streamsaudiomenu) As "Menuswitchaudio"
      AudioMenu.name = "AudioMenuID" & i
      AudioMenu.caption = mplayer.getP("audiotracks")[i]
    Next 'i
  Endif
  'fill sub streams menu

  'add a menu item to disable subtitles:
  SubMenu = New Menu(Streamssubtitlesmenu) As "Menuswitchsub"
  SubMenu.name = "DisableSubs"
  SubMenu.caption = ("Don't display subtitles")
  If mplayer.getP("subtitletracks").count > 0 Then
    For i = 0 To mplayer.getP("subtitletracks").count - 1
      SubMenu = New Menu(Streamssubtitlesmenu) As "Menuswitchsub"
      SubMenu.name = "SubMenuID" & i
      SubMenu.caption = mplayer.getP("subtitletracks")[i]
    Next 'i
  Endif
  
  SubMenu = New Menu(Streamssubtitlesmenu) As "MenuLoadSubtitle"
  SubMenu.name = "Streamssubtitlesmenu"
  SubMenu.caption = ("Load from disk...")
  submenu.Picture = picture["icon:/medium/insert-text"]
  
  'opensubtitles.org:
  menuopensubtitles = New Menu(Streamssubtitlesmenu) As "menuopensubtitles"
  menuopensubtitles.caption = ("Ask Opensubtitles.org")
  menuopensubtitles.picture = picture["opensubtitles.png"]
  menuopensubconfigurelanguages = New Menu(menuopensubtitles) As "menuopensubconfigurelanguages"
  menuopensubconfigurelanguages.caption = (("Configure preferred languages"))
  menuopensubconfigurelanguages.picture = picture["icon:/16/options"]
  
  menuopensubsearchmanual = New Menu(menuopensubtitles) As "menuopensubsearchmanual"
  menuopensubsearchmanual.caption = (("Manual search"))
  menuopensubsearchmanual.picture = picture["icon:/16/find"]
  
  ' menuopensubsearchbyname = New Menu(menuopensubtitles) As "menuopensubsearchbyname"
  ' menuopensubsearchbyname.caption = (("By Name (guess):"))
  ' menuopensubsearchbyname.picture = picture["icon:/16/wizard"]
  ' 'FillOpensubtitleLanguages(menuopensubsearchbyname)
  
  menuopensubsearchbyhash = New Menu(menuopensubtitles) As "menuopensubsearchbyhash"
  menuopensubsearchbyhash.caption = (("I feel lucky"))
  menuopensubsearchbyhash.picture = picture["icon:/16/wizard"]
  ''L
  fakemenu = New Menu(menuopensubsearchbyhash)
  fakemenu.text = ("Please Wait...")
  fakemenu.picture = picture["icon:/16/clock"]
  fakemenu.enabled = False

End

Public Sub menuopensubconfigurelanguages_Click()

  If (Not global.initearlyformsdone) Then InitEarlyForms()
  GeneralOptions.show
  Try GeneralOptions.TabStrip1.index = Global.TabIndexByName(("Language"), GeneralOptions.TabStrip1)

End

Public Function menuopensubsearchmanual_Click()

  OpenSubtitesForm.Show()

End




Public Function dvd_device(fullpath As String) As String
  'dvd://24//path/to/dvd/device -> /path/to/dvd/device
  'dvd://dev/sr0  -> /dev/sr0
  'dvd://1 -> "/"
  'dvd:// -> "/"
  'dvd://menu//path/to/something -> "/path/to/something"
  Dim t As String
  Dim ret As String
  Stop
  Try t = Split(fullpath, "/", "", True)[1] ' dvd://24//path/to/dvd/device -> 24
                                            ' dvd:// -> ""
                                            ' dvd:///path/to/dvd/device -> path
  If IsInteger(t) Or (t = "menu") Then 
     ret = Replace(fullpath, "dvd://" & t, "")
       Else
     ret = Replace(fullpath, "dvd://", "")
   Endif
   If Left(ret, 1) <> "/" Then ret = "/" & ret
   Return ret
End



Public Function FillTitlesAndChaptersMenu() As Boolean
  Dim dtl, dcl, t, l, k, c, p, lk As String = ""
  Dim nt, ct, pt, n As Integer = 0
  Dim lengths As String[]
  Dim SubMenu As Menu 
  Dim ddevice As String
  
  ClearChaptersAndTitlesMenu()
  If Not mplayer.ProcessRunningOvr() Then Return False
  p = mplayer.get_property_mpv("path", True, 1000, True)
  If p = "" Then Return
  ddevice = "/" & dvd_device(p)
  ' Debug dvd_device("dvd://10/path/to/dvd/device")
  ' Debug dvd_device("dvd://10//path/to/dvd/device")
  ' Debug dvd_device("dvd:///path/to/dvd/device")
  ' Debug dvd_device("dvd://path/to/dvd/device")
  ' Debug dvd_device("dvd://")
  ' Debug dvd_device("dvd://1")
  ' Debug dvd_device("dvd://dev/sr0")

  dtl = mplayer.get_property_mpv("=disc_title_list", True, 1000)
  If dtl = "" Then
    Debug ("Could not get information about the dvd structure")
    Return
  Endif
  dtl = Replace(dtl, "[", "")
  dtl = Replace(dtl, "]", "")
  dtl = Replace(dtl, "},{", Chr(8))
  dtl = Replace(dtl, "{", "")
  dtl = Replace(dtl, "}", "")
  lengths = New String[]
  For Each t In Split(dtl, Chr(8), "", True)
    l = (Split((Split(t, ",")[1]), ":")[1]) 
    Wait 0.005
    l = mplayer.FormatTime(Split(l, ".")[0])
    lengths.Add(l)
    Wait 0.005
  Next
  Debug
  treeview1.Clear
  If lengths.count > 1 Then
    Menutitles.Enabled = True
    For ct = 0 To (lengths.count - 1)
      k = "dvd://" & CStr(ct) & ddevice
      c = ("Title ") & makeN(ct, 2) & " - " & "[" & lengths[ct] & "]"
      SubMenu = New Menu(Menutitles) As "MenuswitchTitle"
      SubMenu.name = k
      SubMenu.caption = c
      treeview1.Add(k, c, picture["icon:/16/directory"])
   Next 'title
   If Not (Lower(p) Like "dvd://menu*") Then
     Try treeview1.movefirst
     Try pt = CInt(mplayer.get_property_mpv("=disc_title"))
      For ct = 0 To pt - 1
        Try treeview1.MoveBelow()
      Next
      If Not Error Then 
        Try treeview1.Item.selected = True
        lk = treeview1.Item.Key
        'fill chapters
        dcl = mplayer.get_property_mpv("=chapter_list", True, 1000)
        dcl = Replace(dcl, "[", "")
        dcl = Replace(dcl, "]", "")
        dcl = Replace(dcl, "},{", Chr(8))
        dcl = Replace(dcl, "{", "")
        dcl = Replace(dcl, "}", "")
        For Each t In Split(dcl, Chr(8), "", True)
          l = (Split((Split(t, ",")[1]), ":")[1]) 
          Wait 0.005
          c = mplayer.FormatTime(Split(l, ".")[0])
          k = "chapter|" & pt & "|" & l
          treeview1.Add(k, c, Picture["icon:/16/play"], lk)
          Wait 0.005
        Next
        treeview1.MoveTo(lk)
        treeview1.item.Expanded = True
        treeview1.Item.EnsureVisible()
      Endif
     SetActivePlayQueue("dvd")
    Endif
   Endif
End


Public Function makeiso6392(langcode As String) As String
  'convert from 2 digits langcodes to 3digits langcodes

  Dim lang As String = ""
  For Each lang In generaloptions.SlangComboBox.List
    If (lang Like langcode & "*") Then
      lang = Split(lang, ",", "", True)[0]
      Break
    Endif
  Next
  If lang = "" Then 
    Return langcode
  Else
    Return lang
  Endif

End

Private OpenSubs As New OpenSubtitlesAPI

Private TimerMenuHashSearch As New Timer As "TimerMenuHashSearch"

Public Sub menuopensubsearchbyhash_Show()

  Dim currentmovie As String
  currentmovie = mplayer.getP("fullpath")
  If global.IsNetworkURI(currentmovie) Then Return
  
  If Not (global.IsVideoFile(currentmovie)) Then Return
  
  TimerMenuHashSearch.delay = 1
  TimerMenuHashSearch.start

End

Private myopensubs As New Collection[]

Public Sub TimerMenuHashSearch_timer()

  Dim token As String
  Dim mysub As Collection
  Dim menuitemopensubtitle As Menu
  Dim langcode As String
  Dim menuopensublang As Menu
  Dim preferredlangs As New String[]
  Dim moviehash As String
  Dim filesize As String
  Dim AllLangs As String
  Dim tmplang As String
  Dim currentmovie As String
  
  currentmovie = mplayer.getP("fullpath")
  
  If Not mplayer.ProcessRunningOvr() Then Return
  
  TimerMenuHashSearch.stop
  
  token = OpenSubs.TokenFromLogIn("", "", "en", OpenSubs.defaultagent)
  If token = -1 Then
    Debug "Sorry, couldn't take the token from opensubtitles.org"
    Debug
    fakemenu.text = ("Token error")
    fakemenu.picture = stock["16/error"]
    Return
  Endif
  
  If myopensubs.count = 0 Then
    moviehash = OpenSubs.MovieHash(currentmovie)
    If moviehash = -1 Then
      Debug "Sorry, couldn't calculate the moviehash"
      Debug
      fakemenu.text = ("Hash error")
      fakemenu.picture = stock["16/error"]
      Return
    Endif
  Endif
  
  For Each langcode In Split(generaloptions.SubLangList.text, ",")
    If (Len(langcode) <> 3) Then langcode = makeiso6392(langcode)
    If preferredlangs.Find(langcode) = -1 Then
      preferredlangs.Add(langcode)
      AllLangs &= langcode & ","
    Endif
  Next
  AllLangs = Left(allLangs, Len(alllangs) - 1)
  
  If myopensubs.count = 0 Then  
    Try filesize = Stat(currentmovie).size
    If Error Then
      Debug "Sorry, couldn't calculate file size"
      Debug
      fakemenu.text = ("File error")
      fakemenu.picture = stock["16/error"]
      Return
    Endif
  Endif
  
  If myopensubs.count = 0 Then 
    myopensubs = OpenSubs.SearchByHash(token, AllLangs, moviehash, filesize)
    If myopensubs.count = 0 Then
      Debug "Sorry, no hash results from opensubtitles.org"
      Debug
      fakemenu.text = ("No results")
      fakemenu.picture = stock["16/error"]
      Return
    Endif
  Endif
  
  ClearMenu(menuopensubsearchbyhash)
  For Each langcode In preferredlangs
    menuopensublang = New Menu(menuopensubsearchbyhash) As "menuopensublang"
    menuopensublang.text = langcode
    menuopensublang.picture = picture["icon:/16/language"]
    For Each mysub In myopensubs
      tmplang = "Napoletano!"
      Try tmplang = mysub["SubLanguageID"]
      If tmplang = langcode Then
        menuitemopensubtitle = New Menu(menuopensublang) As "menuitemopensubtitle"
        menuitemopensubtitle.text = mysub["SubFileName"]
        menuitemopensubtitle.tag = mysub["SubDownloadLink"]
      Endif
    Next
  Next

End

Public Sub menuitemopensubtitle_Click()

  Dim suburl As String = Last.tag
  Dim subname As String = Last.text
  Dim subfile As String = Temp() & "." & subname
  Dim fileout As String

  If OpenSubs.savesub(suburl, subfile) Then
    sub_add(DConv(subfile))  'add the subtitle and append it to mplayer.subtitletracks
    Dialog.filter = ["*." & file.Ext(subname), "Subtitle file"]
    Dialog.Title = ("Save the selected subtitle")
    Dialog.Path = File.Dir(fmain.mplayer.getP("fullpath")) & "/" & subname
    If MyQuestion.Ask(("Do you want to save") & " " & subname & "?", "Save", "Don't Save") = 1 Then
      Dialog.SaveFile()
      fileout = Dialog.path 
      If Not (OpenSubs.savesub(suburl, fileout)) Then Message.Error(("Sorry, couldn't save the file"), "Ok")
    Endif
  Endif

End

Public Sub TreeView1_Activate()
  Dim k, title, stime As String
  k = treeview1.Item.key
  If k Like "chapter*" Then 
    If Not mplayer.ProcessRunningOvr() Then Return
    If Not (mplayer.getP("fullpath") Like "dvd://*") Then Return
    'title = Split(k, "|", "")[1]
    Try stime = Split(k, "|", "")[2]
    If Not Error Then mplayer.do_seek_to(stime, True)
      Else
    Play(k)
    fmain.VideoBox.setfocus
    SetActivePlayQueue("dvd")
  Endif
End



' Public Sub OLD_TreeView1_Activate()
'   
'   Dim CurTitle, NextTitle, NextChapter, NextAngle As Integer
'   Dim MyKey, tmp As String
'   Stop
'   tmp = ""
'   
'   CurTitle = 0
'   NextTitle = 0
'   'CurChapter = 0 non calcolabile
'   NextChapter = 0
'   'CurAngle = 0 non calcolabile
'   NextAngle = 0
'   
'   MyKey = treeview1.Item.key
'   
'   Try CurTitle = mplayer.FindTagValue("ID_DVD_CURRENT_TITLE")
'   'find next title:
'   NextTitle = Replace(Split(mykey, "_", "", True)[0], "Title", "")
'   If Not (mykey Like "*Chapters*") Then
'     If mykey Like "*Chapter*" Then NextChapter = Replace(Split(mykey, "_", "", True)[1], "Chapter", "")
'   Endif
'   If Not (mykey Like "*Angles*") Then
'     If mykey Like "*Angle*" Then NextAngle = Replace(Split(mykey, "_", "", True)[1], "Angle", "")
'   Endif
'   
'   Debug "CurTitle= " & Curtitle
'   Debug "NextTitle= " & NextTitle
'   Debug "NextChapter= " & NextChapter
'   Debug "NextAngle= " & NextAngle
'   Debug
'   'SWITCH_ANGLE (di slave mode) non funziona come dovrebbe, (bug mplayer)quindi al cambio di angolo, 
'   'occorre riavviare il player.
'   
'   If NextAngle <> 0 Then tmp = " -dvdangle " & NextAngle
'   If NextChapter <> 0 Then tmp = tmp & " -chapter " & nextchapter
'   
'   If mplayer.ProcessRunningOvr() Then
'     If (CurTitle <> NextTitle) Then
'       Play("dvd://" & NextTitle, tmp)
'       fmain.VideoBox.setfocus
'     Else 'il titolo non varia
'       If NextAngle <> 0 Then
'         mplayer.do_restart(mplayer.getP("fullpath"), mplayer.CurrentOptions & tmp)
'         fmain.VideoBox.setfocus
'       Else If NextChapter <> 0 Then
'         mplayer.Send("seek_chapter " & NextChapter & " 1")
'       Endif
'     Endif
'   Else 'not processrunningovr
'     Play("dvd://" & NextTitle, tmp)
'     fmain.VideoBox.setfocus
'   Endif
'   
' End

Public Sub TreeView1_KeyPress()
  
  If (Key.code = Key.Return) Or (Key.code = Key.Enter) Then
    TreeView1_Activate()
  Endif
  
End

Public Sub MenuswitchTitle_click()
  If mplayer.do_stop() Then
    Play(Last.name)
  Endif
End

Public Sub MenuswitchChapter_click()
  
  Dim ChapterToPlay As Integer
  Dim Title, chapter As Menu
  
  Try ChaptertoPlay = Split(Last.caption, " ")[0]
  'clear any checked chapter:
  For Each title In Menutitles.children
    If (title.Children.count > 0) Then
      For Each chapter In title.Children
        chapter.Checked = False
      Next 'chapter
    Endif
  Next 'title
  
  'Check the selected chapter
  Last.checked = True
  If Not Error Then
    mplayer.Send("seek_chapter " & ChapterToPlay & " 1")
  Endif
  
End


Public LASTAUDIOID As Integer = -1
'fixmempv is this necessary?  :
'we have to know if the audio has been switched because this crashes mplayer:
'play rai1, switch audio to eng, play rai2 via dvb_set_channel and you get no audio at all, try to choose the audio -> mplayer crash.
'i suspect that when you play rai2 mplayer tries to find the previous audio_id into the new channel.
'anyway, when audioswitched is true, dvb_set_channel may not be used, instead a stop and a play shoild be issued to change channel, sorry.
Public Sub Menuswitchaudio_click()
  Dim brother As Menu
  Dim ID As Integer
  For Each brother In Streamsaudiomenu.Children
    brother.checked = False
  Next
  Last.checked = True
  Try ID = Split(Last.caption, " ")[0] 
  If Not Error Then 
    mplayer.set_property_mpv("aid", id)
    mplayer.ShowText("Audio: " & Last.caption)
    LASTAUDIOID = ID
  Endif

End

Public Sub PowerffBTN_click()
  
  Shutdownmenu.Popup
  
End

Public nosub As Boolean = False


Public Sub Menuswitchsub_click()
  Dim brother As Menu
  Dim sid As String '(primo valore con uno spazio splittalo
  For Each brother In Streamssubtitlesmenu.Children
    brother.checked = False
  Next
  Last.checked = True
  If Last.caption = ("Don't display subtitles") Then
    mplayer.set_property_mpv("sid", "no")
    mplayer.ShowText(("Subtitles disabled"))
      Else
    sid = Split(Last.caption, " ", "", True)[0]
    mplayer.set_property_mpv("sid", sid)
    mplayer.ShowText(("Subtitle") & ": " & Last.caption)
  Endif
End


Private DbusAlreadyRegistered As Boolean = False

Public Sub ExportDbusProperties()

  If Not DbusAlreadyRegistered Then
    Try DBus.Name = "org.mpris.MediaPlayer2.xt7"
    If Error Then 
      Debug "Error setting up dbus"
      Debug
      Return
    Endif
    Try DBus.Session.Register(mpris, "/org/mpris/MediaPlayer2", ["org.mpris.MediaPlayer2", "org.mpris.MediaPlayer2.Player", "org.mpris.MediaPlayer2.TrackList", "org.mpris.MediaPlayer2.Playlists", "org.freedesktop.Dbus.Properties", "org.freedesktop.Dbus.Introspectable"])
    If Error Then 
      Debug "Error setting up dbus"
      Debug
      Return
    Endif
  Endif
  DbusAlreadyRegistered = True
  ' DbusProperties.clear()
  ' DbusProperties.FullPath = mplayer.Media_FullPath
  ' DbusProperties.FullPathPlaying = mplayer.Media_FullPath_Playing
  ' DbusProperties.Length = mplayer.Media_Length
  ' DbusProperties.Size = mplayer.Media_Size
  ' DbusProperties.Type = mplayer.Media_Type
  ' DbusProperties.AudioCodec = mplayer.Media_AudioCodec
  ' DbusProperties.AudioBitrate = mplayer.Media_AudioBitrate
  ' DbusProperties.AudioRate = mplayer.Media_AudioRate
  ' DbusProperties.Channels = mplayer.Media_Channels
  ' DbusProperties.VideoCodec = mplayer.Media_VideoCodec
  ' DbusProperties.VideoBitrate = mplayer.Media_VideoBitrate
  ' DbusProperties.VideoFps = mplayer.Media_VideoFps
  ' DbusProperties.Width = mplayer.Media_Width
  ' DbusProperties.Height = mplayer.Media_Height
  ' DbusProperties.VideoOutWidth = mplayer.VideoOut_Width
  ' DbusProperties.VideoOutHeight = mplayer.VideoOut_Height
  ' DbusProperties.Author = mplayer.Media_Author
  ' DbusProperties.Artist = mplayer.Media_Artist
  ' DbusProperties.Genre = mplayer.Media_Genre
  ' DbusProperties.Album = mplayer.Media_Album
  ' DbusProperties.TrackNo = mplayer.Media_TrackNo
  ' DbusProperties.Title = mplayer.Media_Title
  ' DbusProperties.Name = mplayer.Media_Name
  ' DbusProperties.Comment = mplayer.Media_Comment
  ' DbusProperties.Comment = mplayer.Media_Comments
  ' DbusProperties.MyYear = mplayer.Media_Year
  ' DbusProperties.CreationDate = mplayer.Media_CreationDate 

End

Public Function VmetersOptionsAndInitIfNeeded(filename As String) As String

  If GeneralOptions.ShowVmeterCHK.value Then
    If Not (global.IsVideoFile(filename)) Then
      exportfile = exportfilespath & Int(Rnd(1, 9999))
      'Return " -af-add export=" & exportfile & ":" & GeneralOptions.RmsSizeSpinBox.value
      Return exportfile & ":" & GeneralOptions.RmsSizeSpinBox.value
      audioform.BarBox.visible = True
    Else
      audioform.BarBox.visible = False
    Endif
  Else
    audioform.BarBox.visible = False
  Endif

End

Public needytcookie As Boolean = False

Private dumpfile As String

Public Function Initialvolume() As String
  'initialvolume
  If lastvolume = -2 Then lastvolume = (SaveVolumeSlider.value * 4)
  If lastvolume = 0 Then lastvolume = 1 'softvol has problems with volume=0 '
  Return lastvolume 
End





Public Sub static_options() As Collection
  'Basic and static optionsm they are always the same
  Dim opts As New Collection
  opts["config"] = "no"
  'opts["config-dir"] = global.confpath & "/mpv_config" 'not needed since we won't load an mpv_profile anymore
  opts["input-conf"] = "/tmp/FakeInput.conf"
  opts["load-scripts"] = "no"
  opts["osc"] = "no"
  opts["dvbin-file"] = User.home & "/.config/mpv/channels.conf.ter"
  opts["wid"] = videobox.handle
  opts["cursor-autohide"] = "no"
  opts["cursor-autohide-fs-only"] = "no"
  Return opts
End

Public Sub user_options() As Collection
  'user options configured through gui
  Dim opts As New Collection
  Dim opt As Mpvoption
  Dim name, data As String
  
  'initialize uninitialized forms and load settings
  generaloptions.FirstLoadIfNeeded()
  SubAndOsd.FirstLoadIfNeeded()

  'if exists a set of cached options for the current profile
  ' And we haven't initializaed newchains yet, use the cache:
  If global.exist_cached_options(global.CurrentProfile) And (Not NewChains.initdone) Then 
    Debug "Found cached options, using it"
    opts = global.get_cached_options(global.currentprofile)
      Else
    'parse the chain if we have not a cache
    NewChains.FirstLoadIfNeeded()
    opts["vo"] = NewChains.parse_drivers(False) 'XConfigureVideoDriver.ParsedVideoDriver()
    opts["ao"] = NewChains.parse_drivers(True) 'XConfigureAudioDriver.ParsedAudioDriver()

    opts["vf-add"] = NewChains.parse_filters(False)
    opts["af-add"] = NewChains.parse_filters(True)
  Endif
  
  For Each opt In generaloptions.Parse()
    If opt.data = "" Then opt.data = Chr(8)
    While opts.Exist(opt.name)
      opt.name = " " & opt.name 'to have multiple options with the same name
    Wend
    opts[opt.name] = opt.data
  Next

  For Each opt In SubAndOsd.ParseSubGui()
    opts[opt.name] = opt.data
  Next

  opt.data = GeneralOptions.AudioLangList.text
  If Trim(opt.data) <> "" Then opts["alang"] = opt.data
  
  opt.data = GeneralOptions.SubLangList.text
  If Trim(opt.data) <> "" Then opts["slang"] = opt.data
  
  Return opts
End


Public Sub file_options(fullpath As String) As Collection
  'options specific to file/protocols that cannot be cached
  Dim opts As New Collection
  Dim opt As Mpvoption
  Dim ytformats As String = ""
  Dim yt3d As Boolean = False

  If Youtube.IsYoutubeLink(fullpath) Then
    yt3d = generaloptions.Get3dYT.Value
    ytformats = Youtube.get_formats(Left(generaloptions.Youtubeformat.text, -1), generaloptions.Get3dYT.Value)
    opts["ytdl-format"] = ytformats
      Else
    opts["ytdl"] = "no"
  Endif

  Select Case Lower(fullpath)
    Case Like "dvb://*"
      'maybe a bug somewhere in mpv, but without this, cache seek wont work for dvb.
      opts["hr-seek"] = "yes"
    Case Like "dvd://menu*"
      'for dvd menus, we rely entirely on mpv input until we found a better way to interact with it
      discbox1.visible = True
      discbox2.visible = True
      discbox3.visible = True
      opts["input-cursor"] = "yes"
      opts["input-vo-keyboard"] = "yes"
    Case Else
      discbox1.visible = False
      discbox2.visible = False
      discbox3.visible = False
      opts["input-cursor"] = "no"
      opts["input-vo-keyboard"] = "no"
  End Select

  generaloptions.FirstLoadIfNeeded()
  If GeneralOptions.ShowVmeterCHK.value Then
    exportfile = VmetersOptionsAndInitIfNeeded(fullpath)
    If exportfile <> "" Then opts["af-pre"] = "export=" & exportfile
  Endif

  For Each opt In SetRightCache(fullpath)
    opts[opt.name] = opt.data
  Next 'opt 
 
  Return opts

End

Public Function Play(fullpath As String, Optional OtherOptions As String, Optional theradiolabel As String = "") As Boolean 
  Dim MkvSubsWorkaround As Boolean
  Dim cookieopts As String = ""
  'Dim cachingbox As MovieBox 'show an animation while caching...

  Dim doanalyze As Boolean = False
  Dim timeA As Float = 0
  Dim n As Integer
  Dim exportfile As String
  Dim opt As Mpvoption
  Dim opts As New Collection
  Dim data As String
  
  Object.Attach(mplayer, Me, "mplayer")
  InitABLoop()
  DOHACKIMAGE = True
  UserStopped = False
  CACHEVALUE_OLD = ""
  CTIME_OLD = "0"
  CUSTOMTITLE_OLD = ""
  
  Wait
  Stopmthumbler()
  'OneSecTimer.Stop()
  
  needytcookie = False
  ButtonNowNext.visible = Lower(fullpath) Like "dvb://*"
  ArrangeCpl()
 
  'generaloptions.Init() it seems not needed.
  generaloptions.FirstLoadIfNeeded() 'we need the temporary directory to store captured streams
  dumpfile = generaloptions.dvbtmpdir.text & "/" & "xt7.dumpfile.ts"
  
  myopensubs.clear 
  If fullpath = "" Then 
    Debug "Nothing to play :/"
    Debug
    Return
  Endif
  LASTAUDIOID = -1
  global.ResetApplyBtnColor()

  
  ' TooMuchCache = False
  alreadypaused = True
  'LogWindow.clearlogs()

  'avoid a graphical glitch when hitting stop after a song and then play again
  'it will be turned on at the end of this play function
  videobox.visible = False
  Wait
  videobox.cached = False  'here we have a segfault with gambas 2.99.7, seems to be solved by changing visibility twice
  Wait
  videobox.visible = True
  
  'http://bugzilla.mplayerhq.hu/show_bug.cgi?id=1870
  If SubAndOsd.MkvWorkaroundCHK.value Then 'fixmempv per ora non fa nulla, dove lo mettiamo?
    If Not global.IsNetworkURI(fullpath) Then
      MkvSubsWorkaround = True 
    Endif
  Endif
  
  SubNotSet = True

  'fixmempv 
  'mplayer.subfile = ""
  Shell DConv(GeneralOptions.NoParsePreCommand.text) Wait
  ' Seekbar.tag = "timer"
  ' VideoBox.Visible = False


  firstplay = False

  Try Last.mouse = Mouse.wait
  ButtonPlay.enabled = False

  ' fixmempv  
  ' If global.IsCdaudio(fullpath) Then
  '   GeneralOptions.FillCdAndDvdDevices()
  ' Endif

  ForcedAspectRT = "default"
  ResizeFactor = 0
  'LogWindow.streamtextbox.text = fullpath

  'fixmempv doanalyze = Not (global.IsNetworkURI(mplayer.Media_FullPath)) And (VideoEqualizer.CheckDynamicOverbright.value)
  PrevValuecTime = 999999
  
  mplayer.watched_properties = ["pause", "volume", "=chapter", "=time-pos", "length", "=length", "percent-pos", "cache", "media-title"]

  mplayer.clear_options() 
  
  opts = static_options()
  For Each data In opts
    mplayer.set_option(opts.key, data)
  Next
  
  opts = file_options(fullpath)
  For Each data In opts
    mplayer.set_option(opts.key, data)
  Next  
  opts = user_options()
  For Each data In opts
    mplayer.set_option(opts.key, data)
  Next  

  mplayer.set_option("volume", Initialvolume())

  If Lower(fullpath) = "dvd://" Then fullpath = "dvd:///" & generaloptions.DVDDeviceText.text
  If Lower(fullpath) = "cdda://" Then fullpath = "cdda:///" & generaloptions.CDDADeviceText.text

  n = 0
  Repeat  'first try to play with generated options, then try to force with ytdl
    'If mplayer.do_play(mplayer.Media_FullPath, mplayer.currentoptions, False, MkvSubsWorkaround, cookieopts, dumpfile, doanalyze) Then
    If Not mplayer.do_play(fullpath) Then Return
    ButtonPlay.picture = Picture["media-playback-pause.png"]
    CorrectAreaAspect() 'fixmempv: lo chiamo subito dopo il play... e funziona anche senza informazioni di larghezza e altezza con mpv !?
                        '...ho scritto fixmempv perchè lo chiamo poi due volte, anche sotto.
    VideoBox.Visible = True
    ' ' ' zzzfake.cachingbox.Hide
    ' ' ' zzzfake.cachingbox.playing = False
    Wait
    timeA = Timer()
    mplayer.get_mediainfo(generaloptions.CDDBCheckbox.value)
    Debug "mplayer.get_mediainfo()", Timer() - timeA
    If Not mplayer.ProcessRunningOvr() Then 
      If mplayer.return_value <> 0 Then 'try to use youtube-dl 
        mplayer.set_option("ytdl", "yes")
      Endif
      n = n + 1
    Endif
  'repeat at most 2 times, only if mplayer crashed,if it is not a youtube link (managed),only on network stream
  Until (n = 2) Or (mplayer.return_value = 0) Or Youtube.IsYoutubeLink(fullpath) Or Not (global.IsNetworkURI(fullpath))

  'mplayer.StartOverbrightAnalyze() 'fixmempv

  HotKeys.FirstLoadIfNeeded()
  VideoEqualizer.FirstLoadIfNeeded()
  'fimempv qui l'equalizzatore video deve vedere cosa fare (overbright dinamico oppure applicare i valori)


  If (mplayer.getP("audioonly")) Then
    'If (Not audioformshown) Then
    If (audioform.AudioPanel.parent <> outerbox) Then
      If (Not tageditmode) Then
        ShowAudioPanel(True)
      Endif
    Endif
      Else
    CorrectAreaAspect() 
    ShowAudioPanel(False)
  Endif
  
    ' If Not (mplayer.getP("audioonly")) Then
    '   ShowAudioPanel(False)
    ' Endif
    ' fixmempv
    ' If doanalyze Then
    '   PrevValuecTime = 999999
    '   Object.Lock(VideoEqualizer)
    '   VideoEqualizer.Slider6.value = 0
    '   VideoEqualizer.Spinbox6.value = 0
    '   Object.unLock(VideoEqualizer)
    ' Endif

  aspectmenu.visible = Not (mplayer.getP("audioonly") Or fsform.FullScreen)

  If Not StatusLabelLeft.visible Then
    StatusLabelLeft.Show
    StatusLabelright.show
  Endif

  FillStreamsMenu()

  If (Lower(Fullpath) Like "dvd://*") Then
    IsDVD = True
    Try FillTitlesAndChaptersMenu()
    SetDvdTabVisibility(True)
  Else
    LastDvdID = ""
    SetDvdTabVisibility(False)
    IsDvd = False
    MenuTitles.Enabled = False
  Endif

  CoverManager.HitCancel = True
  If GeneralOptions.CoverCHK2.value Then CoverRefresh()

  Try Last.mouse = Mouse.default
  ButtonPlay.enabled = True
  MenumediaExplorer.Enabled = True
  addhistory(FullPath)

  PlayStarted = True
  EndOfMediaReached = False
  VEqHasBeenSet = False


  audioform.Label11.visible = (Trim(theradiolabel) <> "")
  If Trim(theradiolabel) <> "" Then
    audioform.RadioLabel.text = theradiolabel
    audioform.RadioLabel.visible = True
    audioform.cutstrings()
  Else
    audioform.RadioLabel.visible = False
  Endif

  Wait 

  FillPropertiesGrid()  
 
  videobox.cached = True 

   If TabSelectedLibrary() Then 
    Try ComboHistory.AddHistory(Searchfield, (Searchfield.text))
  Else If TabSelectedPlaylist() Then
    Try ComboHistory.AddHistory(SearchfieldPLS, (SearchfieldPLS.text))
  Else If TabSelectedDVB() Then
    Try ComboHistory.AddHistory(SearchFieldDVB, (SearchfieldDVB.text))
  Endif

'fixmempv 

  Try buttoncapture.enabled = (Lower(mplayer.getP("file-format")) Like "mp*")  'all mpeg demuxed files (ts,ps..)
  Try buttoncapture.enabled = buttoncapture.enabled Or (mplayer.getP("fullpath") Like "*dvb*://*") 'all dvb channels
  Try buttoncapture.enabled = buttoncapture.enabled Or (mplayer.getP("fullpath") Like "*dvd*://*") 'all dvd
  buttoncapture.visible = buttoncapture.enabled

  ABLoopButton.visible = (mplayer.getP("partially-seekable") = "no")
  ArrangeCpl()
  If GeneralOptions.ToolTipsCHKDBUS.value Then Try ExportDbusProperties()

  global.ResetApplyBtnColor()

  Return True
End




Public Sub addhistory(fullpath As String, Optional Savetime As String = "0")

  Dim history, entry As String
  Dim historyarray As New String[]
  Dim sep As String = Chr(8)

  If Not (Exist(fullpath)) Then Return
  If Not global.IsNetworkURI(fullpath) Then
    If Not (Exist(global.historyfile)) Then file.Save(global.historyfile, "")
    Try history = file.Load(global.Historyfile) 
    If Error Then 
      Debug "Error: could not access " & global.historyfile & ""
      Debug
      Return
    Endif
    For Each entry In Split(history, "\n", "", True)
      If entry Like "*" & sep & "*" Then 
        If savetime = "0" Then Try entry = Split(entry, sep, "", True)[0]
      Endif
      If entry <> fullpath Then historyarray.Add(entry) 'no dupes and last on top
    Next
    If Savetime <> "0" Then 
      historyarray.Add(fullpath & sep & Savetime)
    Else
      historyarray.Add(fullpath)
    Endif
    If historyarray.count > Global.MaxHistory Then
      historyarray.Reverse
      historyarray.Resize(Global.MaxHistory)
      historyarray.Reverse
    Endif
    history = ""
    For Each entry In historyarray
      history = history & entry & "\n"
    Next
    file.Save(global.Historyfile, history)
  Endif
  If Not closing Then updaterecentfiles()

End

' Public Function SetRightCache() As String
'   'fixmempv anche per i dvd e dvdread, controlla bene
'   Dim cachesize As String = "NULL"
'   Dim mincache, seekcache As String
'   Dim sep As String = Chr(0)
'   
'   With GeneralOptions
'     If global.IsNetworkURI(mplayer.getP("fullpath")) Then
'       If .NetCacheCheckbox.value Then cachesize = .NetCacheSpinBox.value
'       If .NetminCacheCheckbox.value Then mincache = " --cache-initial " & Chr(0) & .cacheminspinbox.value
'       If .NetseekCacheCheckbox.value Then seekcache = " -cache-seek-min " & Chr(0) & .cacheseekspinbox.value
'       
'     Else If (mplayer.getP("fullpath") Like "dvb://*") Then
'       If .dvbtCacheCheckbox.value Then cachesize = .dvbtCacheSpinBox.value
'       If .dvbtminCacheCheckbox.value Then mincache = " --cache-initial " & Chr(0) & .dvbtcacheminspinbox.value
'       
'     Else If (mplayer.getP("fullpath") Like "dvd://*") Then
'       If .DvdCacheCheckbox.Value Then cachesize = .DVDCacheSpinBox.value
'       
'     Else If (mplayer.getP("fullpath") Like "dvdnav://*") Then
'       If .DvdCacheCheckbox.Value Then cachesize = "0" 'dvdnav wont work with a cache
'       
'     Else If global.IsCdaudio(mplayer.getP("fullpath")) Then
'       If .CDDACacheCheckbox.Value Then cachesize = .CDDACacheSpinBox.value & Chr(0) & " --cache-initial 0"
'       
'     Else
'       If .CacheCheckbox.value Then cachesize = .CacheSpinBox.value
'       If .CacheMinCheckbox.value Then mincache = " --cache-initial " & Chr(0) & .CacheMinSpinBoxFile.value
'       
'     Endif
'   End With
'   If cachesize = "0" Then
'     Return " --no-cache "
'   Else If cachesize <> "NULL" Then
'     Return " -cache " & cachesize & "\n" & mincache & "\n" & seekcache
'   Endif
' 
' End


Public Function SetRightCache(fullpath As String) As MpvOption[]
  'fixmempv anche per i dvd e dvdread, controlla bene
  Dim cache As String = "auto"
  Dim cache_initial As String = 0
  Dim cache_seek_min As String = 500
  
  Dim sep As String = Chr(0)
  
  Dim opt As MpvOption
  Dim opts As New MpvOption[]
  
  With GeneralOptions
    If global.IsNetworkURI(fullpath) Then
      If .NetCacheCheckbox.value Then cache = .NetCacheSpinBox.value
      If .NetminCacheCheckbox.value Then cache_initial = .cacheminspinbox.value
      If .NetseekCacheCheckbox.value Then cache_seek_min = .cacheseekspinbox.value
      
    Else If (fullpath Like "dvb://*") Then
      If .dvbtCacheCheckbox.value Then cache = .dvbtCacheSpinBox.value
      If .dvbtminCacheCheckbox.value Then cache_initial = .dvbtcacheminspinbox.value
      
    Else If (fullpath Like "dvdread://*") Or (fullpath Like "dvd://*") Then
      If .DvdCacheCheckbox.Value Then cache = .DVDCacheSpinBox.value
      
    Else If (fullpath Like "dvdnav://*") Or (fullpath Like "dvd://menu*") Then
      If .DvdCacheCheckbox.Value Then cache = "0" 'dvdnav wont work with a cache
      
    Else If global.IsCdaudio(fullpath) Then
      If .CDDACacheCheckbox.Value Then 
        cache = .CDDACacheSpinBox.value 
        cache_initial = "0"
      Endif
    Else
      If .CacheCheckbox.value Then cache = .CacheSpinBox.value
      If .CacheMinCheckbox.value Then cache_initial = .CacheMinSpinBoxFile.value
    Endif
  End With
  
  opt = New MpvOption
  opt.name = "cache"
  opt.data = cache
  opts.Add(opt)
 
  opt = New MpvOption
  opt.name = "cache-initial"
  opt.data = cache_initial
  opts.Add(opt)
 
  opt = New MpvOption
  opt.name = "cache-seek-min"
  opt.data = cache_seek_min
  opts.Add(opt)

  Return opts
End


Private PreviousCoverFile As String = "NOPE"

Public Sub CoverRefresh(Optional force As Boolean = False)
  
  Dim coverfile As String
  Dim tl As New Taglib
  Dim samecover As Boolean
  
  If mplayer.ProcessRunningOvr() And mplayer.getP("audioonly") Then
    'coverfile = global.confpath& "/covers/" & global.fixfilename(Upper(Trim(mplayer.Media_Artist))) & "^^^" & global.fixfilename(Upper(Trim(mplayer.Media_Album))) & ".jpg"
    If Upper(mplayer.getP("fullpath")) Like "*.FLAC" Then
      If (Trim(mplayer.getP("artist")) = "") And (Trim(mplayer.getP("album")) = "") Then
        tl.init(mplayer.getP("fullpath"))
        mplayer.setP("artist", tl.Artist)
        mplayer.setP("album", tl.Album)
        Try tl.tlfree
      Endif
    Endif
    
    CoverManager.MediaFileFullPath = mplayer.getP("fullpath")
    
    coverfile = CoverManager.Coverfile(mplayer.getP("artist"), mplayer.getP("album"), mplayer.getP("fullpath"))
    samecover = (coverfile = PreviousCoverFile)
    PreviousCoverFile = coverfile
    
    If Not (Exist(coverfile)) Then
      If Exist(Trim(coverfile)) Then coverfile = Trim(coverfile)
    Endif
    
    audioform.coverbox.refresh
    
    If (Not samecover) Or force Then 
      Try audioform.CoverBox.picture = covermanager.keepaspect(Image.Load(coverfile), 160)
      If Error Then Try audioform.CoverBox.picture = covermanager.keepaspect((image.Load(file.Dir(mplayer.getP("fullpath")) & "/" & covermanager.FolderPicture(file.Dir(mplayer.getP("fullpath"))))), 160)
      If Error Then audioform.CoverBox.picture = covermanager.DefaultLibraryIcon(mplayer.getP("fullpath"), 160)
    Endif
    ShowAudioPanel(True, Samecover)
  Endif
  audioform.coverbox.refresh
  'AlbumGridView.Current.Refresh()
  MyAlbumsLib.selectcell(AlbumGridView.Row, AlbumGridView.Column)

End

Private currentfile_cover As String = ""
Private previousfile_cover As String = ""
Public mymeters As Meters

Public Sub ShowAudioPanel(Show As Boolean, Optional samecover As Boolean = False)
  Dim vis As String = ""
  If Show And (Not TagEditMode) Then
    audioform.BarBox.visible = GeneralOptions.ShowVmeterCHK.value 
    previousfile_cover = currentfile_cover
    currentfile_cover = mplayer.getP("fullpath")
    If ((currentfile_cover <> previousfile_cover) Or (audioform.AudioPanel.Parent <> outerbox)) Then  'avoid showing twice
      'fmain.OuterBox.ignore = True
      fmain.OuterBox.Arrangement = Arrange.fill
      If Not samecover Then audioform.CoverBox.Resize(0, 0)
      If (audioform.AudioPanel.Parent <> outerbox) Then
        BottomVbox.hide
        Wait
        'audioform.AudioPanel.Reparent(Rightsidepanel)
        audioform.AudioPanel.Reparent(outerbox)
        BottomVbox.raise() ' Reparent(rightsidepanel)
        bottomvbox.show
        cachebar.Reparent(rightsidepanel)
        If fsform.visible Then 
          cachebar.Move(0, audioform.AudioPanel.h - cachebar.h, 0)
            Else
          cachebar.Move(0, audioform.AudioPanel.h + toolbarbackground.h - cachebar.h, 0)
        Endif
        'cachebar.raise
      Endif
    Endif
    If Not samecover Then
      audioform.coverbox.Refresh
      AudioForm.TimerZoomIn.start
      audioform.refresh
    Endif
    'OuterBox.visible = False 'OuterBox.Reparent(zzzfake)
    If GeneralOptions.ShowVmeterCHK.value = True Then
      Try mymeters.stopp
      mymeters = New Meters As "mymeters"
      Try vis = Split(generaloptions.NoParseVisType.text, " ")[0]
      mymeters.init(audioform.barbox, GeneralOptions.latencyspinbox.value, audioform.BarBox.h, fmain.exportfile, 6, GeneralOptions.fpsspinbox.value, vis)
      mymeters.startt
    Endif
  Else
    fmain.OuterBox.Arrangement = Arrange.none
    Try mymeters.stopp
    'If Not tageditmode Then rightsidepanel.Background = audioform.AudioPanel.Background
    fmain.OuterBox.ignore = False
    OuterBox.visible = True 'OuterBox.Reparent(Rightsidepanel)
    audioform.AudioPanel.Reparent(audioform)
    cachebar.Reparent(rightsidepanel)
    If fsform.visible Then 
      cachebar.Move(0, outerbox.h - cachebar.h, 0)
        Else
      cachebar.Move(0, outerbox.h - cachebar.h + toolbarbackground.h, 0)
    Endif
    audioform.refresh
  Endif
End

Public Sub SetCddaTabVisibility(visibility As Boolean)
  
  Dim i As Integer
  Dim WasVisible As Boolean
  'find dvd tab id:
  For i = 0 To Leftsidetabs.count - 1
    WasVisible = Leftsidetabs[i].Visible
    Leftsidetabs[i].Visible = True
    If TabSelectedCDDAAt(i) Then
      Leftsidetabs[i].Visible = visibility
      CddaTabId = i
      Break
    Endif
    Leftsidetabs[i].Visible = WasVisible
  Next 'i
  If visibility Then Leftsidetabs.index = CddaTabId
  
End

Public Sub SetDvdTabVisibility(visibility As Boolean)
  
  Dim i As Integer
  Dim WasVisible As Boolean
  'find dvd tab id:
  For i = 0 To Leftsidetabs.count - 1
    WasVisible = Leftsidetabs[i].Visible
    Leftsidetabs[i].Visible = True
    If TabSelectedDVDAt(i) Then
      Leftsidetabs[i].Visible = visibility
      DvdTabId = i
      Break
    Endif
    Leftsidetabs[i].Visible = WasVisible
  Next 'i
  If visibility Then Leftsidetabs.index = DvdTabId
  
End

Public Sub SetFLASHTabVisibility(visibility As Boolean)
  
  Dim i As Integer
  
  If FlashTabID = -1 Then
    For i = 0 To Leftsidetabs.count - 1
      If TabSelectedFlash() Then
        FlashTabId = i
        Break
      Endif
    Next 'i
  Endif
  If visibility Then Leftsidetabs.index = FlashTabId
  Leftsidetabs[FlashTabId].visible = visibility
  
End

Public Sub sub_add(subfile As String)
    mplayer.sub_add(subfile, True)
    mplayer.ShowText(("Subtitle") & ": " & File.Name(subfile))
    mplayer.FillMultitracks()
    FillStreamsMenu()
End



Public Sub VideoAreaGroup_Drop()
  
  Dim droppedfile As String

  Try droppedfile = Split(Drag.Paste("text/uri-list"), "\n\r", "", True)[0]
  If Error Then 
    Try droppedfile = Split(Drag.Paste("text/plain"), "\n\r", "", True)[0]
    If Error Then Return
  Endif
  droppedfile = DConv(Global.NoFileSuffix(Global.FormatDrag(droppedfile)))
  If Not ((droppedfile Like "*.iso") Or (droppedfile Like "*VIDEO_TS")) Then
    If mplayer.IsSubFile(droppedfile) Then
      sub_add(DConv(droppedfile))
    Else
      Media_Next_path = droppedfile
      Play(droppedfile)
    Endif
  Else
   
    Play("dvd:///" & droppedfile)
  Endif
  If TabSelectedLibrary() Then
    Try librarygrid.rows[librarygrid.row].Selected = False
    Try librarygrid.row = mylibrary.FindRowByPath(librarygrid, droppedfile)
    Try librarygrid.rows[librarygrid.row].Selected = True
  Else If TabSelectedPlaylist() Then 
    Try playlistgrid.rows[playlistgrid.row].Selected = False
    Try myplaylist.row = myplaylist.FindRowByPath(playlistgrid, droppedfile)
    Try playlistgrid.rows[playlistgrid.row].Selected = True
  Endif

End

Public Sub UpdateSeekSlider(Optional percent_pos As String = "-1")
  'Get the current playing time and update seek bar accordingly
  Dim totaltime, actualtime As Float
  
  If percent_pos = "-1" Then 
    Try percent_pos = mplayer.getP("percent-pos")
    If Error Then Return
  Endif
  
  
  If SeekingRestarting Then Return
  SeekBar.tag = "timer" 'this will avoid seekbar to send seek to mplayer
  Try totaltime = mplayer.getP("=length")
  'Try actualtime = mplayer.CurrentTime()
  Try actualtime = mplayer.CurrentTimeFloat()
  If actualtime <> 0 Then 
    Try SeekBar.value = (actualtime / totaltime)
      Else
    SeekBar.value = 0
  Endif
  'workaround a bug with mts files:
  'mplayer is unable to get id_length and reports always 0
  'while mplayer2 reports a wrong length
  If (totaltime = "0") Or (actualtime > totaltime) Then  
    Try Seekbar.value = percent_pos / 100
  Endif
  SeekBar.tag = "user"
  SetProgress(seekbar.value)
End

Public customtitle As String = ""


Private LASTVOLUME As String = -2 'remember the exit volume so that we can set it when opening new medias

Public Sub UpdateVolumeSlider(volume As String)
  Dim ctime As Float = 0
  Dim newvolume As Integer
  'If mplayer.getP("percent-pos") = "0" Then Return 'do not update volume if the media playback is not started.
  Try ctime = CFloat(mplayer.getP("=time-pos"))
  If ctime <= 0 Then Goto ReturnLabel
  
  Try SaveVolumeSlider.tag = "timer"          'this will avoid seekbar to send volume to mplayer

  Try newvolume = Split(volume, ",.", "", True)[0]
  If Error Then Goto ReturnLabel
  Try SaveVolumeSlider.Value = newvolume Div 4
  If Error Then Goto ReturnLabel
  
  LASTVOLUME = newvolume
  Debug newvolume
  ReturnLabel:
  Try SaveVolumeSlider.tag = "user"

End

Public Sub UpdateStreamsMenu()
  'read current subtitle and audio tracks and check the relevant item in the streams menu 

  Dim tmpsub, tmpaudio As String
  
  mplayer.Send("get_property sub")
  mplayer.Send("get_property switch_audio")
  tmpsub = mplayer.CurrentSubStream
  tmpaudio = mplayer.CurrentAudioStream
  Debug "tmpsub= " & tmpsub
  Debug "tmpaudio= " & tmpaudio
  Debug
  Repeat
  Until Streamsaudiomenu
  
End

Public Sub ExecutePostCmd()
  
  Shell DConv(GeneralOptions.NoParsePostCommand.text) Wait
  
End

Public subnotset As Boolean = True

Private alreadypaused As Boolean = False

Private PrevCache As String = ""

Private eiNow As Eventinfo
Private eiNext As EventInfo
Private PrevEiNow As EventInfo

Public Function UpdateNowNextInfo()

  Dim channel As String = Replace(Lower(mplayer.getP("fullpath")), "dvb://", "")
  PrevEiNow = einow
  zzzfake.VBox4.visible = False
  zzzfake.clocklabel.text = Make2(Hour(Now())) & ":" & Make2(Minute(Now())) & " - " & Date()
  zzzfake.LabelChannelName.text = Upper(channel)
  
  Try eiNow = epgform.dvbsnoop.WhatsNow(channel)
  If einow = Null Then Return
  If eiNow.event_name = "" Then 
    eiNow.event_name = ("Not available")
  Else
    zzzfake.LabelNowName.text = eiNow.event_name
  Endif
  
  Try einext = epgform.dvbsnoop.WhatsNext(channel)
  
  Try zzzfake.LabelNextStart.visible = (eiNext.Start_time_date <> "")
  zzzfake.VBox4.visible = zzzfake.LabelNextStart.visible
  
  If einext <> Null Then
    If eiNext.event_name = "" Then
      eiNext.event_name = ("Not available")
    Else
      zzzfake.LabelNextName.text = eiNext.event_name
      zzzfake.LabelNextStart.text = Make2(Hour(eiNext.Start_time_date)) & ":" & Make2(Minute(einext.Start_time_date))  
    Endif
  Endif
  
  If PrevEiNow <> einow Then 
    zzzfake.LabelNowInfo.text = ""
    zzzfake.LabelNextInfo.text = ""
    Try zzzfake.LabelNowInfo.text = einow.text_char
    Try zzzfake.LabelNextInfo.text = einext.text_char
    PanelNowNextArrange(zzzfake.LabelNowInfo.visible)
  Endif

End

Public Sub TimerUpdateNowNext_Timer()

  UpdateNowNextInfo()

End

Public Function Make2(n As String) As String

  Dim t, neg As String
  If n Like "-*" Then neg = "-"
  t = Abs(CInt(n))
  While Len(t) < 2
    t = "0" & t
  Wend
  Return neg & t

End

Private DOHACKIMAGE As Boolean = True


Public Sub UpdateStatusBar(customtitle As String, cTime As String, cachevalue As String)
  'Print the current filename and playing time on the status bar
  
  Dim RemainingTime, maxcachehuman, cache_size As String
  Dim PreText As String = ""
  Dim PostText As String
  Dim SmallWindow As Boolean = False
  Dim icy_title As String = ""
  'If Not mplayer.ProcessRunningOvr() Then Return 
  If customtitle = "" Then 
    pretext = file.BaseName(mplayer.getP("fullpath"))
      Else
    Pretext = customtitle
  Endif

  '------------------------------
  'Depending on the Choosed timeformat, draw the current time:
    If TimeFormat = 0 Then
      PostText = mplayer.FormatTime(cTime) & " / " & mplayer.FormatTime(mplayer.getP("=length"))
  Else If Timeformat = 1 Then
    RemainingTime = mplayer.getP("=length") - cTime
    PostText = "-" & mplayer.FormatTime(remainingtime) & " / " & mplayer.getP("length")
  Else If Timeformat = 2 Then
    PostText = cTime & " / " & mplayer.getP("=length")
  Else If Timeformat = 3 Then
    RemainingTime = mplayer.getP("=length") - cTime
    PostText = "-" & RemainingTime & " / " & mplayer.getP("=length")
  Endif

  
  smallwindow = (Statusbar1.Font.TextWidth(PreText & PostText) > Statusbar1.Width)
  pretext = Replace(pretext, "\n", " ")
  If SmallWindow Then
    pretext = Left$(pretext, CInt(((Statusbar1.Width) Div Statusbar1.font.TextWidth("_")) - Len(PostText)) / 1.) & "..."
  Endif
  'If Trim(pretext) <> "" Then
  'If mplayer.maxcache = "" Then Return

  fmain.caption = pretext
  If cachevalue <> "" Then
    Try cache_size = mplayer.getP("=cache-size")
    If cache_size = "(unavailable)" Then cache_size = "0"
    If cache_size = "" Then cache_size = mplayer.get_property_mpv("=cache-size")
    If cache_size = "(unavailable)" Then cache_size = "0"
    If cache_size = "" Then cache_size = "0"
    If CInt(cache_size) >= 1024 Then 
      Try maxcachehuman = Format$(((CFloat(cache_size) / 1024)), "##.#") & "MB"
    Else
      MaxCacheHuman = cache_size & "KB"
    Endif
    If maxcachehuman <> "0KB" Then 
      fmain.caption = fmain.caption & " [ cache: " & cachevalue & "%" & (" of: ") & MaxCacheHuman & " ]"
    Else
      fmain.caption = fmain.caption & " [ cache: " & cachevalue & "% (Auto) ]"
    Endif
    cachebar.w = (cachevalue / 100) * Rightsidepanel.w
    prevcache = cachevalue
  Endif
  
  StatusLabelLeft.text = " " & Pretext
  If (Not volumefocused) Then StatusLabelRight.text = Posttext & " "
  AudioForm.UpdateLength(PostText)
  If fsform.FullScreen Then statusbar1.w = statusbar1.Parent.w
End





Private CACHEVALUE_OLD As String 
Private CTIME_OLD As String = "0"
Private CUSTOMTITLE_OLD As String

Public Sub mplayer_property_change(name As String, data_old As String, data_new As String)
  'Debug name, data_old, data_new
  If Not mplayer.ProcessRunningOvr() Then Return
  
  Select Case name
  
    Case "pause"
      If data_new = "yes" Then
        ButtonPlay.picture = Picture["media-playback-start.png"]
        mplayer.event_loop.delay = 2000 'be light when we're on pause
          Else
        ButtonPlay.picture = Picture["media-playback-pause.png"]
        mplayer.event_loop.delay = 500 'be reactive
      Endif
  
    Case "=chapter"
      If global.IsCdaudio(mplayer.getP("fullpath")) Then
        Try cddagrid.row = CInt(data_new)
        CUSTOMTITLE_OLD = cdda_track_name(data_new)
        UpdateStatusBar(CUSTOMTITLE_OLD, CTIME_OLD, CACHEVALUE_OLD)
        propertiesGrid[7, 1].text = CUSTOMTITLE_OLD
        Audioform.label15.text = CUSTOMTITLE_OLD
        Audioform.label18.text = CUSTOMTITLE_OLD
        AutoresizeAudioForm()
      Endif
  
    Case "volume"
      UpdateVolumeSlider(data_new)
  
    Case "percent-pos"
      UpdateSeekSlider(data_new)
  
    Case "=time-pos"
      Try CTIME_OLD = Split(data_new, ".")[0]
      UpdateStatusBar(CUSTOMTITLE_OLD, CTIME_OLD, CACHEVALUE_OLD)
  
    Case "media-title"
      If global.IsCdaudio(mplayer.getP("fullpath")) Then Goto ReturnLabel 'cd title is treated differently
      Try CUSTOMTITLE_OLD = data_new
      UpdateStatusBar(CUSTOMTITLE_OLD, CTIME_OLD, CACHEVALUE_OLD)
  
    Case "cache"
      If data_new <> "(unavailable)" Then CACHEVALUE_OLD = data_new
      UpdateStatusBar(CUSTOMTITLE_OLD, CTIME_OLD, CACHEVALUE_OLD)
  
    Case Like "=length"
      UpdateStatusBar(CUSTOMTITLE_OLD, CTIME_OLD, CACHEVALUE_OLD)
  
    Case Like "length"
      UpdateStatusBar(CUSTOMTITLE_OLD, CTIME_OLD, CACHEVALUE_OLD)

  End Select

  Returnlabel:
  Return

End



Public Sub Mplayer_mykill(return_value As Integer)
  Dim playlistfinished As Boolean = False
  Fmain.caption = global.AppName
  Stopmthumbler()
  cachebar.w = 0
  ButtonPlay.picture = Picture["media-playback-start.png"]
  SubNotSet = True
  If (Not Userstopped) And (Shutdown = "MEDIA") Then CountDown.engage

  If buttoncapture.value Then StopDumping(generaloptions.dvbfinaldir.text) 'fixmempv dumping
  buttoncapture.enabled = False
  buttoncapture.visible = buttoncapture.enabled  
  ArrangeCpl()
  VEqHasBeenSet = False
  IsDvd = False
  customtitle = ""
  MenumediaExplorer.Enabled = False
  'hide the cover
   ' If GeneralOptions.CoverCHK2.value Then
   '   'ShowAudioPanel(False)
   '   Try mymeters.stopp
   ' Endif

  ExecutePostCmd()
  videobox.cached = False
  'delete export file
     Try Kill mplayer.exportfile 'fixmempv audio meters
      If TogglePls.value And (Not UserStopped) And (Not FirstPlay) And (Not (mplayer.getP("fullpath") Like "dvb://*")) Then
          Debug "end of media reached, playing next video..."
          Debug
          
          SelectNext(True, GetActivePlayQueue())
          PlaylistFinished = Not global.IsNextSelected
          If (Shutdown = "PLS") And PlaylistFinished And (Not ShufflePls.value) Then CountDown.engage
          Debug "Mplayer was off, so hit PLAY from here"
          Debug
          If Not (mplayer.ProcessRunningOvr()) Then
            Play(Media_Next_path)
              Else
            Debug "Not hitting PLay from here because ButtonNext did it first"
            Debug
          Endif
          
      Else
        Playstarted = False
        'UserStopped = False
        FirstPlay = False
        If ((Not TogglePls.value) And fsform.FullScreen) Then FullScreenSwitch()
      Endif

    StatusLabelLeft.text = (" Stopped")
    StatusLabelRight.text = ""
    
    SeekBar.value = 0
    SetProgress(seekbar.value)
    Fmain.caption = global.AppName

End

Private PrevValuecTime As Integer = 9999999 'so that the first value will be used
Public Sub Mplayer_AnalyzerNewValue(bAvg As Integer, delay As Float, Optional NewValuecTime As Integer)
  Dim bAvgAdapted As Integer
  If (NewValuecTime - PrevValuecTime >= 10) Then
    If ((NewValuecTime - PrevValuecTime) Mod 5 = 0) Then
      Debug "Skipping periodic keyframe, diff = " & (NewValuecTime - PrevValuecTime)
      PrevValuecTime = NewValuecTime
      Return
    Endif
  Endif
    
  PrevValuecTime = NewValuecTime
  Wait delay
  'Debug "waiting:", delay
  'bAvgAdapted = CInt(bAvg * (100 / 255)) 'es: 64 -> 25
  bAvgAdapted = CInt(bAvg * (100 / 255)) 'es: 64 -> 25
  bAvgAdapted = 100 - bAvgAdapted 'es: 25 -> 75
  bAvgAdapted = bAvgAdapted Div (11 - VideoEqualizer.Slider7.value) 'es 75 -> 7
  ' bAvgAdapted = bAvg + -17043521 'range 0 -> 17043520
  ' bAvgAdapted = CInt(bAvgAdapted * (100 / 17043520)) 'range 0 - > 100
  'Debug "bavg:", bavg, "Adapted:", bAvgAdapted
  'mplayer.ShowText(bavg)
  SlideTo(VideoEqualizer.Slider6, (bAvgAdapted))
End

Private Sub SlideTo(aSlider As Slider, aTarget As Integer)
  Dim prevosd As String = mplayer.osdlevel
  Dim wasdisabled As Boolean = True
  'Dim bdiff As Integer
  Dim aThreshold As Integer = 7 'do not move slider under this threshold. If you plan not to use threshold, dont change the code, but set it to 0.
  'Dim waittime As Float
  
  'If (fmain.mplayer.VideoOut_Driver = "vaapi") Then aThreshold = 2 'fixmempv
  VideoEqualizer.NoOsd = True
  If (mplayer.pausing Or mplayer.Paused()) Then Return
  mplayer.send("osd 0")
  If aSlider.enabled = False Then
    wasdisabled = True
    aSlider.Enabled = True
    Wait
  Endif
  If Abs(aSlider.value - aTarget) < aThreshold Then Goto lEnd
  'If bdiff = 0 Then Goto lEnd

  'waittime = 1 / bdiff - 0.06 
  'If waittime < 0 Then waittime = 0
  'If waittime > 0.06 Then waittime = 0.06
  'Debug waittime
  If aSlider.value < aTarget Then
    Repeat
      If (mplayer.pausing Or mplayer.Paused()) Then Return
      aSlider.value += 1 
      Wait 0.005
      'Wait waittime '0.01
    Until aSlider.value = aTarget
      Else
    Repeat
      If (mplayer.pausing Or mplayer.Paused()) Then Return
     aSlider.value -= 1 
      'Wait waittime
      Wait 0.005
    Until aSlider.value = aTarget
    If wasdisabled Then aSlider.Enabled = False
  Endif
  
  lEnd:
  VideoEqualizer.NoOsd = False
  If (mplayer.pausing Or mplayer.Paused()) Then Return
  mplayer.send("osd " & prevosd)
End


Private Sub UpdateVolumeTooltip()
  Dim tip As String
  Dim volume As Integer
  Dim overboost As String

  Try overboost = mplayer.get_option("softvol-max")
  If overboost = Null Then overboost = "100"
  If Not mplayer.ProcessRunningOvr() Then Return
  volume = CInt(SaveVolumeSlider.value * (overboost / SaveVolumeSlider.MaxValue))
  tip = "   Volume: " & CStr(volume) & "% "
  If volume > 100 Then 
    StatusLabelright.Foreground = color.red
  Else
    StatusLabelright.Foreground = color.white
  Endif
  StatusLabelright.text = tip
End

Public Sub ShowVolBtn_enter()
  VolumeFocused = True
  UpdateVolumeTooltip()
End

Public Sub ShowVolBtn_leave()
  VolumeFocused = False
End

Public Sub SaveVolumeSlider_enter()
  If Global.MouseInside(SaveVolumeSlider) Then
    VolumeFocused = True
    UpdateVolumeTooltip()
  Endif

End

Public Sub SaveVolumeSlider_leave()
  VolumeFocused = False
End

Public Sub SaveVolumeSlider_MouseUp()
  If Not (Global.MouseInside(SaveVolumeSlider) Or Global.MouseInside(ShowVolBtn)) Then 'check needed due to a gambas bug with gtk
    VolumeFocused = False
  Endif
End

Public Function makeN(number As String, digits As Integer) As String

  If Len(number) < digits Then
    Repeat
      number = "0" & number
    Until Len(number) = digits
  Endif
  Return number

End

Public Sub VersionCheck()

  Dim UserVersion, UserMajor, UserMinor, RequiredMajor, RequiredMinor, Userminiminor, requiredminiminor As String
  Dim Required As String = Global.requiredversion
  Dim cfruser, cfrrequired As Long
  
  UserVersion = System.fullversion
  
  'Shell "gbx3 -V" Wait To UserVersion
  
  RequiredMajor = makeN(Split(Required, ".")[0], 5)
  RequiredMinor = makeN(Split(Required, ".")[1], 5)
  RequiredMiniminor = makeN(Split(Required, ".")[2], 5)
  UserMajor = makeN(Split(UserVersion, ".")[0], 5)
  UserMinor = makeN(Split(UserVersion, ".")[1], 5)
  Userminiminor = makeN(Trim(Split(UserVersion, ".")[2]), 5)
  
  Try cfruser = UserMajor & UserMinor & Userminiminor
  If Error Then 
    Debug "Couldn't check required version"
    Return
  Endif
  Try cfrrequired = RequiredMajor & RequiredMinor & RequiredMiniminor
  If Error Then 
    Debug "Couldn't check required version"
    Return
  Endif
  If cfruser >= cfrrequired Then Return
  'else...
  MyQuestion.Ask(("WARNING\nYour Gambas version is ") & Trim(UserVersion) & ("\nbut xt7-player requires ") & global.RequiredVersion, ("Understood"), "")
  
End

Public Sub SaveVolumeSlider_Change()

  'OneSecTimer.delay = OneSecTimer.delay * 100
  If Not (SaveVolumeSlider.tag = "timer") Then
    mplayer.do_SetVolume(SaveVolumeSlider.value * (100 Div SaveVolumeSlider.MaxValue)) ' + 1) 'don't allow volume=0 as it has problems with softvol
    If VolumeFocused Then UpdateVolumeTooltip()
  Endif
  'OneSecTimer.delay = OneSecTimer.delay Div 100
  'Call GetProperty"volume" now, so onesectimer will found the answer

End

Public Sub OLD_SeekBar_Change()
  '"if" is needed, because seekbar position is changed by mplayer itself through sec_timer
  
  If Not (Seekbar.tag = "timer") Then
    'OneSecTimer.Enabled = False
    mplayer.do_seek(SeekBar.value Div 10)
    'OneSecTimer.Enabled = True
  Endif
  
End

Public SeekingRestarting As Boolean = False

Public Sub SeekOrSeekAndRestart(Action As String)
  'Restart the stream from a new position on youtube streams instead of seeking.
  
  Dim newpos As Integer
  
  'do as usual for non YT streams:
  
  If Not ((mplayer.getP("fullpath") Like "http://*.youtube.*/*") Or (mplayer.getP("fullpath") Like "https://*.youtube.*/*")) Then
    mplayer.Send(Action) 'WTH?
    Return
  Endif
  
  'or issue restarts to the current stream (youtube)
  needytcookie = True
  If SeekingRestarting Then Return
  'Do as usual on strange errors ?
  Try newpos = CInt(mplayer.CurrentTime()) + Split(Action, " ", "", True, False)[1]
  If Error Then mplayer.Send(Action) 'WTH?
  SeekingRestarting = True
  SeekRestart(newpos)
  SeekingRestarting = False
  
End

Public Sub SeekBar_Change()
  Dim percent As Integer
  Dim newpos As Integer
  If fmain.closing Then Return
  If Not (Seekbar.tag = "timer") Then
    'OneSecTimer.Enabled = False
    percent = SeekBar.value * 100

    'Restart the stream from a new position on youtube streams instead of seeking.
    If (generaloptions.DoSeekRestartBox.value = True) And (((mplayer.getP("fullpath") Like "http://*.youtube.*/*") Or (mplayer.getP("fullpath") Like "https://*.youtube.*/*"))) Then
      seekbar.enabled = False
      If SeekingRestarting Then Return
      fmain.mouse = mouse.wait
      Try newpos = CInt(mplayer.getP("length") / (100 / percent))
      If Error Then newpos = 0
      SeekingRestarting = True
      SeekRestart(newpos)
      fmain.mouse = mouse.normal
      SeekingRestarting = False
      seekbar.enabled = True
    Else
      mplayer.do_seek(percent)
    Endif
    'OneSecTimer.Enabled = True
  Endif
End

Public Sub SeekRestart(newpos As Integer)

  Dim cookieopts As String
  VEqHasBeenSet = False
  If mplayer.ProcessRunningOvr() Then
    ForcedAspectRT = "default"
    If (Trim(Youtube.Cookiesfile) <> "") Then cookieopts = "-cookies -cookies-file " & Youtube.Cookiesfile & " "
    mplayer.do_restart(mplayer.getP("fullpath"), GetOptionsFromGui() & SetRightCache() & VmetersOptionsAndInitIfNeeded() & " " & cookieopts, False, False, newpos)
    
    aspectmenu.visible = Not (mplayer.getP("audioonly") Or fsform.fullscreen)
    mplayer.Renice(GeneralOptions.NiceLevelSpinBox.value)
    CorrectAreaAspect
    ' LogWindow.clearlogs()
    ' LogWindow.ShowLogs()
  Endif


End


Public Sub GetOptionsFromGui()
  
  Debug "STUBSTUBSTUBSTUBSTUB"
  Debug "STUBSTUBSTUBSTUBSTUB"
  Debug "STUBSTUBSTUBSTUBSTUB"
  Debug "STUBSTUBSTUBSTUBSTUB"
  Debug "STUBSTUBSTUBSTUBSTUB"
  Debug "STUBSTUBSTUBSTUBSTUB"
  Debug "STUBSTUBSTUBSTUBSTUB"
  Debug "STUBSTUBSTUBSTUBSTUB"
  Debug "STUBSTUBSTUBSTUBSTUB"
  
End



Public Sub MenuOpen_Click()

  ButtonOpen_Click()

End

Public Sub MenuQuit_Click()

  FMain.Close

End

Public Sub MenuAbout_Click()

  MyQuestion.ask(Global.aboutmessage, ("GotIt!"), "")
  
End


Public Sub ShowVolBtn_Click()
  controlpanelright.autoresize = False
  controlpanelright.w = 120
  'SaveVolumeSlider.Visible = Not SaveVolumeSlider.Visible
  volumecontainer.Visible = Not volumecontainer.Visible
  volumecontainer.autoresize = Not volumecontainer.Visible
  controlpanelright.refresh()
  controlpanelright.autoresize = True
  CostrainFormSizes()
End

Public Sub ShowVolBtn_MouseWheel()
  If Mouse.delta > 0 Then
    SaveVolumeSlider.value = SaveVolumeSlider.value + 1
  Else
    SaveVolumeSlider.value = SaveVolumeSlider.value - 1
  Endif
End


Public Sub ProgressFrame_MouseUp()
  HideThumbler()
  If thumbleractive Then
    If Not Mouse.left Then Return
    If Not global.MouseInside(bottomvbox) Then Return
  Endif
  If (mplayer.getP("partially-seekable") = "yes") Then 
    CantSeekMessage()
    Return
  Endif
  'seekbar.value = mouse.x / seekbar.w
  seekbar.value = mouse.x / Last.w
  
  Debug "seeking"
  SeekBar_Change()
  SetProgress(seekbar.value)
End

Public Sub ProgressFrame_DblClick()
  If (mplayer.getP("partially-seekable") = "no") Then Return
  'seekbar.value = mouse.x / seekbar.w
  seekbar.value = mouse.x / Last.w
  SeekBar_Change()
  SetProgress(seekbar.value)
End


Public Sub VideoAreaGroup_MouseDrag()
  
  Dim NewX, NewY As Integer
  Dim isimgfile As Boolean = global.IsImgFile(mplayer.getP("fullpath")) 
  
  If (Not fsform.FullScreen) And (Not isimgfile) Then
    If SwitchingFullScreen Then Return
    If mouse.left Then
      GuiDragging = True
      fmain.Move(fmain.screenx + (mouse.x - mouse.StartX), fmain.screeny + (mouse.y - mouse.Starty))
    Endif
  Else
    If GeneralOptions.PanTagCHK.value Or isimgfile Then
      If isimgfile Then mplayer.do_seek(0)
      'Allow Dragging image if it is panned:
      If mouse.left And (ResizeFactor > 1) Then
        GuiDragging = True
        NewX = VideoBox.screenx + (mouse.x - mouse.StartX) - outerbox.screenx
        NewY = VideoBox.screeny + (mouse.y - mouse.Starty) - outerbox.screeny
        If (NewX < (Desktop.w Div 2)) And (NewY < (Desktop.h Div 2)) Then
          If (NewX + VideoBox.w) > (Desktop.w Div 2) And (Newy + VideoBox.h) > (Desktop.h Div 2) Then
            VideoBox.Move(NewX, NewY)
          Endif
        Endif
      Endif
    Endif
  Endif
  
End

Public Function DisableKDECompositing() As Boolean
  
  Dim wasactive As Boolean = False
  
  If DBus["org.kde.kwin"]["/KWin"].compositingActive() Then 
    
    wasactive = True
    Shell "dbus-send --type=method_call --dest=org.kde.kwin /KWin org.kde.KWin.toggleCompositing"
  Endif
  Return wasactive
  
End

Public Function EnableKDECompositing() As Boolean
  
  Dim wasinactive As Boolean = False
  
  If Not (DBus["org.kde.kwin"]["/KWin"].compositingActive()) Then 
    wasinactive = True
    Shell "dbus-send --type=method_call --dest=org.kde.kwin /KWin org.kde.KWin.toggleCompositing"
  Endif
  Return wasinactive
  
End

Private KdeEffectsWereActive As Boolean = False

Public Sub FsCommandsExec(Fullscreen As Boolean, fps As String)

  Dim fscommand As String = global.ConfPath & "/switch.fs.command.sh"
  Dim windowcommand As String = global.ConfPath & "/switch.win.command.sh"
  Dim WasPaused As Boolean = False
  Dim sw, sh, mx, my As Integer
  
  sw = Screen.w
  sh = Screen.h
  mx = mouse.Screenx
  my = mouse.screeny
  
  If fullscreen Then
    If Exist(fscommand) Then 
      Debug "Executing " & fscommand & " " & fps
      Debug
      If Not mplayer.Paused() Then 'pause the video before swhitching fullscreen
        mplayer.do_pause()
        WasPaused = False
      Else
        WasPaused = True
      Endif
      
      Shell ". " & fscommand & " " & fps Wait
      If Not WasPaused Then
        If mplayer.Paused() Then mplayer.do_leave_pause()
      Endif
    Else
      Debug "!!!"
      Debug ("Hint: create (and make executable) a script named") & " " & fscommand 
      Debug ("xt7 will execute it with and pass fps argument when switching to fullscreen")
      Debug ("Eg: xrandr --rate \"$1\" ")
      Debug "!!!"
      Debug
    Endif
    Goto ReturnLabel
  Endif
  
  'if windowed
  If Exist(windowcommand) Then
    Debug "Executing " & windowcommand 
    Debug
    If Not mplayer.Paused() Then 'pause the video before swhitching fullscreen
      mplayer.do_pause()
      WasPaused = False
    Else
      WasPaused = True
    Endif
    Shell ". " & windowcommand Wait
    If Not WasPaused Then
      If mplayer.Paused() Then mplayer.do_leave_pause()
    Endif
  Else
    Debug "!!!"
    Debug ("Hint: create (and make executable) a script named ") & " " & windowcommand
    Debug ("xt7 will execute it when switching from fullscreen to window mode")
    Debug "!!!"
    Debug
  Endif
  Goto ReturnLabel
  
ReturnLabel:
  If (sw + sh) <> (Screen.w + Screen.h) Then 'resolution is changed
    mouse.Move(CInt((mx * Screen.w)) / sw, CInt((my * Screen.h) / sh))
  Endif
  Return
  
End

Public Function Screenbypos(x As Integer, y As Integer) As Screen

  Dim s As Screen
  For Each s In Screens
    If (x >= s.x) And x <= (s.x + s.W) Then
      If (y >= s.y) And y <= (s.y + s.h) Then
        Return s
      Endif
    Endif
  Next
  
  'no screen found !? repeat with more tolerance:
  For Each s In Screens
    If (x + 50 >= s.x) And x <= (s.x + s.W + 50) Then
      If (y + 50 >= s.y) And y <= (s.y + s.h + 50) Then
        Return s
      Endif
    Endif
  Next

  'still no screen found? return the first.
  Debug "Couldn 't get the matching screen (!)"
  Return Screens[0]
  
End

Public Sub ArrangeBottmVbox()
  bottomvbox.ignore = True
  bottomvbox.x = 0
  bottomvbox.y = bottomvbox.Parent.h - bottomvbox.h
  bottomvbox.w = bottomvbox.Parent.W
  controlframe.ignore = True
  controlframe.x = 0
  controlframe.y = controlframe.Parent.h - controlframe.h
  controlframe.w = controlframe.Parent.w
End

Private Sub CostrainFormSizes()
  If (global.pluginmode) Then
    If Not fsform.fullscreen Then
      ArrangeBottmVbox()
    Endif
  Endif
  
  MainToolbar.width = FMain.clientw - 16
  If statusbar1.visible Then
    BottomVbox.h = controlframe.h + Statusbar1.h ' + cachebar.h 
  Else
    BottomVbox.h = controlframe.h '+ cachebar.h 
  Endif
  ' ControlPanel.left = (ControlFrame.width / 2) - (ControlPanel.width / 2)
  ControlPanel.x = controlframe.x + paddingovr 
  ControlPanel.w = controlframe.w - controlpanelright.w - (paddingovr * 2)
  controlpanelright.x = ControlPanel.x + ControlPanel.w
  picturebox1.Move(0, 0, controlframe.w, controlframe.h)
End

Public Sub FullScreenSwitch()
  SwitchingFullScreen = True
  If fsform.fullscreen Then
    SwitchToWindow()
    If global.IsImgFile(mplayer.getP("fullpath")) Then mplayer.do_seek(0)
    Wait 0.1
    If GeneralOptions.NoEffectsCheckbox.value Then
      If KdeEffectsWereActive Then EnableKDECompositing()
    Endif
  Else
    SwitchToFS()
    If global.IsImgFile(mplayer.getP("fullpath")) Then mplayer.do_seek(0)
    Wait 0.1
    'Disable kde effects?
      If GeneralOptions.NoEffectsCheckbox.value Then
        Try KdeEffectsWereActive = DisableKDECompositing()
        If Error Then
          Debug "Unable to disable kde effects, are you sure use kwin window manager?"
          KdeEffectsWereActive = False
        Endif
      Endif
  Endif
  ' ' ' zzzfake.cachingbox.x = (outerbox.w Div 2) - 33
  ' ' ' zzzfake.cachingbox.y = (outerbox.h Div 2) - 33
  SwitchingFullScreen = False
  UpdateStatusBar(CUSTOMTITLE_OLD, CTIME_OLD, CACHEVALUE_OLD)
  UpdateSeekSlider()

End



Private winmax As Boolean 

Public Sub SwitchToFS()
  'save the windowed information
  videobox.hide
  Wait 0.1
  OuterBox.Mouse = mouse.blank
  VideoBox.Mouse = mouse.blank
  Object.Lock(hsplit1)
  winmax = fmain.Maximized
  fmain.hide
  cachebar.hide
  If Not (Hsplit1.Layout[0] = 0) Then SplitterLayout = Hsplit1.Layout
  FsForm.Background = color.black
  FsForm.x = fmain.ScreenX
  FsForm.y = fmain.screeny
  FsForm.show
  
  FsForm.FullScreen = True
  Repeat
    Wait 0.05
  Until fsform.w >= Screenbypos(fmain.screenx, fmain.screeny).Width

  FsForm.Background = color.Default
  
  Maintoolbar.Reparent(FsForm)

  Wait
  'execute shell commands
  If mplayer.ProcessRunningOvr() And (Not mplayer.getP("audioonly")) Then FsCommandsExec(True, mplayer.getP("fps"))
  
  'invert the HSplit with a vSplit
  fmain.HSplit1.Reparent(zzzFake)
  zzzFake.VSplit1.Reparent(FsForm)
  
  'populate the New VSplit1 With controls
  Leftsidepanel.Reparent(zzzFake.vsplit1)
  rightsidepanel.Reparent(zzzFake.VSplit1)

  'restore the form position
  LeftsideWasVisible = LeftsidePanel.Visible 
  
  'hide the upper controls
  Leftsidepanel.hide()
  
  'let the bottom panel adapts to the new size:
  Wait '<-this wait has to come before ConstrainFormSizes()
  CostrainFormSizes()
  bottomvbox.Hide
  BottomVbox.Reparent(rightsidepanel)
  toolbarbackground.hide
  cachebar.raise
  Wait '<-this wait has to come just after ConstrainFormSizes()
  
  'start the timer 
  TimerFullScreen.start
  
  CorrectAreaAspect()
  
  RightSidePanel.SetFocus()
  Wait
  
  If zzzfake.PanelNowNext.visible Then 
    PanelNowNextArrange()
    Wait
  Endif
  
  'show all
  Object.unLock(hsplit1)
  
  If statusbar1.visible Then 
    statusbar1.ignore = True
    statusbar1.y = statusbar1.Parent.h - statusbar1.h
  Endif
  bottomvbox.ignore = True
  controlframe.ignore = True
  bottomvbox.w = Screenbypos(fmain.screenx, fmain.screeny).Width
  controlframe.w = bottomvbox.W
  Wait
  CostrainFormSizes()


  Wait 0.1
  videobox.Show

  'workaround for missing picture when switching 
  Wait 0.2
  Maintoolbar.hide
  CorrectAreaAspect()
End

Public Sub SwitchToWindow()
  
  bottomvbox.y = rightsidepanel.h - bottomvbox.h
  BottomVbox.ignore = False
  
  'execute shell commands
  FsCommandsExec(False, 60)
  
  Maintoolbar.Reparent(fmain)
  'invert the VSplit with a HSplit
  zzzFake.VSplit1.Reparent(zzzFake)
  Hsplit1.Reparent(Fmain)
  
  'populate HSplit with controls
  Leftsidepanel.Reparent(Hsplit1)
  rightsidepanel.Reparent(HSplit1)
  If (SplitterLayout <> Null) Then Hsplit1.Layout = SplitterLayout
  Wait
  
  'show the menu
  AllmenuVisible(True)
  If Not global.pluginmode Then toolbarbackground.show
  'restore the form position
  LeftsidePanel.Visible = LeftsideWasVisible
  
  UpdateStatusBar(CUSTOMTITLE_OLD, CTIME_OLD, CACHEVALUE_OLD)
  
  'show the bottom controls
  bottomvbox.Raise() '<-make sure it is on the bottom
  bottomvbox.show
  CostrainFormSizes()
  
  TimerFullScreen.Stop()
  
  If zzzfake.PanelNowNext.visible Then 
    PanelNowNextArrange()
    Wait
  Endif
  
  RightSidePanel.SetFocus()
  
  OuterBox.Mouse = mouse.Default
  VideoBox.Mouse = mouse.Default
  
  'make the form windowed
  fsform.Background = color.black
  Wait
  bottomvbox.ignore = False
  controlframe.ignore = False
  statusbar1.ignore = False
  CostrainFormSizes()
  If global.pluginmode Then bottomvbox.Hide
  FsForm.hide
  FsForm.FullScreen = False
  fmain.Maximized = winmax
  fmain.show  
  Maintoolbar.hide 'workaround for missing picture at fs switch
  Wait 0.2
  Maintoolbar.show
  cachebar.Reparent(rightsidepanel)
  cachebar.Move(0, outerbox.h - cachebar.h + toolbarbackground.h)
  cachebar.raise
  cachebar.show
End

Public Sub AllmenuVisible(AreVisible As Boolean)

  Menuplaylist.visible = AreVisible
  MenuMain.visible = AreVisible
  MenuState.visible = AreVisible
  MenuAbout.Visible = AreVisible
  MainToolBar.visible = AreVisible
  MenuConfigure.visible = AreVisible
  MenuLibrary.Visible = AreVisible
  AspectMenu.Visible = (AreVisible And (Not mplayer.getP("audioonly")))

End

' Private Sub MouseHide()
' 
'   If (Mouse.screenx & "." & Mouse.ScreenY = MousePos) Then
'     OuterBox.Mouse = mouse.blank
'     VideoBox.Mouse = mouse.blank
'   Else
'     OuterBox.Mouse = 0
'     VideoBox.Mouse = 0
'   Endif
'   
'   MousePos = Mouse.screenx & "." & Mouse.ScreenY
'   
' End


Public mousehider As New Timer As "mousehider"

Private Sub HideMouseDelayed()
  If Not (mousehider.Enabled) Then mousehider.start
End

Public Sub mousehider_Timer()
  OuterBox.Mouse = mouse.blank
  VideoBox.Mouse = mouse.blank
  mousehider.stop
End




Public Function MouseInsideFsFormByCoords() As Boolean
  'reports if the cursor is inside fsform by checking the coordinates
  
  If mouse.ScreenX >= fsform.screenx Then
    If mouse.ScreenX <= fsform.screenx + fsform.W Then
      If mouse.ScreenY >= fsform.ScreenY Then
        If mouse.ScreenY <= fsform.ScreenY + fsform.h Then
          Return True
        Endif
      Endif
    Endif
  Endif
  Return False

End



Public Sub TimerFullScreen_Timer()
  
  Dim BottomThreshold As Integer = 96
  Dim TopThreshold As Integer = 48
  Dim AttachZone1 As Boolean = (Mouse.screeny > fsform.screeny + Fsform.h - BottomThreshold) 'bottom
  Dim AttachZone2 As Boolean = (Mouse.screeny < TopThreshold) 'top
  Dim ReleaseZone1 As Boolean = (Mouse.screeny < ControlFrame.screeny - BottomThreshold) 'bottom vbox
  Dim ReleaseZone2 As Boolean = (Mouse.screeny > MainToolbar.Height + TopThreshold)  'top


  If Not MouseInsideFsFormByCoords() Then Return 'fixme alternativa più leggera?

  '     
  If AttachZone1 Then
    BottomVbox.ignore = True
    bottomvbox.y = rightsidepanel.h - bottomvbox.h
    Audioform.AudioPanel.ignore = True
    BottomVbox.visible = True
    cachebar.Move(0, bottomvbox.y - cachebar.h)
    cachebar.show
  Endif
  
  If AttachZone2 Then
    MainToolBar.visible = True
    If Not global.pluginmode Then toolbarbackground.show
    AllmenuVisible(True)
  Endif
  

  If ReleaseZone1 And Not (thumblebox.visible) Then
    BottomVbox.ignore = False
    BottomVbox.visible = False
    cachebar.hide
    Audioform.AudioPanel.ignore = False
    Wait
    If global.IsImgFile(mplayer.getP("fullpath")) Then mplayer.do_seek(0)
  Endif
  
  If ReleaseZone2 And (Not AttachZone1) And (MainToolBar.Visible) Then
    MainToolBar.Visible = False
    toolbarbackground.hide
    AllmenuVisible(False)
    If (Not BottomVbox.visible) Then CorrectAreaAspect
  Endif
  
End

Public Sub SwitchSidePanelBTN_Click()
  
  If Leftsidepanel.visible Then
    If Not fsform.FullScreen Then
      Hsplit1.tag = Hsplit1.layout
      Leftsidepanel.visible = False
      Hsplit1_MyRefresh() 'gb 3.4.0 bug
    Endif
    Leftsidepanel.visible = False
  Else
    Leftsidepanel.visible = True
    'Wait 1
    If Not fsform.FullScreen Then 
      Hsplit1_MyRefresh() 'gb 3.4.0 bug

      If hsplit1.tag = Null Then
        Leftsidepanel.w = 256
        'Wait 1
      Else
        Hsplit1.layout = Hsplit1.tag
        timerhideshowvideo.start 'gb 3.4.0 bug
      Endif 
    Endif
  Endif
  CorrectAreaAspect
  If (Not OuterBox.visible) Then OuterBox.visible = True
  
End

Public Sub LibraryGrid_Drop()
  
  Dim droppedfiles As String[]
  Dim DroppedFile, ext As String
  Dim dragdata As String
  
  Dim IsFile, IsURI, IsDirectory, IsPlayList As Boolean
  
  dragdata = Drag.Paste("text/uri-list")
  droppedfiles = Split(dragdata, "\n\r", "", True)
  Debug "Start at: " & Time
  Debug
  'prepare the progressbar
  MyLibraryProgressBar.visible = True
  MyLibraryProgressBar.h = 32
  Wait 0.1
  MyLibrary.FilesToProcess = Global.GetTotalFiles(dragdata, True)
  MyLibraryProgressBar.value = 0 '(it will be update by MyLibrary.add())
  
  MyLibrary.SyncSortedTable() '<-necessary for MyLibrary.isdupe() function
  For Each DroppedFile In Droppedfiles
    If Trim(DroppedFile) <> "" Then
      droppedfile = DConv(Global.NoFileSuffix(Global.FormatDrag(droppedfile)))
      ISFile = False
      IsDirectory = False
      IsUri = False
      Try ISFile = (Stat(droppedfile, True).type = gb.file)
      Try IsDirectory = (Stat(droppedfile, True).type = gb.Directory)
      ext = Upper(File.Ext(DroppedFile))
      Try IsPlaylist = ((ext = "M3U") Or (ext = "PLS") Or (ext = "XPL"))
      IsUri = (droppedfile Like "*://*")
      
      If IsPlayList And (Not isuri) Then 
        MyLibrary.LoadFile(droppedfile, LibraryGrid, True)
      Else If IsFile Then
        MyLibrary.AddFile(LibraryGrid, DroppedFile, False)
      Else If IsDirectory Then
        Try MyLibrary.AddDir(LibraryGrid, DroppedFile, GeneralOptions.NoParseExcludedListbox)
      Else If IsUri Then
        MyLibrary.AddFile(Librarygrid, Droppedfile, GeneralOptions.SlowTagsCHK.value, True)
      Endif
    Endif
  Next
  MyLibrary.SyncSortedTable() '<-necessary for MyLibrary.isdupe() function
  Try MyAlbumsLib.Init(mylibrary, AlbumGridView, searchfieldalbums.text)
  If Error Then Debug "Error while initializing albums view"
  Try MyAlbumsLib.Arrange(generaloptions.IconWidthAlbums.text, albumviewtexlen)
  If Error Then Debug "Error while Arranging albums view"
  Debug "End at: " & Time
  Debug
  'reset the progressbar
  MyLibraryProgressBar.h = 0
  MyLibraryProgressBar.visible = False
  MyLibrary.FilesToProcess = 0
  MyLibrary.FilesProcessed = 0
  MyLibraryProgressBar.value = 0
  
  UpdateSearchResults(mylibrary, librarygrid, True, Searchfield.text)
  ScrollLeft()
  
End

Public timerscroll As Timer

Public Sub ScrollLeft()
  
  timerscroll = New Timer As "timerscroll"
  timerscroll.delay = 1
  timerscroll.enabled = True
  
End

Public Sub timerscroll_timer()
  
  Try librarygrid.MoveTo(0, 0)
  Try playlistgrid.MoveTo(0, 0)
  timerscroll.enabled = False
  
End

Public Sub MenuVideoAudioChains_Click()
  If (Not global.initearlyformsdone) Then InitEarlyForms()
  NewChains.show
End

Public Sub MenuVideoDriver_Click()
  
  If (Not global.initearlyformsdone) Then InitEarlyForms()
  NewChains.show_video_drivers()
  
End

Public Sub MenuAudioDriver_Click()
  
  If (Not global.initearlyformsdone) Then InitEarlyForms()
  NewChains.show_audio_drivers()
  
End

Public Sub MenuSaveDefault_Click()
  Stop
  If Lower(global.CurrentProfile) = "factory_defaults" Then
    If MyQuestion.Ask(("You can't modify the current profile\nbecause it is the Factory defaults one"), ("Switch to ''default'' profile and save"), ("Don't save")) = 1 Then
      global.CurrentProfile = "default"
      Try UpdateProfilesTabList()
    Else
      Return
    Endif
  Endif
  Try ReallySaveAllSettings(global.CurrentProfile, True)
  'GetOptionsFromGui() 'commented because it is called by reallysaveallsettings
  If Error Then Message.Error(("Error while saving default settings"))
  Try UpdateProfilesTabList()

End

Public Sub ReallySaveAllSettings(DestinationProfile As String, Optional WithLibraryAndPls As Boolean = True)

  If (Not global.initearlyformsdone) Then InitEarlyForms()
  If (DestinationProfile = "Factory_Defaults") Then ReLoadCurrentProfile()

  Global.SaveAllSettings(DestinationProfile, WithLibraryAndPls)
  GeneralOptions.SaveWatchDir(global.confpath & "/" & DestinationProfile)
  GeneralOptions.SaveExcludeDir(global.confpath & "/" & DestinationProfile)
  HotKeys.SaveHotKeys(global.confpath & "/" & DestinationProfile)
  ComboHistory.SaveHistory(Searchfield, global.confpath & "/" & DestinationProfile)
  ComboHistory.SaveHistory(SearchfieldPLS, global.confpath & "/" & DestinationProfile)
  ComboHistory.SaveHistory(Searchfieldalbums, global.confpath & "/" & DestinationProfile)
  ComboHistory.SaveHistory(SearchfieldDVB, global.confpath & "/" & DestinationProfile)
  ComboHistory.SaveHistory(youSearchfield, global.confpath & "/" & DestinationProfile)
  ComboHistory.SaveHistory(AddUriForm.UriInsComboBox, global.confpath & "/" & DestinationProfile)
  ComboHistory.SaveHistory(Fmain.Urlbox, global.confpath & "/" & DestinationProfile)
  
End

Public Sub MenuLoadDefault_Click()
  ReLoadCurrentProfile()
  'FMain.cachedopts = "" 'fixmempv se vuoi reimplementare le cachedopts
End

Public Sub MenuRestoreDefaults_Click()
  
  Dim DefaultFile As String
  
  If Not (MyQuestion.ask(("Are you sure you want to reset the default profile\nto factory values?"), ("Don't Reset"), ("Reset")) = 1) Then
    For Each DefaultFile In Dir(Global.confpath, "Default.*")
      Try Kill global.confpath & "/" & DefaultFile
      If Error Then Message.Error(("There was a problem while deleting") & global.confpath & "/" & DefaultFile, "OK")
    Next
    Message(("Default profile has been set to factory values.\nRestart is needed."))
  Endif
  
End

Public Sub MenuConfigureVideoFilters_Click()
  
  If (Not global.initearlyformsdone) Then InitEarlyForms()
  NewChains.show_video_filters()
  
End

Public Sub MenuConfigureAudioFilters_Click()
  
  If (Not global.initearlyformsdone) Then InitEarlyForms()
  NewChains.show_audio_filters()
  
End

Public Sub OLD_Apply()
  'FMain.cachedopts = "" 'fixmempv se vuoi reimplementare le cachedopts
  global.ResetApplyBtnColor()
  VEqHasBeenSet = False
  subnotset = True
  If mplayer.ProcessRunningOvr() Then
    ForcedAspectRT = "default"
    mplayer.do_restart(mplayer.getP("fullpath"), GetOptionsFromGui() & SetRightCache() & VmetersOptionsAndInitIfNeeded())
    PrevValuecTime = 999999
    aspectmenu.visible = Not (mplayer.getP("audioonly") Or fsform.fullscreen)
    mplayer.Renice(GeneralOptions.NiceLevelSpinBox.value)
    CorrectAreaAspect
    'LogWindow.clearlogs()
    'LogWindow.ShowLogs()
  Endif
  
  Try VideoEqualizer.CheckDynamicOverbright_Click()
  ' fixmempv
  ' If LASTAUDIOID <> -1 Then mplayer.Send("switch_audio " & LASTAUDIOID)
  ' If LASTSUBID <> 99999 Then mplayer.Send("sub_select " & lastsubid)
  
  'onesectimer.start
End

Public Sub Apply()
  Dim temp_opts As New Collection
  Dim new_opts As New Collection
  Dim data As String
  'fixmempv: questi due sotto servono ancora?
    VEqHasBeenSet = False
    subnotset = True
  
  'create a new set of options
  If mplayer.ProcessRunningOvr() Then 
    temp_opts = static_options()
    For Each data In temp_opts
      new_opts[temp_opts.key] = data
    Next

    temp_opts = file_options(mplayer.getP("fullpath"))
    For Each data In temp_opts
      new_opts[temp_opts.key] = data
    Next

    temp_opts = user_options()

    For Each data In temp_opts
      new_opts[temp_opts.key] = data
    Next  

    new_opts["volume"] = Initialvolume()
    
    'restore the old ytdl option
    Try new_opts["ytdl"] = mplayer.mpvoptions["ytdl"]

    mplayer.do_Apply(new_opts)

    global.ResetApplyBtnColor()

  Endif
    
  
  
End



Public Sub SubTitlesMenu_Click()
  
  If (Not global.initearlyformsdone) Then InitEarlyForms()
  SubAndOsd.show
  
End

Public Sub HotkeysMenu_Click()
  
  If (Not global.initearlyformsdone) Then InitEarlyForms()
  HotKeys.show
  
End

' Public Sub PauseUnPause(doPause As Boolean)
'   If dopause Then
'     'OneSecTimer.stop
'     ButtonPlay.picture = Picture["media-playback-start.png"]
'     mplayer.Send("pausing get_property paused") 'in questo modo abbiamo certamente una pausa, non uno switch.
'       Else
'     If mplayer.paused() Then
'       OneSecTimer.start
'       ButtonPlay.picture = Picture["media-playback-pause.png"]    
'       mplayer.Send("Pause")
'     Endif
'   Endif
' End
' 
' 
' Public Sub HandlePause()
'   Dim PreviousFullscreenstate As Boolean
'   Dim doubleclicktime As Float = 0.5
'   Previousfullscreenstate = fsform.fullscreen
' 
'   If mplayer.paused() Then
'     PauseUnPause(False)
'     'wait a while to see if we are changing fullscreenmode
'     Wait doubleclicktime
'     If fsform.fullscreen <> Previousfullscreenstate Then
'       PauseUnPause(True)
'     Endif
'       Else
'     PauseUnPause(True)
'     'wait a while to see if we are changing fullscreenmode
'     Wait doubleclicktime
'     If fsform.fullscreen <> Previousfullscreenstate Then
'       PauseUnPause(False)
'     Endif
'   Endif
' 
' End

'HotKeys Handling *******************************************


Public Sub Show_runtime_infos()
  Dim info As String = "a\nb\nc\n"
  Dim prop As New Collection
  Dim msg As String
  Dim name, data As String

  prop["Filepath"] = "path"
  prop["---"] = " "
  
  prop["cache size (KB)"] = "cache-size"
  prop["cache fill state (%)"] = "cache"
  prop["UnSeekable"] = "partially-seekable"
  prop["dropped frames"] = "drop-frame-count"
  prop["dropped frames by vo"] = "vo-drop-frame-count"
  prop["----"] = " "
  
  prop["Hardware decoding"] = "hwdec"
  prop["Hardware decoding detected"] = "detected-hwdec"
  prop["-----"] = " "
  
  prop["video driver"] = "current-vo"
  prop["Video filters"] = "vf"
  prop["-----"] = " "
  
  prop["video codec"] = "video-codec"
  prop["video bitrate (packet)"] = "packet-video-bitrate"
  prop["Video width"] = "width"
  prop["Video height"] = "height"
  prop["Video fps"] = "estimated-vf-fps"
  prop["-----"] = " "

  prop["audio driver"] = "current-ao"
  prop["audio filters"] = "af"  
  'prop["Audio device in use"] = "audio-out-detected-device"
  prop["------"] = " "
  
  prop["audio codec"] = "audio-codec"
  prop["audio bitrate (packet)"] = "packet-audio-bitrate"
  prop["audio channels"] = "audio-channels"
  prop["-.----"] = " "
  
  

  
  

  
  For Each prop
    name = prop.Key
    data = prop[name]
    
    If name Like "*---*" Then
      msg &= "\\n"
        Else
      msg &= name & "=" & "${" & data & "}"
      msg &= "\\n"
    Endif
  Next
  
  
  mplayer.ShowText(msg, 4000)
  
  'mplayer.ShowText("ciao \\n ${time-pos} ", 1000)
  'Debug "HA!"
'echo show_text \"linea1 \\n   time=\${time-pos}           \\n  linea 3\" >/tmp/input
End





Public Sub HotKeyToMplayer(HotKey As String)

  'will send the action to the running mplayer
  'Some actions such as fullscreen and panscan are treated internally
  Dim currentfile As String
  Dim Action As String 

  Action = Lower(HotKeys.ActionRelatedTo(Hotkey))
  
  Debug Action
  
  If Action Like "seek*" Then
    If global.IsImgFile(mplayer.getP("fullpath")) Then
      If action Like "seek +*" Then
        buttonNext_click()
          Else
        ButtonPrev_Click()
      Endif
    Endif
  Endif    
  Select Case Action
    Case "show runtime infos"
      Show_runtime_infos()
    Case "switch fullscreen"
      FullScreenBtn_Click()
    Case "zoom +0.05"
      PanScanCorrect(+0.05)
    Case "zoom -0.05"
      PanScanCorrect(-0.05)
    Case "deinterlace"
      mplayer.DoDeinterlace()
    Case "pause"
      If mplayer.Paused() Then
        mplayer.do_leave_pause()
        ButtonPlay.picture = Picture["media-playback-pause.png"]
      Else
        mplayer.do_pause()
        ButtonPlay.picture = Picture["media-playback-start.png"]
      Endif
      'mplayer.Send(Action)
      
    Case "exit"
      mplayer.Send(Action)
      If fsform.visible Then FullScreenSwitch()
    Case "quit"
      'mplayer.Send(Action)
      ButtonStop_Click()
      If fsform.FullScreen Then FullScreenSwitch()
    Case "volume +0.5"
      SaveVolumeSlider.value = SaveVolumeSlider.value + 1
    Case "volume -0.5"
      SaveVolumeSlider.value = SaveVolumeSlider.value - 1
    Case "brightness +1"
      VideoEqualizer.slider1.value += 1
    Case "brightness -1"
      VideoEqualizer.slider1.value -= 1
    Case "contrast +1"
      VideoEqualizer.slider2.value += 1
    Case "contrast -1"
      VideoEqualizer.slider2.value -= 1
    Case "gamma +1"
      VideoEqualizer.slider3.value += 1
    Case "gamma -1"
      VideoEqualizer.slider3.value -= 1
    Case "hue +1"
      VideoEqualizer.slider4.value += 1
    Case "hue -1"
      VideoEqualizer.slider4.value -= 1
    Case "saturation +1"
      VideoEqualizer.slider5.value += 1
    Case "saturation -1"
      VideoEqualizer.slider5.value -= 1
    Case "delete current file"
      If mplayer.ProcessRunningOvr() Then
        currentfile = Replace(mplayer.getP("fullpath"), "//", "/")
        currentfile = Replace(mplayer.getP("fullpath"), "//", "/")
        currentfile = Replace(mplayer.getP("fullpath"), "//", "/")
        If Not mplayer.IsNetworkURI Then
          If MyQuestion.Ask(("Are you sure you want to delete:") & "\n" & currentfile & "\n" & ("from disc?"), ("Delete"), ("Don't delete")) = 1 Then
            If DeleteFromActiveQueue(currentfile) Then
              Play(Media_Next_path)
              Debug
                Else
              message.Error(("Couldn't delete the file"))
            Endif
          Endif
        Endif
      Endif
    Case Else

    mplayer.Send(Action)
    'mplayer.Send("no-osd " & Action)
  End Select
  
End

Public Sub fileview1Myreload()
  'refresh fileview keeping the scroll position
  Dim achild As Object
  Dim sx, sy As Integer
  For Each achild In FileView1.Children
    If achild Is Columnview Then
      Try sx = achild.scrollx
      If Not Error Then
        Try sy = achild.scrolly
        fileview1.Reload()
        Try achild.scrollx = sx
        If Not Error Then achild.scrolly = sy
      Endif
    Endif
  Next 'child
End


Public Function DeleteFromActiveQueue(item As String) As Boolean
  'will delete a file from disk and update the local view
  'will return 1 in case of successfull delete, 0 otherwise.
  Try Kill item
  If Error Then Return 0 

  
 ' Stop
  If fileview1.dir = File.Dir(item) & "/" Then 
    fileview1Myreload()
      Else If fileview1.dir = File.Dir(item) Then 
        fileview1Myreload()
  Endif

  myplaylist.DeleteFromPath(item, playlistgrid)
  mylibrary.DeleteFromPath(item, librarygrid)
  
  Wait
  Select Case GetActivePlayQueue()
    Case "browse"
      BrowseSelectPrev()
      BrowseSelectNext()
    Case "playlistgrid"
      myplaylist.SelectPrev(playlistgrid)
      Wait 
      myplaylist.Selectnext(playlistgrid)
      Wait 
    Case "librarygrid"
      mylibrary.SelectPrev(librarygrid)
      Wait
      mylibrary.Selectnext(librarygrid)
      Wait
  End Select
  
  Return 1
End



Public Sub PanScanCorrect(delta As Float)
  Dim MaxRFactor As Float = 5
  Dim MinRFactor As Float = -0.9
  forcedzoomrt = ""

  ResizeFactor = Resizefactor + delta
  CorrectAreaAspect()
  realtimeform.PanscanSlider.value = resizefactor * 10000
  If ResizeFactor > MaxRFactor Then 
    resizefactor = MaxRFactor
      Else If ResizeFactor < MinRFactor Then 
    resizefactor = MinRFactor
  Endif
End

Public Sub VideoAreaGroup_MouseDown()
  mouseleft = mouse.left
  If FMain.mplayer.ProcessRunningOvr() Then fmain.VideoBox.setfocus 'needed to get keypress events
  IgnoreMouse = False
  'PanelNowNextShow()
End

Public Sub PanelNowNextShow()
  PanelNowNextArrange()
  zzzfake.PanelNowNext.show()
End

Public Sub PanelNowNextArrange(Optional Exdended As Boolean = False)

  With zzzfake
    .PanelNowNext.Reparent(outerbox)
    .PanelNowNext.ignore = True
    .hbox1.h = .Label1.Font.TextHeight("|") + (desktop.scale * 4)
    .hbox2.h = .hbox1.h
    .hbox3.h = .hbox1.h
    .hbox1.y = .PanelNowNext.padding
    .Separator1.y = .HBox1.y + .HBox1.h
    .HBox2.y = .Separator1.y + .Separator1.h
    .HBox3.y = .HBox1.y + .HBox1.h
    .PanelNowNext.h = .hbox1.h + .hbox2.h + .hbox3.h + .Separator1.h + (.PanelNowNext.padding * 2)
    If .LabelNowInfo.visible Then .PanelNowNext.h += .LabelNowInfo.h + .LabelNextInfo.h
    .PanelNowNext.w = CInt(outerbox.w * 0.8)
    .PanelNowNext.x = (outerbox.w / 2) - (.PanelNowNext.w / 2)
    .PanelNowNext.y = - .PanelNowNext.padding
  End With

End

Public Sub VideoAreaGroup_KeyPress() 

  Dim HotKey As String
  If ((Key.code = Key.space) And (Key.control) And (Key.shift) And (Key.alt)) Then Xt7Egg.show
  HotKey = HotKeyGrab.GetKey()
  HotKeyToMplayer(HotKey)
  
End

Private LastClickTime As Float

Public Sub VideoAreaGroup_MouseUp()

  Dim HotKey As String
  Dim mx, my As Integer

  LastClickTime = Timer
  If GuiDragging Then
    guidragging = False
    Return
  Endif
  If Not IgnoreMouse And mplayer.ProcessRunningOvr() Then
    HotKey = HotKeyGrab.GetMouse(False)
    HotKeyToMplayer(HotKey)
  Endif
  
  IgnoreMouse = True
  guidragging = False
  
  'move the mouse so that a mousemove event is triggered inside the videoarea.
  'this avoids stuck mouse buttons (gambas bug)
  mx = mouse.screenx
  my = mouse.screeny
  mouse.Move(mx + 1, my) 
  mouse.Move(mx, my)
  
End

Public Sub VideoAreaGroup_MouseWheel()
  
  Dim HotKey As String
  If Not mplayer.ProcessRunningOvr() Then Return
  HotKey = HotKeyGrab.GetMouse(True)
  IgnoreMouse = True
  HotKeyToMplayer(HotKey)
  
  UpdateVolumeTooltip()
  Wait 0.5
End

'/HotKeys Handling *******************************************

Public Sub VideoAreaGroup_DblClick()

  Dim timenow As Float = Timer
  If mouseleft And Not TagEditMode Then 
    If (timenow - LastClickTime) < 0.25 Then 
      Wait 0.1
      mplayer.Send("pause") ' keep the pausing state when switching fullscreen mode
      Debug timenow - LastClickTime
    Endif
    FullScreenSwitch()
  Endif

End

Public Sub GeneralOptionsMenu_Click()
  
  If (Not global.initearlyformsdone) Then InitEarlyForms()
  GeneralOptions.show
  
End

Public Sub ButtonNext_Click()
  SelectNext(False, GetActivePlayQueue())
End

Public Sub SelectNext(Optional forcerunning As Boolean = False, Optional CurrentQueue As String = "")
  Dim mplayerwasrunning As Boolean 
  Dim togglepls_value As Boolean = TogglePls.value
  Try mplayerwasrunning = mplayer.ProcessRunningOvr() Or forcerunning
  
  TogglePls.value = False 'or else mykill will play the next
  
  Stopmthumbler()
  fmain.mouse = mouse.wait
  Object.Lock(fmain.SeekBar)
  fmain.SeekBar.Value = 0
  SetProgress(seekbar.value)
  Object.unLock(fmain.SeekBar)
  
  If (TabSelectedPlaylist() And CurrentQueue = "") Or CurrentQueue = "playlistgrid" Then
    MyPlaylist.SelectNext(PlaylistGrid, ShufflePls.value)
    Wait 0.025
    If mplayerwasrunning Then Play(Media_Next_path)
  
  
  Else If (TabSelectedLibrary() And CurrentQueue = "") Or CurrentQueue = "librarygrid" Then
    MyLibrary.SelectNext(LibraryGrid, ShufflePls.value)
    Wait 0.025
    If mplayerwasrunning Then Play(Media_Next_path)
  
  
  Else If TabSelectedDVB() And CurrentQueue = "" Then
    MyDVBTList.SelectNext(dvbtGrid, False)
    Wait 0.025
    If mplayerwasrunning Then playselecteddvb()
  
  
  Else If (TabSelectedBrowse() And CurrentQueue = "") Or CurrentQueue = "browse" Then
    Try BrowseSelectNext()
    Wait 0.025
    If mplayerwasrunning Then Play(Media_Next_path)
  
  
  Else If (TabSelectedCDDA() And CurrentQueue = "") Or CurrentQueue = "cdda" Then
    CDDANext()
    'If mplayer.ProcessRunningOvr() Then OneSecTimer.start
    Wait 0.025
  
  Else If (TabSelectedYoutube() And CurrentQueue = "") Or CurrentQueue = "youtube" Then
    Youtube.Select_NextTreeItem(youtubetree)
    Wait 0.025
    If mplayerwasrunning Then 'Or (TogglePls.value) Then
      Try customtitle = youtubetree.Current.text
      Debug "mplayer was off so hit play from here"
      Debug
      Play(Media_Next_path)
    Endif
  
  Else If (TabSelectedDVD() And CurrentQueue = "") Or Lower(CurrentQueue) = "dvd" Then
    DVDNEXT()
    Wait 0.025
  
  Else If TabSelectedShoutcast() And CurrentQueue = "" Then
    If NOSAVEVBox3.visible Then  'shoutcastTree
      MyRadio.Select_NextTreeItem(genresTree)
      Wait 0.025
      If mplayerwasrunning Then Play(Media_Next_path,, GenresTree.Current.text)
    Else 'gridview
      MyRadio.Select_NextGridItem(ShutResultGrid)
      Wait 0.025
      If mplayerwasrunning Then Play(Media_Next_path,, ShutResultGrid[ShutResultGrid.row, 0].text)
    Endif
  Endif
  TogglePls.value = togglepls_value
  fmain.mouse = mouse.normal
End



Private TRIESBROWSESELECTNEXT As Integer = 0
Public Sub BrowseSelectNext()
  Dim filelist As String[]
  Dim current As String
  Dim CurrentIndex, ToSelectIndex As Integer
  Dim nextfile As String
  Try current = fileview1.selection[0]
  fileview1.SelectAll
  filelist = fileview1.Selection
  If filelist.count = 0 Then Return
  CurrentIndex = filelist.Find(current)
  If currentindex = -1 Then Return
  If currentindex = filelist.Max Then 
    ToSelectIndex = 0
    global.isnextselected = False
      Else
        ToSelectIndex = currentindex + 1
        global.isnextselected = True
  Endif
  Try nextfile = fileview1.dir & "/" & filelist[ToSelectIndex]
  If IsDir(nextfile) Then 
    fileview1.current = filelist[ToSelectIndex]
    Wait
    If TRIESBROWSESELECTNEXT < 10 Then  'stack overflow prevention
      TRIESBROWSESELECTNEXT += 1
      BrowseSelectNext()
      Return
    Endif
      Else
    TRIESBROWSESELECTNEXT = 0
    Try Media_Next_path = fileview1.dir & "/" & filelist[ToSelectIndex]
    Try Media_Next_path = Replace(Media_Next_path, "//", "/")
    fileview1.current = filelist[ToSelectIndex]
    Wait
  Endif
End


Public Sub BrowseSelectPrev()
  Dim filelist As String[]
  Dim current As String
  Dim CurrentIndex, ToSelectIndex As Integer
  Try current = fileview1.selection[0]
  fileview1.SelectAll
  filelist = fileview1.Selection
  If filelist.count = 0 Then Return
  CurrentIndex = filelist.Find(current)
  If currentindex = -1 Then Return
  If currentindex = 0 Then 
    ToSelectIndex = filelist.Max
      Else 
        ToSelectIndex = currentindex - 1
  Endif
  Try Media_Next_path = fileview1.dir & "/" & filelist[ToSelectIndex]
  Try Media_Next_path = Replace(mplayer.getP("FullPath"), "//", "/")
  fileview1.current = filelist[ToSelectIndex]
End

Public Sub ButtonPrev_Click()
  
  Dim mplayerwasrunning As Boolean = False

  Try mplayerwasrunning = mplayer.ProcessRunningOvr()
  'OneSecTimer.stop
  Stopmthumbler()
  fmain.mouse = mouse.wait
  Object.Lock(fmain.SeekBar)
  fmain.SeekBar.Value = 0
  SetProgress(seekbar.value)
  Object.unLock(fmain.SeekBar)
  If TabSelectedPlaylist() Then
    MyPlaylist.SelectPrev(PlaylistGrid) ', ShufflePls.value)
    Wait 0.025
    If mplayer.ProcessRunningOvr() Then Play(Media_Next_path)
  Else If TabSelectedLibrary() Then
    MyLibrary.SelectPrev(LibraryGrid) ', ShufflePls.value)
    Wait 0.025
    If mplayerwasrunning Then Play(Media_Next_path)
  Else If TabSelectedDVB() Then
    MyDVBTList.SelectPrev(dvbtGrid)
    Wait 0.025
    If mplayerwasrunning Then playselecteddvb()
  Else If TabSelectedCDDA() Then
    CDDAPrev()
    'If mplayer.ProcessRunningOvr() Then OneSecTimer.start
    Wait 0.025
    
  Else If TabSelectedDVD() Then
    DVDPREV()
  Else If TabSelectedBrowse() Then
    Try BrowseSelectPrev()
    If mplayerwasrunning Then Play(Media_Next_path)
  Else If TabSelectedYoutube() Then
    Youtube.Select_PrevTreeItem(youtubetree)
    Wait 0.025
    If mplayerwasrunning Then 
      Try customtitle = youtubetree.Current.text
      Debug "mplayer was off so hit play from here"
      Debug
      Play(Media_Next_path)
    Endif
  Else If TabSelectedShoutcast() Then
    If NOSAVEVBox3.visible Then  'shoutcastTree
      MyRadio.Select_PrevTreeItem(genresTree)
      Wait 0.025
      If mplayerwasrunning Then Play(Media_Next_path,, GenresTree.Current.text)
    Else 'gridview
      MyRadio.Select_PrevGridItem(ShutResultGrid)
      Wait 0.025
      If mplayerwasrunning Then Play(Media_Next_path,, ShutResultGrid[ShutResultGrid.row, 0].text)
    Endif
  Endif
  fmain.mouse = mouse.normal

End

'-----------------------------------
Private Sub GridKeyRelease(LibraryGrid As GridView, MyLibrary As PlaylistClass)
  
  Dim PrevScrollX, PrevScrollY As Integer
  
  If Key.code = Key.delete Then
    PrevScrollX = LibraryGrid.scrollx
    PrevScrollY = LibraryGrid.scrollY
    LibraryGrid.visible = False
    
    MyLibrary.DeleteSelected(LibraryGrid)
    
    LibraryGrid.scrollx = PrevScrollX
    LibraryGrid.scrollY = PrevScrollY
    LibraryGrid.visible = True
    LibraryGrid.SetFocus
  Endif
  
End

' Public Sub DvbTGridToChanFile()
'   Dim channelconf As String[]
'   Dim i, j As Integer
'   Dim fullpath, name As String
'   'will:
'   '1- Save the grid
'   '2- find fullpath items in chanfile and rename them according to the grid
'   '3- delete any channel not found
'   '4- update the epg form (or close it and mark as not updated
'   
'   
'   '1- save dvbtgrid:
'   fmain.MyDVBTList.Save(Fmain.dvbtgrid, global.confpath)
'   
'   '2- find fullpath items in chanfile and rename them according to the grid
' 'metti channels.conf in una stringa[]
' 
' '
' 'per ogni fullpath (dvb://xxx) nella griglia:
' 'se il corrispondente nome è diverso, allora:
' '   cerca il canale in channels.conf e rinominalo in quello che hai trovato nella colonna nome
' '   rinomina pure il fullpath
' 
' 
'   channelconf = Split(file.Load(DVBTuner.mplayerchannelsfile), "\n",, True)
'   For i = 0 To dvbtgrid.Rows.count - 1
'     fullpath = MyDVBTList.CellValue(dvbtgrid, i, MyDVBTList.ColumnIndex["Full Path"])
'     name = MyDVBTList.CellValue(dvbtgrid, i, MyDVBTList.ColumnIndex["Filename"])
'     If Replace(fullpath, "dvb://", "") <> fullpath Then
'       For j = 0 To channelconf.max
'         If Split(channelconf[j], ":", "", False)[0] = Replace(fullpath, "dvb://", "") Then
'           channelconf[i] = Replace(channelconf[i], Split(channelconf[j], ":", "", False)[0], name)
'           Break
'         Endif
'       Next 'j
'       If j <= channelconf.max Then
'         
'       Endif
'     Endif
'   Next
' 
' 
' '3- delete any channel not found
' 'per ogni nome canale trovato In channels.conf
' 'se non lo trovi nella colonna griglia di fullpath
' 'rimuovi la linea dal channels.conf
' 
' 
' 
' 
' 
' '   salva channels.conf
' 
' End

Public Sub dvbtgrid_Keypress()

  If (Key.code = Key.Return) Or (Key.code = Key.Enter) Then
    playselecteddvb()
    Return
  Endif
  If Key.code = Key.delete Then
    If (MyQuestion.Ask(("Delete Selected channel(s)?"), ("Delete"), ("Don't delete")) = 1) Then
      MyDVBTList.DeleteSelected(DVBTGrid)
    Endif
  Endif
  DVBTGrid_select()

End

Public Sub PlayListGrid_Keypress()
  
  If (Key.code = Key.Return) Or (Key.code = Key.Enter) Then
    Play(PlayListGrid[Playlistgrid.row, MyPlayList.Columnindex["Full Path"]].text)
    Return
  Endif
  GridKeyRelease(PlayListGrid, MyPlaylist)
  Playlistgrid_Select()
  
End

Public Sub Librarygrid_Keypress()
  
  If (Key.code = Key.Return) Or (Key.code = Key.Enter) Then
    Play(librarygrid[librarygrid.row, mylibrary.Columnindex["Full Path"]].text)
    Return
  Endif
  GridKeyRelease(librarygrid, mylibrary)
  librarygrid_Select()

End

'-----------------------------------


' Public Sub ConfigureChainsBTN_click()
'   
'   Chains.show
'   
' End

'-----------------------------------
Public Sub PlayListGrid_DblClick()

  Dim SelectedPath As String
  Dim myradiolabel As String

  Try customtitle = PlayListGrid[PlayListGrid.row, myplaylist.ColumnIndex["Filename"]].text
  Last.mouse = mouse.wait
  Try SelectedPath = PlaylistGrid[Playlistgrid.row, MyPlaylist.Columnindex["Full Path"]].text
  If (Not Error ) Then
    MyLibrary.AlreadyPlayedString.Push(SelectedPath)
  Endif
  If MouseInsideGrid(PlayListGrid) Then
    If global.IsPlaylist(selectedpath) Then myradiolabel = PlaylistGrid[Playlistgrid.row, MyPlaylist.Columnindex["Filename"]].text
    Try Play(SelectedPath,, myradiolabel)
    SetActivePlayQueue("playlistgrid")
  Endif
  playlistgrid.mouse = mouse.Default

End

Public Sub LibraryGrid_DblClick()
  
  Dim SelectedPath As String
  Dim myradiolabel As String

  Try customtitle = librarygrid[librarygrid.row, myplaylist.ColumnIndex["Filename"]].text
  Last.mouse = mouse.wait
  Try SelectedPath = LibraryGrid[LibraryGrid.row, MyLibrary.Columnindex["Full Path"]].text
  If (Not Error ) Then
    MyLibrary.AlreadyPlayedString.Push(SelectedPath)
  Endif
  If MouseInsideGrid(Librarygrid) Then
    If global.IsPlaylist(selectedpath) Then myradiolabel = LibraryGrid[librarygrid.row, MyLibrary.Columnindex["Filename"]].text
    Try Play(SelectedPath,, myradiolabel)
    SetActivePlayQueue("librarygrid")
  Endif
  Try Last.mouse = mouse.Default
  
End

Public Sub ButtonNowNext_Click()

  If zzzfake.PanelNowNext.visible Then 
    zzzfake.PanelNowNext.hide
    TimerUpdateNowNext.Stop
  Else
    UpdateNowNextInfo()
    PanelNowNextShow()
    TimerUpdateNowNext.Start
  Endif

End

Private Function Usedvb_set_channel() As Boolean

  Dim Userpreference As String = ""
  Try Userpreference = generaloptions.ComboboxFastZapping.Text
  If Error Then Return False
  If Not mplayer.ProcessRunningOvr() Then Return False
  If Not (Lower(mplayer.getP("fullpath")) Like "dvb://*") Then Return False
  
  If Userpreference Like "*0*" Then Return False 'never use
  If Userpreference Like "*2*" Then Return True 'always use
  
  If Userpreference Like "*1*" Then 'let xt7 choose
    Return Not (mplayer.AudioSwitched)
  Endif
  
  Return False 'the default,safer, choice.

End

Public Sub PlaySelectedDvb(Optional channel As String = ":::")
  
  Dim SelectedPath As String

  'start from a blank panel
  zzzfake.LabelNowName.text = ("Not available")
  zzzfake.LabelNextName.text = ("Not available")
  zzzfake.LabelNextStart.text = ""
  zzzfake.LabelNextStart.visible = False
  zzzfake.VBox4.visible = False
  
  'start epg in background
  If Not epgform.initdone Then 
    epgform.Init()
  Else
    epgform.StopScan()
  Endif
  epgform.dvbsnoop.Stopit()
  epgform.dvbsnoop.Startit()
  
  Last.mouse = mouse.wait
  If channel = ":::" Then 
    Try SelectedPath = dvbtGrid[dvbtGrid.row, MyDVBTList.Columnindex["Full Path"]].text
  Else
    selectedpath = "dvb://" & channel
  Endif
  
  'Here we will reuse the same mplayer instance if at least one of this conditions are met:
  '1) User has never switched audio
  '2) User explicitely want to try fast zapping
  If Usedvb_set_channel() Then
    mplayer.dvb_set_channel(Replace(Lower(SelectedPath), "dvb://", ""), CInt(generaloptions.spinboxcard.Text) - 1) 'fixmempv is stub
    'simulate a dry run:
    FillStreamsMenu()
    CorrectAreaAspect()
    FillPropertiesGrid()
    LogWindow.ShowLogs()
    Last.mouse = mouse.Default
    Goto ReturnLabel
  Endif
  Try Play(SelectedPath)
  
  Try Last.mouse = mouse.Default
  Goto ReturnLabel
  
  Return
ReturnLabel:
  'If Not OneSecTimer.Enabled Then OneSecTimer.Start()
  
End

Public Sub dvbtGrid_DblClick()
  
  playselecteddvb()
  
End

Private Function MouseInsideGrid(Librarygrid As Gridview) As Boolean
  
  With LibraryGrid
    If (Mouse.screeny > .screeny + .Columns.Height + 1) And (Mouse.screeny < .screeny + .clientH + .Columns.Height + 1) Then
      If (Mouse.screenX < .screenx + .ClientW) Then
        Return True
      Endif
    Endif
  End With
  Return False
  
End
'-----------------------------------

Public Sub RefreshVisibleRows(mygrid As Gridview, mylibrary As Playlistclass)
  
  Dim R, FirstR, LastR As Integer
  Dim FirstC, LastC As Integer
  
  If fmain.closing Then Return
  If MyGrid.Rows.count <= 0 Then Return
  'FirstR = MyGrid.RowAt(MyGrid.y)
  'LastR = MyGrid.RowAt(MyGrid.h)
  FirstR = global.MyRowAt(mygrid, MyGrid.y)
  LastR = global.MyRowAt(mygrid, MyGrid.h)
  If LastR = -1 Then LastR = Mygrid.rows.count - 1
  If firstR = -1 Then firstR = 0
  
  FirstC = 0
  LastC = MyGrid.Columns.Count - 1
  
  For R = FirstR To LastR
    Gridviews_Data(mygrid, mylibrary, R, 0)
  Next 'R
  
End

Public Sub RefreshVisibleCovers(mygrid As Gridview)
  
  Dim FirstR, LastR As Integer
  Dim FirstC, LastC As Integer
  
  If fmain.closing Then Return
  If MyGrid.Rows.count <= 0 Then Return
  'FirstR = MyGrid.RowAt(MyGrid.y)
  'LastR = MyGrid.RowAt(MyGrid.h)
  FirstR = Global.MyRowAt(mygrid, MyGrid.y)
  LastR = Global.MyRowAt(mygrid, MyGrid.h)
  If LastR = -1 Then LastR = Mygrid.rows.count - 1
  If firstR = -1 Then firstR = 0
  
  FirstC = 0
  LastC = MyGrid.Columns.Count - 1
  
  Debug "Doing from " & FirstR & " - to " & LastR
  Debug
  If Lower(mygrid.name) = "playlistgrid" Then
    Try PlaylistGrid.refresh
  Else
    Try libraryGrid.refresh
  Endif
  
End

Public Sub UpdateSearchResults(MyLibrary As PlaylistClass, LibraryGrid As Gridview, Optional autosize As Boolean = True, searchterm As String)
  'some gtk component problem here

  Dim crow As Integer
  HideGrid(LibraryGrid)
  If (Not fmain.fullyloaded) Then
    If Not (librarygrid.tag = "FORCEUPDATE") Then Return
  Endif
  LibraryGrid.clear
  MyLibrary.Search(LibraryGrid, Searchterm)
  Debug
  If autosize Then
    MyLibrary.AutoSizeColumns(LibraryGrid)
    ' [GB2:FNTH] LibraryGrid.Rows.h = LibraryGrid.Font.Textheight("^_") + global.rowpadding
    'LibraryGrid.Rows.h = LibraryGrid.Font.TextHeight("^_") + global.rowpadding
  Endif
  If fmain.fullyloaded Then 
    ShowGrid(LibraryGrid)
    'Wait
    If mplayer.ProcessRunningOvr() Then
      'Wait
      crow = mylibrary.FindRowByPath(librarygrid, mplayer.getP("fullpath"))
      If crow <> -1 Then
        librarygrid.MoveTo(crow, 0)
        librarygrid.Rows[crow].selected = True
        librarygrid[crow, 0].EnsureVisible()
      Endif
    Endif
    Select Case Lower(librarygrid.name)
      Case "librarygrid"
        LibrarySelInfo.visible = False
      Case "playlistgrid"
        CalcTotalLengthInfoOn(myplaylist, playlistgrid, PlayListSelInfo)
    End Select
  Endif

End

Public Sub SearchField_KeyRelease()

  Dim previous_search As String
  If (Key.code < Key.space) Or (Key.code > Key.delete) Then Return
  If key.code = key.tab Then Return
  previous_search = Searchfield.text
  'If ((Len(Searchfield.text) > 2) Or (Len(Searchfield.text) = 0)) Then
  Wait 0.5
  If previous_search = Searchfield.text Then
    UpdateSearchResults(MyLibrary, LibraryGrid, fmain.FullyLoaded, Searchfield.text)
  Else
    Return
  Endif
  'Endif
  MenuLibraryZapSelected.enabled = (LibraryGrid.row > 0)

End

Public Sub SearchFieldPLS_KeyRelease()

  Dim previous_search As String
  If (Key.code < Key.space) Or (Key.code > Key.delete) Then Return
  If key.code = key.tab Then Return
  previous_search = Searchfieldpls.text
  'If ((Len(Searchfieldpls.text) > 2) Or (Len(Searchfieldpls.text) = 0)) Then
  Wait 0.5
  If previous_search = Searchfieldpls.text Then
    UpdateSearchResults(MyPlayList, PlayListGrid, fmain.FullyLoaded, SearchfieldPLS.text)
  Else
    Return
  Endif
  'Endif
  MenuPlaylistZapSelected.enabled = (PlaylistGrid.row > 0)

End

Public Sub SearchField_Activate()

  Try customtitle = librarygrid[librarygrid.row, myplaylist.ColumnIndex["Filename"]].text
  Play(LibraryGrid[Librarygrid.row, MyLibrary.Columnindex["Full Path"]].text)
  SetActivePlayQueue("librarygrid")
  ComboHistory.AddHistory(Searchfield, Searchfield.text)

End

Public Sub SearchFieldPLS_Activate()

  Try customtitle = PlayListGrid[PlayListGrid.row, myplaylist.ColumnIndex["Filename"]].text
  Play(PlayListGrid[Playlistgrid.row, MyPlayList.Columnindex["Full Path"]].text)
  SetActivePlayQueue("playlistgrid")
  ComboHistory.AddHistory(SearchfieldPLS, SearchfieldPLS.text)

End

Public Sub SearchField_Click()

  UpdateSearchResults(MyLibrary, LibraryGrid, fmain.FullyLoaded, Searchfield.text)
  MenuLibraryZapSelected.enabled = (LibraryGrid.row > 0)

End

Public Sub SearchFieldPLS_Click()

  UpdateSearchResults(MyPlayList, PlayListGrid, fmain.FullyLoaded, SearchfieldPLS.text)
  MenuPlaylistZapSelected.enabled = (PlaylistGrid.row > 0)

End

'-----------------------------------
Public Sub LibraryGrid_ColumnClick(Column As Integer)

  ColumnClick(LibraryGrid, Mylibrary, column, Searchfield.text)

End

Public Sub PlaylistGrid_ColumnClick(Column As Integer)

  ColumnClick(PlayListGrid, MyPlaylist, column, SearchfieldPLS.text)

End

Public Sub dvbtGrid_ColumnClick(Column As Integer)
  
  ColumnClick(Dvbtgrid, MyDVBTList, column, SearchFieldDVB.text)
  
End

Public Sub ColumnClick(Grid As GridView, pls As PlaylistClass, column As Integer, search As String)

  Dim ClickedColumn As String = Grid.Columns[column].text
  Dim PrevScrollX As Integer = Grid.scrollX

  Grid.mouse = mouse.Wait
  pls.DoSort(ClickedColumn, pls.searchtable)
  pls.AutoSizeColumns(grid)
  grid.scrollX = PrevScrollX
  grid.mouse = mouse.Default
  
  If column = 0 Then Try Object.SetProperty(grid, "sorted", False) 
  If ((column <> 0) And Not (Object.GetProperty(grid, "sorted"))) Then
    Try Object.SetProperty(grid, "sorted", True) 'use setproperty to make it compile with gb 3.0 too
  Endif

End
'-----------------------------------

Private Hsplit1ResizeDelayed As New Timer

Public Sub Hsplit1ResizeDelayed_timer()
  
  If Not fsform.fullscreen Then Hsplit1_MyRefresh
  
End

Public Sub Hsplit1_MyRefresh()

  Dim RightPanel As Integer = 0
  If fsform.visible Then 
    cachebar.Move(0, outerbox.h - cachebar.h, 0)
      Else
    cachebar.Move(0, outerbox.h - cachebar.h + toolbarbackground.h, 0)
  Endif
  If mplayer.ProcessRunningOvr() Then 
    If (Not mplayer.getP("audioonly")) Then CorrectAreaAspect()  
    UpdateStatusBar(CUSTOMTITLE_OLD, CTIME_OLD, CACHEVALUE_OLD)
    UpdateSeekSlider()
  Endif


  CostrainFormSizes()
  CorrectAreaAspect()
  Try RightPanel = HSplit1.layout[1]
  If RightPanel < 10 Then
    OuterBox.Background = Me.Background
    toolbarbackground.hide
    VideoBox.visible = False
    audioform.AudioPanel.visible = False
    rightsidepanel.Background = Color.default 'Background
  Else
    If Not TagEditMode Then
      OuterBox.Background = Color.black
      rightsidepanel.Background = Color.background
    Endif
    If Not VideoBox.visible Then videobox.show
    rightsidepanel.visible = True
    audioform.AudioPanel.visible = True
    If Not global.pluginmode Then toolbarbackground.show
  Endif
  YouVideoInfo.w = scrollviewyt.w - 64
  Try MyAlbumsLib.Arrange(generaloptions.IconWidthAlbums.text, albumviewtexlen)
  
  If zzzFake.PanelNowNext.visible Then 
    Wait
    PanelNowNextArrange()
  Endif
  
  ' ' ' zzzfake.cachingbox.x = (outerbox.w Div 2) - 33
  ' ' ' zzzfake.cachingbox.y = (outerbox.h Div 2) - 33

End

Public Sub LibraryGrid_Menu()
  Dim onlyoneselected As Boolean = False
  Dim selectedalbum As String = ""
  MenuLibraryZapSelected.Enabled = (LibraryGrid.row >= 0) 'popup removefromdisc menu item only of something is selected
  MenuOpenContainingFolderPopUp.visible = True
  MenuSortLibraryPopup.enabled = True
  MenuSortLibraryPopup.visible = True

  onlyoneselected = MyLibrary.OnlyOneSelected(librarygrid)
  MenuOpenContainingFolderPopUp.visible = onlyoneselected

  MenuLibrarySearchAlbum.Visible = False
  If onlyoneselected Then
      selectedalbum = mylibrary.CellValue(librarygrid, librarygrid.row, mylibrary.ColumnIndex["Album"])
      If Trim(selectedalbum) <> "" Then
        MenuLibrarySearchAlbum.visible = True
        MenuLibrarySearchAlbum.text = selectedalbum
        MenuLibrarySearchAlbum.picture = librarygrid.Current.Picture
      Endif
  Endif
  Menupopuplibrary.Popup
End

Private Sub CurrentLibraryItemToLibrary(myappend As Boolean)
  Dim selectedalbum As String 
  selectedalbum = mylibrary.CellValue(librarygrid, librarygrid.row, mylibrary.ColumnIndex["Album"])
  If myappend Then 
    Searchfield.text &= "|" & selectedalbum
      Else
    Searchfield.text = selectedalbum
  Endif
  SearchField_Click()
End


Public Sub MenuLibraryAlbumTracksAppendLibrary_Click()
  Try CurrentLibraryItemToLibrary(True)
  If Error Then Message.Error("An error occurred")
End

Public Sub MenuLibraryAlbumTracksReplaceLibrary_Click()
 Try CurrentLibraryItemToLibrary(False)
 If Error Then Message.Error("An error occurred")
End


Public Sub MenuLibraryAlbumTracksAppendPlaylist_Click()
  Dim selectedalbum As String = mylibrary.CellValue(librarygrid, librarygrid.row, mylibrary.ColumnIndex["Album"])
  Dim results As String[]
  
  Try results = mylibrary.PtableFromSearch(selectedalbum, ["Album"])
  If Error Then Goto ErrorLabel
  Try myplaylist.DoSort("Track", ByRef results)
  If Error Then Goto ErrorLabel
  Try myplaylist.ptable = myplaylist.ptable.Insert(results, True)
  If Error Then Goto ErrorLabel
  
  Searchfieldpls.text &= "|" & selectedalbum
  SearchFieldPLS_Click()
  Return

  ErrorLabel:
  Message.Error("An error occurred")
End

Public Sub MenuLibraryAlbumTracksReplacePlaylist_click()



  Try myplaylist.clear(playlistgrid)
  If Error Then Goto ErrorLabel
  
  Try MenuLibraryAlbumTracksAppendPlaylist_Click()
  If Error Then Goto ErrorLabel
  ' 
  ' 
  ' Dim selectedalbum As String = mylibrary.CellValue(librarygrid, librarygrid.row, mylibrary.ColumnIndex["Album"])
  ' Dim results As String[]
  ' Stop
  ' Try results = mylibrary.PtableFromSearch(selectedalbum, ["Album"])
  ' If Error Then Goto ErrorLabel
  ' Try myplaylist.DoSort("Album", ByRef results)
  ' If Error Then Goto ErrorLabel
  ' Try myplaylist.ptable = myplaylist.ptable.Insert(results, True)
  ' If Error Then Goto ErrorLabel
  ' 
  ' Searchfieldpls.text = selectedalbum
  ' SearchFieldPLS_Click()
  ' Return
  
  Return
  ErrorLabel:
  Message.Error("An error occurred")
End




Public Sub MenuOpenContainingFolderPopUp_Click()
  
  Dim item As String
  
  Try item = librarygrid[librarygrid.row, Mylibrary.ColumnIndex["Full Path"]].text
  If Error Then Return
  desktop.open(File.Dir(item))
  MenuOpenContainingFolderPopUp.visible = False
  
End

Public Sub MenuplaylistOpenFolder_Click()
  
  Dim item As String
  
  Try item = playlistgrid[playlistgrid.row, Myplaylist.ColumnIndex["Full Path"]].text
  If Error Then Return
  desktop.open(File.Dir(item))
  MenuplaylistOpenFolder.visible = False
  
End

Public Sub Playlistgrid_Menu()

  MenuplaylistOpenFolder.visible = True
  MenuplaylistOpenFolder.enabled = MyPlaylist.OnlyOneSelected(playlistgrid)
  MenuPlaylistZapSelected.Enabled = (PlaylistGrid.row >= 0) 'popup removefromdisc menu item only of something is selected
  MenuPlaylist.popup

End

Public Sub CleanVideoThumbs()
  
  Dim videofilter, videofile As String
  Dim videofiles As String[]
  Dim coverfile As String
  
  Dim safeplace As String

  safeplace = global.confpath & "/coverstmp"
  Try Mkdir safeplace
  'get a list of video files:
  videofilter = global.videofilter & global.UncommonVideoFilters & Upper(global.videofilter) & Upper(global.UncommonVideoFilters)
  videofilter = Replace(videofilter, "Flash*", "")
  videofilter = Replace(videofilter, "*", "")
  videofilter = Replace(videofilter, ";", ",")
  videofilter = Replace(videofilter, ",,", ",")
  videofilter = "*{" & videofilter & "}"
  videofiles = mylibrary.GetFullPaths(videofilter).Insert(myplaylist.GetFullPaths(videofilter))
  'generate coverfiles name and move them into a safe place
  For Each videofile In videofiles
    coverfile = (covermanager.Coverfile("", "", videofile))
    If Exist(coverfile, True) Then Shell "mv  '" & coverfile & "' " & safeplace & "/ &>/dev/null" Wait
  Next
  'remove all of the thumbnails
  Shell "rm " & global.confpath & "/covers/" & videofilter & ".jpg* &>/dev/null" Wait 
  'move the existing ones back
  Shell "mv " & safeplace & "/* " & global.confpath & "/covers/ " Wait
  'clean up
  Shell "rm -R " & safeplace

End

Public Sub MenuLibraryUpdate_popup_Click()
  
  MenuLibraryUpdate_Click()
  
End

Public Sub MenuLibraryUpdate_Click()
  
  Dim removedfiles As String[]
  Dim Watcheddirs As String = ""
  Dim ExcludedDirs As String = ""
  Dim i, j, AnswerRemove As Integer
  
  If Not global.LSyncing Then
    'show the progressbar and disable library:
    Leftsidetabs[0].visible = True
    Leftsidetabs.Index = 0
    fmain.WaitPanel.visible = True
    MyLibraryProgressBar.value = 0
    MyLibraryProgressBar.visible = True
    MyLibraryProgressBar.h = 32
    playlistgrid.Enabled = False
    LibraryGrid.Enabled = False
    Librarygrid.visible = False
    Panel2.visible = False
    
    Searchfield.Enabled = False
    Application.busy = True
    global.LSyncing = True
    fmain.WaitPanel.text = Global.LSyncingMessage
    fmain.mouse = mouse.Wait
    GeneralOptions.NOPARSEVBox2.mouse = Mouse.Wait
    GeneralOptions.NOPARSEVBox2.enabled = False
    Wait 0.1
    FMain.MenuLibraryUpdate_Click()
    Debug "Started at: " & Time
    Debug
    'ask user if he wants to delete non existend files
    'AnswerRemove = Message.Question(("Do you also want to remove non existent files from library?"), ("Remove"), ("Don't remove"))
    AnswerRemove = MyQuestion.Ask(("Do you also want to remove non existent files from library?"), ("Remove"), ("Don't remove"))
    If AnswerRemove = 1 Then
      'remove non existing files
      removedfiles = MyLibrary.RemoveNonExisting()
      Debug "Removing old video thumbnails"
      CleanVideoThumbs()
      Debug "Done"
      Debug
    Endif
    
    For i = 0 To GeneralOptions.NoParseWatchedListbox.count - 1
      WatchedDirs = Watcheddirs & GeneralOptions.NoParseWatchedListbox[i].text & "\n"
    Next 'i
    
    For i = 0 To GeneralOptions.NoParseExcludedListbox.count - 1
      'check if excludeddir is matched by included one, we need this to calculate total files number for progressbar...
      For j = 0 To GeneralOptions.NoParseWatchedListbox.count - 1
        If (GeneralOptions.NoParseExcludedListbox[i].text) Like (GeneralOptions.NoParseWatchedListbox[j].text & "/*") Then
          ExcludedDirs = ExcludedDirs & GeneralOptions.NoParseExcludedListbox[i].text & "\n"
          Break
        Endif
      Next 'j
      
    Next 'i
    MyLibrary.FilesToProcess = Global.GetTotalFiles(WatchedDirs, False) - Global.GetTotalFiles(ExcludedDirs, False)
    MyLibraryProgressBar.value = 0 '(it will be updated by MyLibrary.add())
    
    'add every file found in watchedDirs
    For i = 0 To GeneralOptions.NoParseWatchedListbox.count - 1
      MyLibrary.SyncSortedTable() '<-necessary for MyLibrary.isdupe() function
      Try MyLibrary.AddDir(LibraryGrid, GeneralOptions.NoParseWatchedListbox[i].text, GeneralOptions.NoParseExcludedListbox)
    Next 'i
    
    MyLibrary.SyncSortedTable() '<-necessary for MyLibrary.isdupe() function
    
    'reset the progressbar
    MyLibraryProgressBar.h = 0
    MyLibraryProgressBar.visible = False
    MyLibrary.FilesToProcess = 0
    MyLibrary.FilesProcessed = 0
    MyLibraryProgressBar.value = 0
    playlistgrid.Enabled = True
    LibraryGrid.Enabled = True
    LibraryGrid.visible = True
    Panel2.visible = True
    fmain.WaitPanel.visible = False
    Searchfield.Enabled = True
    fmain.Mouse = mouse.Default
    
    UpdateSearchResults(MyLibrary, LibraryGrid, fmain.FullyLoaded, Searchfield.text)
    global.LSyncing = False
    GeneralOptions.NOPARSEVBox2.mouse = Mouse.Default
    GeneralOptions.NOPARSEVBox2.enabled = True
    
    Try MyAlbumsLib.Init(mylibrary, AlbumGridView, searchfieldalbums.text)
    If Error Then Debug "Error while initializing albums view"
    Try MyAlbumsLib.Arrange(generaloptions.IconWidthAlbums.text, albumviewtexlen)
    If Error Then Debug "Error while Arranging albums view"
    Debug "Ended at: " & Time
    Debug
  Endif
  
End

Public Sub MenuLibraryWatch_Click()
  
  If (Not global.initearlyformsdone) Then InitEarlyForms()
  GeneralOptions.show
  GeneralOptions.TabStrip1.index = Global.TabIndexByName(("Library"), GeneralOptions.TabStrip1)
  
End

Public Sub SearchLabel_DblClick()
  
  Searchfields.show
  
End

Public Sub MenuItemsUpdate_Click()

  Debug "start at " & Time
  If LibraryGrid.Rows.count > 0 Then
    MyLibrary.UpdateSelected(LibraryGrid)
    'UpdateSearchResults(MyLibrary, LibraryGrid, fmain.FullyLoaded, Searchfield.text)
  Endif
  Debug "end at " & Time
  Debug

End

Public Sub MenuItemsUpdatePls_Click()

  If PlaylistGrid.Rows.count > 0 Then
    MyPlaylist.UpdateSelected(PlaylistGrid)
    'SearchFieldPLS_Click()
  Endif

End

Public Sub CopyRow(SourceList As PlaylistClass, SourceRow As Integer, DestList As PlaylistClass)
  'Append SearchTable row from sourcelist into Ptable DestList

  DestList.Ptable.add(SourceList.SearchTable[SourceRow])
  
End

Private Sub FromLibraryToPlaylist()

  Dim r As Integer
  For r = 0 To LibraryGrid.Rows.count - 1
    If LibraryGrid.Rows[r].Selected Then CopyRow(MyLibrary, r, MyPlaylist)
  Next 'r
  UpdateSearchResults(MyPlaylist, PlaylistGrid, fmain.FullyLoaded, SearchfieldPLS.text)

End

Public Sub MenuLibraryAddToPlaylist_Click()
  
  FromLibraryToPlaylist()
  
End

'-----------------------------------

Public Sub CalcTotalLengthInfoOn(MyLibrary As Playlistclass, Playlistgrid As Gridview, InfoWidget As Label)
  
  Dim Answer As String[]
  Dim pretext, PostText As String
  
  answer = Split(MyLibrary.GetSelectedAndLength(Playlistgrid), ";")
  PreText = ("Selected: ") & answer[0] & "/" & answer[1]
  PostText = "[" & answer[2] & "] / [" & answer[3] & "]"
  InfoWidget.text = PreText & "  -  " & PostText
  
End

Public Sub LibraryGrid_Select()
  
  TimerCalcTotalLengthLib = New Timer As "TimerCalcTotalLengthLib"
  TimerCalcTotalLengthLib.delay = 100
  TimerCalcTotalLengthLib.stop
  TimerCalcTotalLengthLib.start
  
  Try Media_Next_path = LibraryGrid[LibraryGrid.row, MyLibrary.Columnindex["Full Path"]].text
  Try filetaglabel.text = MyLibrary.GetValue(MyLibrary.SearchTable[librarygrid.row], "Full Path")
  
  If Error Then Return
  tagbox1.text = Trim(MyLibrary.GetValue(MyLibrary.SearchTable[librarygrid.row], "Album"))
  tagbox2.text = Trim(MyLibrary.GetValue(MyLibrary.SearchTable[librarygrid.row], "Artist"))
  tagbox3.text = Trim(MyLibrary.GetValue(MyLibrary.SearchTable[librarygrid.row], "Title"))
  tagbox4.text = Trim(MyLibrary.GetValue(MyLibrary.SearchTable[librarygrid.row], "Year"))
  tagbox5.text = Trim(MyLibrary.GetValue(MyLibrary.SearchTable[librarygrid.row], "Genre"))
  tagbox6.text = Trim(MyLibrary.GetValue(MyLibrary.SearchTable[librarygrid.row], "Track"))
  tagbox7.text = Trim(MyLibrary.GetValue(MyLibrary.SearchTable[librarygrid.row], "Comment"))

End

Public TimerCalcTotalLengthLib As Timer 

Public Sub TimerCalcTotalLengthLib_Timer()

  Dim howmany As Integer
  HowMany = MyLibrary.HowManySelected(librarygrid)
  If howmany > 1 Then
    LibrarySelInfo.visible = True
    CalcTotalLengthInfoOn(Mylibrary, Librarygrid, LibrarySelInfo)
    Media_Next_path = LibraryGrid[LibraryGrid.row, MyLibrary.Columnindex["Full Path"]].text
  Else
    LibrarySelInfo.visible = False
  Endif
  TimerCalcTotalLengthLib.stop

End

Public TimerCalcTotalLengthPls As Timer 

Public Sub TimerCalcTotalLengthPls_Timer()

  PlayListSelInfobox.visible = True
  CalcTotalLengthInfoOn(myplaylist, playlistgrid, PlayListSelInfo)
  Try Media_Next_path = playlistgrid[playlistgrid.row, myplaylist.Columnindex["Full Path"]].text
  TimerCalcTotalLengthPls.stop

End

Private movingitems As Boolean = False

Public Sub PlayListGrid_Select()

  If Not fmain.fullyloaded Then Return
  If Movingitems Then Return 'spare cpu cycles when changing playlist items order
  
  TimerCalcTotalLengthPls = New Timer As "TimerCalcTotalLengthPls"
  TimerCalcTotalLengthPls.delay = 100
  TimerCalcTotalLengthPls.stop
  TimerCalcTotalLengthPls.start
  
  Try Media_Next_path = PlaylistGrid[PlaylistGrid.row, MyPlaylist.Columnindex["Full Path"]].text
  Try filetaglabel.text = myplaylist.GetValue(myplaylist.SearchTable[playlistgrid.row], "Full Path")
  
  If Error Then Return
  tagbox1.text = myplaylist.GetValue(myplaylist.SearchTable[playlistgrid.row], "Album")
  tagbox2.text = myplaylist.GetValue(myplaylist.SearchTable[playlistgrid.row], "Artist")
  tagbox3.text = myplaylist.GetValue(myplaylist.SearchTable[playlistgrid.row], "Title")
  tagbox4.text = myplaylist.GetValue(myplaylist.SearchTable[playlistgrid.row], "Year")
  tagbox5.text = myplaylist.GetValue(myplaylist.SearchTable[playlistgrid.row], "Genre")
  tagbox6.text = myplaylist.GetValue(myplaylist.SearchTable[playlistgrid.row], "Track")
  tagbox7.text = myplaylist.GetValue(myplaylist.SearchTable[playlistgrid.row], "Comment")
  
End

Public Sub dvbtgrid_Select()
  
  Try Media_Next_path = dvbtgrid[dvbtgrid.row, MyDVBTList.Columnindex["Full Path"]].text
  Try filetaglabel.text = MyDVBTList.GetValue(MyDVBTList.SearchTable[dvbtgrid.row], "Full Path")
  If Error Then Return
  
End

Public Sub MenuSearch_Click()
  
  Searchfields.show
  
End

Public Sub UpdateTabs()
  'force a select to handle the correct item to tag
  
  If TabSelectedLibrary() Then
    LibraryGrid_Select()
  Else If TabSelectedPlaylist() Then
    PlaylistGrid_Select()
  Else If TabSelectedShoutcast() Then
    If fullyloaded Then ShoutCast_Select()
  Else If TabSelectedyoutube() Then
    If fullyloaded Then Youtube_Select()
  Else If TabSelectedAlbums() Then
    If fullyloaded Then Albums_Select()
  Endif
  
  HBox2.visible = (TabSelectedLibrary() Or TabSelectedPlaylist() Or tabselectedcdda() Or TabSelectedBrowse() Or TabselectedAlbums())
  SearchLabel.enabled = Not (tabselectedcdda() Or tabselectedbrowse())
  Searchfield.enabled = SearchLabel.enabled
  SearchfieldPLS.enabled = SearchLabel.enabled
  shufflepls.enabled = SearchLabel.enabled

End

Public Sub Leftsidetabs_MouseWheel()
  
  UpdateTabs()
  
End

Public Sub EnableDisableTagBtn()

  Dim tablib, tabpls, tabalbum As Boolean
  tablib = TabSelectedLibrary()
  tabpls = TabSelectedPlaylist() 'Or TabSelectedBrowse()
  tabalbum = TabSelectedAlbums()
  
  UpdateTabs()
  If TabSelectedyoutube() Then 
    TogglePls.Reparent(hbox13)
  Else 
    TogglePls.Reparent(hbox2)
  Endif
  
  If fmain.fullyloaded Then 
    TagEditorBtn.enabled = TabLib Or TabPls
  Endif
  
  Searchfield.Visible = tablib
  SearchfieldPLS.Visible = tabpls
  searchfieldalbums.visible = tabalbum
  
  If Not (tabpls Or tablib) Then
    If EditTagModeSwitch1.Checked Then TagEditorBtn_click()
  Endif 
  
End

Public Sub LeftSideTabs_Click()
  EnableDisableTagBtn()
  resizerows(librarygrid)
  resizerows(playlistgrid)
  resizerows(dvbtgrid)
  If TabSelectedAlbums() Then
    If fullyloaded Then 
      Wait
      MyAlbumsLib.Init(mylibrary, AlbumGridView, SearchFieldAlbums.text)
      MyAlbumsLib.Arrange(generaloptions.IconWidthAlbums.text, albumviewtexlen)
    Endif
      Return
  Endif

  If tabselectedbrowse() Then
    Wait 
    FileView1_beforeArrange()
    FileView1_Arrange()
  Endif

End

Public Sub LeftSideTabs_KeyRelease()

  UpdateTabs()

End

Public Sub MenuAddUri_Click()
  
  AddUriForm.show
  
End

Public Sub OpenNetworkBTN_Click()
  
  AddUriForm.show
  
End

Public Sub MenuOpenUri_Click()
  
  AddUriForm.show
  
End

'---Playlist Cut/copy/paste/delete-------------------------------

Private ClipboardRows As New String[]

Public Sub MoveUpPlsBTN_MouseWheel()
  
  If mouse.Delta > 0 Then
    MoveUpPlsBTN_Click()
  Else
    MoveDownPlsBTN_Click()
  Endif
  
End

Public Sub MoveDownPlsBTN_MouseWheel()
  
  If mouse.Delta > 0 Then
    MoveUpPlsBTN_Click()
  Else
    MoveDownPlsBTN_Click()
  Endif
  
End

Public Sub MoveUpPlsBTN_Click()
  
  Dim howmanyselected As Integer
  Dim i, j As Integer = 0
  
  MovingItems = True
  'find the index of the first selected row:
  While Not (playlistgrid.Rows[i].Selected Or i = playlistgrid.Rows.count)
    i = i + 1
  Wend
  
  If i > 0 Then
    MovingItems = True
    CutSelectedRows()
    howmanyselected = ClipboardRows.Count
    playlistgrid.scrolly = playlistgrid.scrolly - playlistgrid.Rows.H
    PasteSelectedRows(i - 1)
    
    'SELECT the items again:
    playlistgrid.UnSelectAll()
    For j = (i - 1) To (i + HowManySelected - 2)
      playlistgrid.Rows[j].selected = True
    Next 'j
  Endif
  Wait 0.2
  MovingItems = False
  
End

Public Sub MoveDownPlsBTN_Click()
  
  Dim howmanyselected As Integer
  Dim i, j As Integer
  MovingItems = True
  'find the index of the Last selected row:
  i = playlistgrid.Rows.count - 1
  While Not (playlistgrid.Rows[i].Selected Or i = 0)
    i = i - 1
  Wend
  If i < (playlistgrid.Rows.count - 1) Then
    CutSelectedRows()
    howmanyselected = ClipboardRows.Count
    PasteSelectedRows(i - howmanyselected + 2)
    playlistgrid.scrolly = playlistgrid.scrolly + playlistgrid.Rows.H
    'SELECT the items again:
    playlistgrid.UnSelectAll()
    For j = (i - howmanyselected + 2) To (i + 1)
      playlistgrid.Rows[j].selected = True
    Next 'j
  Endif
  Wait 0.2
  MovingItems = False
  
End

Public Sub PasteSelectedRows(Optional TargetRowOverride As Integer = -1)
  
  Dim i As Integer
  
  Dim TargetRow As Integer
  Dim TotalRows As Integer = ClipboardRows.count - 1
  
  If TargetRowOverride <> -1 Then
    TargetRow = TargetRowOverride
  Else
    TargetRow = Playlistgrid.row + 1
  Endif
  
  For i = 0 To (ClipboardRows.count - 1)
    If targetrow = -1 Then targetrow = PlayListGrid.Rows.count
    
    MyPlaylist.SearchTable.Add(ClipboardRows[totalrows - i], targetrow + i)
    MyPlaylist.PTable.Add(ClipboardRows[i], targetrow + i)
    PlayListGrid.Rows.Insert(targetrow + i)
    playlistgrid.Rows[targetrow + i].text = ClipboardRows[totalrows - i]
  Next 'i
  ClipboardRows.clear
  playlistgrid.row = targetrow
  'playlistgrid.Rows.h = LibraryGrid.Font.TextHeight("^_") + global.rowpadding
  
End

Public Function CopySelectedRows()
  'prepare the dragging, fill draggingrows
  
  Dim i As Integer = PlayListGrid.Rows.count - 1

  ClipboardRows.clear
  While i >= 0 'for every selected rows in playlistgrid
    If PlayListGrid.Rows[i].selected Then
      ClipboardRows.Add(MyPlaylist.SearchTable[i]) 'copy the row from searchtable
    Endif
    i = i - 1
  Wend
  
End

Public Sub CutSelectedRows()
  
  CopySelectedRows()
  'playlistgrid.Rows.h = LibraryGrid.Font.TextHeight("^_") + global.rowpadding
  MyPlaylist.DeleteSelected(Playlistgrid, True)
  
End

Public Sub MenuCopyRows_Click()
  
  CopySelectedRows()
  
End

Public Sub MenuCut_Click()
  
  CutSelectedRows()
  
End

Public Sub MenuPlaylistDelete_Click()

  MyPlaylist.DeleteSelected(Playlistgrid, True)

End

Public Sub MenuLibraryDeleteSelected_Click()

  MyLibrary.DeleteSelected(Librarygrid, True)

End

Public Sub MenuPaste_Click()
  
  PasteSelectedRows()
  
End

Public Sub MenuClearLibrary_Click()
  
  If Not (MyQuestion.ask(("Are you sure you want to clear your library?"), ("Don't clear my library"), ("Clear my library")) = 1) Then
    MyLibrary.clear(LibraryGrid)
    LibraryGrid_Select()
    UpdateSearchResults(mylibrary, librarygrid, True, Searchfield.text)
  Endif
  
End

Public Sub MenuPlaylistDeleteAll_Click()

  If Not (Message.delete(("Are you sure you want to clear the Playlist?"), ("Don't clear the playlist"), ("Clear the playlist")) = 1) Then
    MyPlaylist.clear(Playlistgrid)
    PlaylistGrid_Select()
    UpdateSearchResults(myplaylist, playlistgrid, True, SearchfieldPLS.text)
  Endif

End

'/---Playlist Cut/copy/paste/delete-------------------------------

Public Sub PlaylistGrid_Drop()
  
  Dim droppedfile, ext As String
  Dim droppedfiles As String[] = Split(Drag.Paste("text/uri-list"), "\n\r", "", True)
  Dim IsFile, IsDirectory, IsUri, IsPlayList As Boolean
  
  MyPlaylist.SyncSortedTable()  '<-necessary for MyPlaylist.isdupe() function
  For Each DroppedFile In Droppedfiles
    If Trim(DroppedFile) <> "" Then
      droppedfile = DConv(Global.NoFileSuffix(Global.FormatDrag(droppedfile)))
      ISFile = False
      IsDirectory = False
      IsUri = False
      Try ISFile = (Stat(droppedfile, True).type = gb.file)
      Try IsDirectory = (Stat(droppedfile, True).type = gb.Directory)
      ext = Upper(File.Ext(Droppedfile))
      Try IsPlaylist = ((ext = "M3U") Or (ext = "PLS") Or (ext = "XPL"))
      IsUri = (droppedfile Like "*://*")
      If IsPlayList And (Not isuri) Then
        MyPlaylist.LoadFile(droppedfile, PlayListGrid, True)
      Else If IsFile Then
        MyPlaylist.AddFile(Playlistgrid, DroppedFile, False, False)
      Else If IsURI Then
        MyPlaylist.AddFile(Playlistgrid, Droppedfile, GeneralOptions.SlowTagsCHK.value, True)
      Else If IsDirectory 'we won't add directories to playlist
      Endif
    Endif
  Next
  UpdateSearchResults(myplaylist, playlistgrid, True, SearchfieldPLS.text)
  ScrollLeft()
  
End

Function BigFactorTable(w As Integer) As Integer

  Select Case w
    Case 16
      Return 4
    Case 24
      Return 4
    Case 32
      Return 3
    Case 48
      Return 3
    Case 64
      Return 2
    Case 96
      Return 2
    Case 128
      Return 2
    Case 160
      Return 2
    Case Else
      Return 2
  End Select

End

Public Sub resizerows(mygrid As Gridview)

  Dim rowheight As Integer
  Dim rowpadding As Integer = global.rowpadding
  
  If mygrid.name <> "DVBTGrid" Then
    rowheight = CInt(generaloptions.IconWidthCombobox.text) '+ rowpadding 
  Else
    rowheight = dvbtgrid.Font.TextHeight("|")
    rowheight *= 1.2
  Endif
  If mygrid.Rows.h <> ((rowheight) + rowpadding) Then mygrid.Rows.h = ((rowheight) + rowpadding)

End

Public Sub Gridviews_Data(MyGrid As GridView, MyLibrary As Playlistclass, Row As Integer, Column As Integer)

  Dim fullpath As String
  Dim artist, album As String
  Dim rowheight As Integer
  Dim rowpadding As Integer = global.rowpadding
  
  Dim bigfactor As Integer = 1
  Dim filefound As Boolean = True
  
  If mygrid.data = Null Then Return
  If Not fmain.FullyLoaded Then Return
  If Not (fmain.visible Or fsform.FullScreen) Then Return
  
  If mygrid.name <> "DVBTGrid" Then
    rowheight = CInt(generaloptions.IconWidthCombobox.text) '+ rowpadding 
  Else
    rowheight = dvbtgrid.Font.TextHeight("|")
    rowheight *= 1.2
    mygrid.Columns[0].Width = dvbtgrid.Font.TextWidth("0") * 120
  Endif
  
  'draw an icon (or a cover) on the first column
  If column = 0 Then
    Try fullpath = Mylibrary.CellValue(MyGrid, Row, Myplaylist.Columnindex["Full Path"])
    
    If mygrid.name <> "DVBTGrid" Then
      artist = mylibrary.CellValue(mygrid, row, mylibrary.ColumnIndex["Artist"])
      album = mylibrary.CellValue(mygrid, row, mylibrary.ColumnIndex["Album"])
      
      If Not myplaylist.ISURI(fullpath) Then
        If covermanager.filesnotfound.Find(fullpath) <> -1 Then
          mygrid.Data.picture = picture["icon:/" & CStr((rowheight - rowpadding + covermanager.shadowoffset) * bigfactor) & "/error"]
          filefound = False
        Endif
      Endif
      '---
      If filefound Or (Lower(fullpath) Like "*dvb*://*") Then
        If GeneralOptions.ShowCoversInListChk.value Then  'the user want covers
          If Not Exist(covermanager.Coverfile(artist, album, fullpath)) Then 'se il coverfile non esiste
            If covermanager.IsUncovered(fullpath) Then '...e non puòessere creato
              MyGrid.Data.Picture = covermanager.coverpicture(covermanager.Coverfile(artist, album, fullpath), fullpath, (rowheight - rowpadding) * bigfactor) 'ritorna la coverdi Default
            Else 'il coverfile non esiste, ma potrebbe essere creato
              covermanager.QueueThumb(MyGrid, fullpath, artist, album, row, (rowheight - rowpadding) * bigfactor) 'prova a crearlo
            Endif
          Else 'il coverfile c'è
            MyGrid.Data.Picture = covermanager.coverpicture(covermanager.Coverfile(artist, album, fullpath), fullpath, (rowheight - rowpadding) * bigfactor)
          Endif
        Else 'the user don't want any cover
          MyGrid.Data.Picture = covermanager.DefaultLibraryIcon(fullpath, (rowheight - rowpadding) * bigfactor)
        Endif 'user wanted covers
      Endif 'filefound was true
      
    Else 'for dvbt
      MyGrid.Data.Picture = covermanager.DefaultLibraryIcon(fullpath, (rowheight - rowpadding) * bigfactor)
    Endif
    
  Endif 'column was 0
  
  If (row Mod 2) = 0 Then
    MyGrid.data.background = MyGrid.Background
  Else
    MyGrid.data.background = Global.Alternatecolor
  Endif
  If row = hirow Then mygrid.Data.Font.bold = True
  MyGrid.data.text = MyLibrary.CellValue(MyGrid, row, column)

End

Public Sub OLD_Gridviews_Data(MyGrid As GridView, MyLibrary As Playlistclass, Row As Integer, Column As Integer)

  Dim fullpath As String
  Dim artist, album As String
  Dim rowheight As Integer
  
  Dim bigfactor As Integer = 1
  Dim filefound As Boolean = True
  Dim rowpadding As Integer = global.rowpadding
  Dim prevscrollX As Integer
  
  If Not fmain.FullyLoaded Then Return
  If Not fmain.visible Then Return
  
  If mygrid.name <> "DVBTGrid" Then
    rowheight = CInt(generaloptions.IconWidthCombobox.text) '+ rowpadding 
  Else
    rowheight = dvbtgrid.Font.TextHeight("|")
    rowheight *= 1.2
    mygrid.Columns[0].Width = dvbtgrid.Font.TextWidth("0") * 120
  Endif
  
  'If mygrid.Rows.H <> (rowheight + rowpadding) Then mygrid.Rows.H = rowheight + rowpadding
  If (row = hirow) Then 
    If row <> 0 Then bigfactor = BigFactorTable(generaloptions.IconWidthCombobox.text)
    'rowpadding rowpa
  Else If (mygrid.Rows[row].h <> rowheight) Then 
    bigfactor = 1
  Endif
  
  'mygrid.Rows[row].h = (rowheight * bigfactor) + rowpadding '* bigfactor
  'If mygrid.Rows.h <> ((rowheight * bigfactor) + rowpadding) Then mygrid.Rows.h = ((rowheight * bigfactor) + rowpadding)
  'If mygrid.Rows.h <> ((rowheight) + rowpadding) Then mygrid.Rows.h = ((rowheight * bigfactor) + rowpadding)
  If mygrid.Rows.h <> ((rowheight) + rowpadding) Then mygrid.Rows.h = ((rowheight) + rowpadding)
  If mygrid.Rows[row].h <> ((rowheight * bigfactor) + rowpadding) Then
    mygrid.Rows[row].h = ((rowheight * bigfactor) + rowpadding)
    prevscrollx = mygrid.Scrollx
    mygrid[row, column].EnsureVisible
    mygrid.scrollx = prevscrollx
  Endif
  
  'draw an icon (or a cover) on the first column
  If column = 0 Then
    Try fullpath = Mylibrary.CellValue(MyGrid, Row, Myplaylist.Columnindex["Full Path"])
    
    If mygrid.name <> "DVBTGrid" Then
      artist = mylibrary.CellValue(mygrid, row, mylibrary.ColumnIndex["Artist"])
      album = mylibrary.CellValue(mygrid, row, mylibrary.ColumnIndex["Album"])
      
      If Not myplaylist.ISURI(fullpath) Then
        If covermanager.filesnotfound.Find(fullpath) <> -1 Then
          mygrid.Data.picture = picture["icon:/" & CStr((rowheight - rowpadding + covermanager.shadowoffset) * bigfactor) & "/error"]
          filefound = False
        Endif
      Endif
      '---
      If filefound Or (Lower(fullpath) Like "*dvb*://*") Then
        If GeneralOptions.ShowCoversInListChk.value Then  'the user want covers
          If Not Exist(covermanager.Coverfile(artist, album, fullpath)) Then 'se il coverfile non esiste
            If covermanager.IsUncovered(fullpath) Then '...e non puòessere creato
              MyGrid.Data.Picture = covermanager.coverpicture(covermanager.Coverfile(artist, album, fullpath), fullpath, (rowheight - rowpadding) * bigfactor) 'ritorna la coverdi Default
            Else 'il coverfile non esiste, ma potrebbe essere creato
              covermanager.QueueThumb(MyGrid, fullpath, artist, album, row, (rowheight - rowpadding) * bigfactor) 'prova a crearlo
            Endif
          Else 'il coverfile c'è
            Try MyGrid.Data.Picture = covermanager.coverpicture(covermanager.Coverfile(artist, album, fullpath), fullpath, (rowheight - rowpadding) * bigfactor)
          Endif
        Else 'the user don't want any cover
          MyGrid.Data.Picture = covermanager.DefaultLibraryIcon(fullpath, (rowheight - rowpadding) * bigfactor)
        Endif 'user wanted covers
      Endif 'filefound was true
      
    Else 'for dvbt
      MyGrid.Data.Picture = covermanager.DefaultLibraryIcon(fullpath, (rowheight - rowpadding) * bigfactor)
    Endif
    
  Endif 'column was 0
  
  If (row Mod 2) = 0 Then
    Try MyGrid.data.background = MyGrid.Background
  Else
    Try MyGrid.data.background = Global.Alternatecolor
  Endif
  If row = hirow Then mygrid.Data.Font.bold = True
  Try MyGrid.data.text = MyLibrary.CellValue(MyGrid, row, column)

End

Public Sub LibraryGrid_Data(Row As Integer, Column As Integer)

  Gridviews_Data(LibraryGrid, mylibrary, Row, Column)

End

Public Sub PlaylistGrid_Data(Row As Integer, Column As Integer)

  Gridviews_Data(PlayListGrid, myplaylist, Row, Column)

End

Public Sub DVBTGRID_Data(Row As Integer, Column As Integer)
  
  Gridviews_Data(DVBTGrid, MyDVBTList, Row, Column)
  
End

Public Sub MenuManageProfiles_Click()
  
  ProfileManager.show
  
End

Public Sub CopySelectedToClipboard(MyLibrary As Playlistclass, MyGrid As Gridview)
  
  Dim i As Integer = MyGrid.Rows.count - 1
  Dim MyClipboard As String = ""
  Dim URI As String = ""
  
  While i >= 0 'for every selected rows in playlistgrid
    If MyGrid.Rows[i].selected Then
      URI = MyLibrary.GetValue(MyLibrary.SearchTable[i], "Full Path")
      If Not (URI Like "*://*") Then URI = "file://" & URI
      URI = URI & "\r\n"
      MyClipboard = MyClipboard & URI
    Endif
    i = i - 1
  Wend
  Clipboard.copy(MyClipboard, "text/uri-list")
  
End

Public Sub MenuPlsCopyToClipboard_Click()
  
  CopySelectedToClipboard(MyPlaylist, Playlistgrid)
  
End

Public Sub MenuLibCopyToClipboard_Click()
  
  CopySelectedToClipboard(MyLibrary, Librarygrid)
  
End

Public Sub ShowVolBtn2_Click()
  
  ButtonOpen_Click
  
End

Public Sub SwitchSubBtn_Click()
  If Not (mplayer.ProcessRunningOvr()) Then Return
  streamssubtitlesmenu.Popup
End

Public Sub SwitchAudioBTN_Click()

  If Not (mplayer.ProcessRunningOvr()) Then Return
  If Streamsaudiomenu.enabled Then
    Streamsaudiomenu.Popup
  Else
    mplayer.Send("Switch_Audio")
  Endif
  
End

Public Sub Form_Leave()
  
  MouseOnFmain = False
  
End

Public Sub Form_Enter()

  MouseOnFmain = True
End

Public Sub Statusbar_MouseDown()
  'Cycle through possible Timeformats:
  TimeFormat = TimeFormat + 1
  If Timeformat = 4 Then TimeFormat = 0
End

Public Sub FullScreenBtn_Click()
  
  If Not Tageditmode Then 
    FullScreenSwitch()
  Endif

End

Public Sub SlideTimer_Timer()
  'Hide and show bottom vbox smoothly
  
  Dim MaxHeigth As Integer = controlframe.h + Statusbar1.h
  
  If Not (BottomVbox.visible) Then BottomVbox.H = 0
  If DoslideUp Then
    If BottomVbox.H < MaxHeigth Then
      If (Not BottomVbox.visible) Then BottomVbox.visible = True
      If BottomVbox.h + 8 < MaxHeigth Then
        BottomVbox.h = BottomVbox.h + 8
      Else
        BottomVbox.h = MaxHeigth
      Endif
    Else
      SlideTimer.stop
    Endif
    
  Else If BottomVbox.H >= 8 Then
    BottomVbox.h = BottomVbox.h - 8
  Else
    SlideTimer.stop
    BottomVbox.Visible = False
  Endif
  
End

Public Sub MenuConfigureGeneralVideo_Click()
  
  If (Not global.initearlyformsdone) Then InitEarlyForms()
  GeneralOptions.MenuLoadDefault_Click()
  GeneralOptions.AlreadyLoaded = True
  Try GeneralOptions.TabStrip1.index = Global.TabIndexByName(("Video"), GeneralOptions.TabStrip1)
  GeneralOptions.show
  
End

Public Sub MenuConfigureGeneralAudio_Click()
  
  If (Not global.initearlyformsdone) Then InitEarlyForms()
  GeneralOptions.MenuLoadDefault_Click()
  GeneralOptions.AlreadyLoaded = True
  Try GeneralOptions.TabStrip1.index = Global.TabIndexByName("Audio", GeneralOptions.TabStrip1)
  GeneralOptions.show
  
End

Public Sub MenuPlaylistZapSelected_Click()

  playlistgrid.enabled = False
  If (PlaylistGrid.row >= 0) Then
    If (MyQuestion.ask(("Are you sure you want to delete selected item(s) from disk?"), ("Don't Delete"), ("Yes, Delete")) = 2) Then
      MyPlaylist.EraseSelected(PlaylistGrid)
      MyPlaylist.DeleteSelected(Playlistgrid, True)
      Try playlistgrid.Current.EnsureVisible()
    Endif
  Endif
  playlistgrid.enabled = True

End

Public Sub MenuLibraryZapSelected_Click()

  librarygrid.enabled = False
  If (LibraryGrid.row >= 0) Then
    If (MyQuestion.Ask(("Are you sure you want to delete selected item(s) from disk?"), ("Don't Delete"), ("Yes, Delete")) = 2) Then
      MyLibrary.EraseSelected(Librarygrid)
      MyLibrary.DeleteSelected(Librarygrid, True)
      Try LibraryGrid.Current.EnsureVisible()
    Endif
  Endif
  librarygrid.enabled = True

End

Public Sub MenuCodecs_Click()
  
  If (Not global.initearlyformsdone) Then InitEarlyForms()
  
End

Public Sub Mysocket_Connection(RemoteHostIP As String)
  'just accept on localhost.
  
  host = Mysocket.Accept()
  
End

Public Sub socket_Read()

  Dim command As String = ""
  Line Input #Last, command
  Debug "command= " & command
  Debug
  Mysocket.close
  ExecuteRemote(command)
  Mysocket.Listen(1)

End

Public Sub ExecuteRemote(command As String)

  Dim parameter As String
  
  parameter = Mid(command, InStr(command, " ") + 1)
  Debug "command= " & command
  Debug "parameter= " & parameter
  Debug
  If command Like "append *" Then
    parameter = NoQuotes(parameter)
    Debug "URI= " & parameter
    Debug
    MyPlaylist.AddFile(playlistgrid, parameter, MyPlaylist.ISURI(parameter), MyPlaylist.ISURI(parameter))
    MyPlaylist.AutoSizeColumns(playlistgrid)
    GridRefreshWorkaround(playlistgrid)
  Else If command Like "play *" Then
    parameter = NoQuotes(parameter)
    Debug "URI= " & parameter
    Debug
    ButtonStop_Click()
    
    If Not global.IsAudioFile(parameter) Then 'raise xt7 only on video files
      fmain.raise
      fmain.Minimized = False
      fmain.Show
    Endif
    Play(parameter)
    If TabSelectedLibrary() Then
      Try librarygrid.rows[librarygrid.row].Selected = False
      Try librarygrid.row = mylibrary.FindRowByPath(librarygrid, parameter)
      Try librarygrid.rows[librarygrid.row].Selected = True
    Else If TabSelectedPlaylist() Then 
      Try playlistgrid.rows[playlistgrid.row].Selected = False
      Try myplaylist.row = myplaylist.FindRowByPath(playlistgrid, parameter)
      Try playlistgrid.rows[playlistgrid.row].Selected = True
    Endif
  Endif

End

Public Function NoQuotes(quoted As String) As String
  ' '/home/user/song.mp3' ->/home/user/song.mp3
  
  Dim out As String
  
  If Left(quoted) = "'" And Right(quoted) = "'" Then
    out = Mid(quoted, 2, Len(quoted) - 2)
    Return out
  Else
    Return quoted
  Endif
  
End

Public Function Requote(toquote As String) As String
  ' 'ciao' -> 'ciao'
  ' "ciao" -> "ciao"
  ' ciao -> 'ciao'
  ' 'ciao -> ''ciao'
  ' 'ciao" -> ''ciao"'
  
  Dim out As String
  
  If Left(toquote) = "'" And Right(toquote) = "'" Then
    Return out
  Endif
  If Left(toquote) = "\"" And Right(toquote) = "\"" Then
    Return out
  Endif
  Return "'" & toquote & "'"
  
End

Public Sub MenuShowLog_Click()
  
  LogWindow.show
  
End

Public VolumeFocused As Boolean = False

Public Sub VideoAreaGroup_Enter()
  If mplayer.ProcessRunningOvr() Then fmain.VideoBox.setfocus
  ' If Lower(mplayer.getP("fullpath")) Like "dvd://menu*" Then
  '   timerdvd.enabled = True
  ' Else
  '   timerdvd.enabled = False
  ' Endif
End

'Public Sub VideoAreaGroup_GotFocus()
  'VideoAreaGroup_Enter()
'End

' Public Sub VideoAreaGroup_Leave()
'   
'   timerdvd.enabled = False
'   
' End

Public Sub ShowVideoEq_Click()
  
  VideoEqualizer.visible = Not (VideoEqualizer.visible)
  
End

Public Sub ShowAudioEq_Click()
  If NewChains.visible Then
    NewChains.hide
      Else
    NewChains.show_audio_filters()                
    NewChains.show_audio_filter("equalizer")
  Endif  
End

Public Sub MenuHomepage_Click()
  
  Desktop.Open("http://xt7player.homelinux.org/xt7forum")
  
End

Public Sub MenuToolBarLocked_Click()
  
  MenuToolBarLocked.checked = Not MenuToolBarLocked.checked
  SetFlexSpaceVisibility(Not MenuToolBarLocked.checked)
  
End


Private Function want_dvd_menu() As Boolean
  Return MyQuestion.Ask(("How do you want to play the dvd?"), ("main title"), ("menu")) = 2
End


Public Sub MenuDvdDrive_Click()
  
   If (Not (Exist(GeneralOptions.DVDDeviceText.text))) Or (Trim(GeneralOptions.DVDDeviceText.text) = "") Then
    PopupDVDError()
    SetDvdTabVisibility(False)
    Return
  Endif
  
  
  Me.mouse = mouse.wait
  If Not GeneralOptions.AlreadyLoaded Then 
    GeneralOptions.MenuLoadDefault_Click()
    GeneralOptions.AlreadyLoaded = True
  Endif
  If want_dvd_menu() Then 
    Play("dvd://menu/" & generaloptions.DVDDeviceText.text)
      Else
    Play("dvd:///" & generaloptions.DVDDeviceText.text)
  Endif
  
  Me.mouse = mouse.default
  
End

Public Sub MenuDvdFolder_Click()
  Dim dpath As String
  If myDialog.SelectDirectory() Then Return
  dpath = DConv(myDialog.Path)
  If want_dvd_menu() Then 
    Play("dvd://menu/" & dpath)
      Else
    Play("dvd:///" & dpath)
  Endif
End

Public Sub MenuDvdFile_Click()
  Dim dpath As String
  myDialog.filter = ["*.iso;*.ISO;*.Iso", ("iso files"), "*", ("All files")]
  If myDialog.OpenFile() Then Return
  dpath = DConv(myDialog.Path)
  If want_dvd_menu() Then 
    Play("dvd://menu/" & dpath)
      Else
    Play("dvd:///" & dpath)
  Endif

End

Public Sub ButtonTag_Click()

  Dim tl As TagLib
  'Dim audiotag As New TagLib
  Dim MyGrid As GridView
  Dim Table As Playlistclass
  Dim row As Integer = 0
  Dim Filename As String
  
  Dim Err As Boolean = False
  Dim errormsg As String

  Librarygrid.enabled = False
  PlaylistGrid.enabled = False
  Last.enabled = False
  Fmain.mouse = mouse.Wait
  
  If TabSelectedLibrary() Then
    MyGrid = Librarygrid
    Table = MyLibrary
  Else If TabSelectedPlaylist() Then
    MyGrid = PlaylistGrid
    Table = MyPlaylist
  Else
    errormsg = ("Sorry, Audio tagging is only possible for library and playlist items\n")
    errormsg &= ("To tag this item, please add it to library or playlist first.")
    Message.Error(errormsg, ("Ok"))
    Return
  Endif
  'Tag the selected items
  For row = 0 To MyGrid.Rows.count - 1
    tl = New Taglib
    Filename = Table.GetValue(Table.SearchTable[row], "Full Path")
    filename = String$(1, filename) 'force a cast from string to string (?!)
    If MyGrid.Rows[row].selected Then
      If tl.Init(filename) Then 
        If AlbumCHK.value Then Err = (Err Or Not (tl.SetAlbum(tagbox1.text)))
        If ArtistCHK.value Then Err = (Err Or Not (tl.SetArtist(tagbox2.text)))
        If TitleCHK.value Then Err = (Err And Not (tl.SetTitle(tagbox3.text)))
        If GenreCHK.value Then Err = (Err And Not (tl.SetGenre(tagbox5.text)))
        If CommentCHK.value Then Err = (Err And Not (tl.SetComment(tagbox7.text)))
        If TrackCHK.value Then 
          If (Trim(tagbox6.text) <> "") Then Err = (Err And Not (tl.SetTrack(Trim(tagbox6.text))))
        Endif
        If YearCHK.value Then 
          If (Trim(tagbox4.text) <> "") Then Err = (Err And Not (tl.SetYear(Trim(tagbox4.text))))
        Endif
        If Not (err) Then
          tl.Save()
        Else
          Try tl.tlFree()
          Librarygrid.enabled = True 
          PlaylistGrid.enabled = True
          Last.enabled = True
          Fmain.mouse = mouse.default
          Return 
        Endif
        Mylibrary.UpdateTableAndGridTags(Librarygrid, Filename, tl.Album, tl.Artist, tl.Title, tl.MyYear, tl.Genre, tl.Track, tl.Comment)
        MyPlaylist.UpdateTableAndGridTags(Playlistgrid, Filename, tl.Album, tl.Artist, tl.Title, tl.MyYear, tl.Genre, tl.Track, tl.Comment)
      Endif
    Endif
  Next 'r
  If TabSelectedLibrary() Then
    Librarygrid.refresh
  Else If TabSelectedPlaylist() Then
    PlaylistGrid.refresh
  Endif
  Last.enabled = True
  Librarygrid.enabled = True
  PlaylistGrid.enabled = True  
  'SearchField_Click() '16/04/2012: useless?
  MyLibrary.AutoSizeColumns(Librarygrid)
  MyPlaylist.AutoSizeColumns(PlayListGrid)
  Fmain.mouse = mouse.default
  Wait 0.001

End

Public Sub EditTagModeSwitch1_Click()
  
  If Not fsform.FullScreen Then
    
    EditTagModeSwitch1.Checked = Not EditTagModeSwitch1.Checked
    TagEditMode = EditTagModeSwitch1.Checked
    If TagEditMode Then
      ShowAudioPanel(False)
      HBox4.background = Color.textbackground
      HBox4.Foreground = Color.TextForeground
      Rightsidepanel.background = rightsidepanel.Parent.Background
      BottomVbox.Reparent(zzzfake)
      tagpanel.Reparent(Rightsidepanel)
      BottomVbox.Reparent(rightsidepanel)
      tagpanel.visible = True
      
      OuterBox.visible = False
    Else
      Rightsidepanel.background = Color.Black
      tagpanel.visible = False
      
      OuterBox.visible = True
      If mplayer.ProcessRunningOvr() And GeneralOptions.CoverCHK2.value Then
        If mplayer.getP("audioonly") Then
          FillPropertiesGrid()
          CoverRefresh()
          ShowAudioPanel(True)
        Endif
      Else
        ShowAudioPanel(False)
      Endif
    Endif
  Endif
  
End

Public Sub Clearer_Click()
  
  Try Last.NEXT.text = " "
  
End

Public Sub Button2_Click()
  
  If TabSelectedPlaylist() Then
    PlayListGrid_Select()
  Else If TabSelectedLibrary() Then
    LibraryGrid_Select()
  Endif
  
End

Public Sub TagsCHK_Click()
  
  Last.next.next.enabled = Last.value
  
End

Public Sub TagsBox_GotFocus()
  
  Last.SELECTAll
  
End

Public Sub TagsBox_Activate()
  
  ButtonTag_Click()
  If AdvanceCHK.value Then
    If TabSelectedLibrary() Then
      MyLibrary.SelectNext(LibraryGrid, False)
    Else If TabSelectedPlaylist() Then
      MyPlayList.SelectNext(PlayListGrid, False)
    Endif
  Endif
  Last.setfocus
  
End

Public Sub MenuSavePls_Click()
  
  Dim PrevTitle As String
  Dim PrevFilter As String[]
  
  With Global
    Dialog.Path = .StartFolder & "/"
    PrevFilter = Dialog.filter
    Prevtitle = Dialog.title
    Dialog.Title = "Export a playlist"
    Dialog.filter = ["*.xpl", "Xt7 playlist", "*.m3u", "m3u playlist", "*.pls", "Winamp playlist"]
  End With
  If Dialog.SaveFile() Then Return
  Dialog.filter = PrevFilter
  Dialog.title = PrevTitle
  Try MyPlaylist.SaveAs(Dialog.Path)
  If Error Then Message.error(("There was an error while saving the playlist"), ("Ok"))

End

Public Sub MenuLoadPls_Click()
  
  Dim PrevTitle As String
  Dim PrevFilter As String[]
  
  With Global
    myDialog.Path = .StartFolder
    PrevFilter = myDialog.filter
    Prevtitle = myDialog.title
    myDialog.Title = "Load a playlist"
    myDialog.filter = ["*.xpl", "Xt7 playlist", "*.m3u", "m3u playlist", "*.pls", "Winamp playlist"]
  End With
  If myDialog.OpenFile() Then Return
  myDialog.filter = PrevFilter
  myDialog.title = PrevTitle
  MyPlaylist.LoadFile(myDialog.path, PlayListGrid)
  UpdateSearchResults(MyPlayList, PlayListGrid, fmain.FullyLoaded, SearchfieldPLS.text)
  
End

Public Sub MenuAppendPls_Click()
  
  Dim PrevTitle As String
  Dim PrevFilter As String[]
  
  With Global
    myDialog.Path = .StartFolder
    PrevFilter = myDialog.filter
    Prevtitle = myDialog.title
    myDialog.Title = "Load a playlist"
    myDialog.filter = ["*.xpl", "Xt7 playlist", "*.m3u", "m3u playlist", "*.pls", "Winamp playlist"]
  End With
  If myDialog.OpenFile() Then Return
  myDialog.filter = PrevFilter
  myDialog.title = PrevTitle
  MyPlaylist.LoadFile(myDialog.path, PlayListGrid, True)
  UpdateSearchResults(MyPlayList, PlayListGrid, fmain.FullyLoaded, SearchfieldPLS.text)
  
End

Public Sub SetACover(Album As String, Artist As String, filepath As String)
  
  Dim timeout As Integer = 15 ' how much to wait for the other fetch to finish
  Dim tmpmessage As String
  Dim JustFileCover As Boolean = False 'are we going to set a cover for just this file?
  Dim tl As New Taglib

  PreviousCoverFile = "NOPE"
  If CoverManager.fetching Then
    CoverManager.HitCancel = True
    Repeat
      Wait 0.1
      timeout = timeout - 1
    Until (CoverManager.fetching = False) Or (timeout = 0)
  Endif
  
  If Upper(filepath) Like "*.FLAC" Then
    If (Trim(Artist) = "") And (Trim(Album) = "") Then
      tl.init(filepath)
      Artist = tl.Artist
      Album = tl.Album
      tl.tlfree()
    Endif
  Endif
  
  If (Trim(Artist) = "") And (Trim(Album) = "") Then
    JustFileCover = True
    tmpmessage = ("\nso you are going to set a cover for this particular file/stream")
    Message.Info(("Artist Or Album tag information are required to set a cover") & tmpmessage, ("Ok"))
  Endif
  CoverManager.cachebar.value = 0
  If CoverManager.fetching Then
    Message.Info(("Another cover search is in progress, please wait for it to finish!"), "Ok")
    Return
  Endif
  If (CoverManager.ArtistText.text & CoverManager.AlbumText.text) <> Trim(Artist) & Trim(Album) Then
    Try CoverManager.CoverList.Clear
    Try CoverManager.CachePicture.Picture = picture.Load("null.png")
    Try CoverManager.CoverList.Refresh
    Try CoverManager.CachePicture.refresh
    CoverManager.ArtistText.text = Trim(Artist)
    CoverManager.AlbumText.text = Trim(Album)
    CoverManager.TextBox1.text = CoverManager.ArtistText.text & "," & CoverManager.AlbumText.text
    CoverManager.CachePicture.picture = AudioForm.CoverBox.Picture
    CoverManager.CachePicture.refresh
    CoverManager.Show()
    Wait 0.1
    If (Not Exist(CoverManager.Coverfile(CoverManager.ArtistText.text, CoverManager.AlbumText.text))) And Not JustFileCover Then
      CoverManager.textbox1_Click() 'start a fetch
    Endif
  Endif
  CoverManager.JustFileCover = JustFileCover
  CoverManager.MediaFileFullPath = filepath
  CoverManager.Show
  
End

Public Sub CoverBox_DblClick()

  covermanager.SetACover(mplayer.getP("fullpath"), mplayer.getP("artist"), mplayer.getP("album"))

End

Public Sub CloseTagEdBtn_Click()
  
  EditTagModeSwitch1_Click()
  
End

Public Sub DynaGuiToolbar_Menu()
  
  MenuConfigure.Popup()
  
End

Public Sub CompizHackTimer_Timer()
  
  'why compiz does not update itself?
  Fmain.x = fmain.screenx
  Fmain.y = fmain.screeny
  
End

Public Sub ShutOff_Click()
  
  ShutOFF.Checked = True
  ShutMEDIA.Checked = False
  ShutPLS.Checked = False
  Shutdown = "FALSE"
  Statusbar1.foreground = &F0F0F0&
  
End

Public Sub ShutMEDIA_Click()
  
  ShutOFF.Checked = False
  ShutMEDIA.Checked = True
  ShutPLS.Checked = False
  Shutdown = "MEDIA"
  Statusbar1.foreground = &FF5555&
  
End

Public Sub ShutPLS_Click()
  
  If ShufflePls.value Then
    Message.Warning(("Please, disable random playing first!"))
  Else
    If TogglePls.value = False Then TogglePls.value = True
    ShutOFF.Checked = False
    ShutMEDIA.Checked = False
    ShutPLS.Checked = True
    Shutdown = "PLS"
    Statusbar1.foreground = &FF8888&
  Endif
  
End

Public Sub Shutcfg_Click()
  
  GeneralOptions.Show()
  GeneralOptions.OptionsList["Misc"].selected = True
  
End

Public Sub AutoresizeAudioForm()
  
  Dim oggetto As Object
  Dim MaxLabel_12__16 As Integer = 0
  Dim MaxLabel_18__21 As Integer = 0
  Dim upperboxW As Integer = 0
  Dim lowerboxW As Integer = 0
  Dim labelheight As Integer
  
  For Each oggetto In audioform.VBox2.children
    If oggetto Is Label Then
      If oggetto.Font.TextWidth(oggetto.text) > MaxLabel_12__16 Then MaxLabel_12__16 = oggetto.Font.TextWidth(oggetto.text)
      
      'PRINT "oggetto.text = " & oggetto.Font.TextWidth(oggetto.text) & " text= " & " " & oggetto.text 
    Endif
  Next 'oggetto
  
  For Each oggetto In audioform.VBox4.children
    If oggetto Is Label Then
      If oggetto.Font.TextWidth(oggetto.text) > MaxLabel_18__21 Then MaxLabel_18__21 = oggetto.Font.TextWidth(oggetto.text)
    Endif
  Next 'oggetto
  
  upperboxW = 300 + vbox1.w + MaxLabel_12__16 ' +32 '++Relevant correction
  lowerboxW = audioform.VBox3.w + MaxLabel_18__21 '+32 '++Relevant correction
  audioform.vbox5.w = Max(upperboxW, lowerboxW) + 32
  hbox2.w = upperboxW + 16
  hbox1.w = lowerboxW + 16
  audioform.VBox4.w = MaxLabel_18__21 + 32 '+ 32 '++Relevant correction
  audioform.VBox2.w = MaxLabel_12__16 + 32 '+ 32 '++Relevant correction
  
  labelheight = Label2.Font.TextHeight("IJ") + (Label2.Font.TextHeight("IJ") Div 2)
  
  For Each oggetto In audioform.VBox1.children
    If oggetto Is Label Then
      oggetto.h = labelheight
      oggetto.w = oggetto.Font.TextWidth(oggetto.text)
    Endif
  Next 'oggetto
  
  For Each oggetto In audioform.VBox3.children
    If oggetto Is Label Then
      oggetto.h = labelheight
      oggetto.w = oggetto.Font.TextWidth(oggetto.text)
    Endif
  Next 'oggetto
  
  For Each oggetto In audioform.VBox2.children
    If oggetto Is Label Then
      oggetto.h = labelheight
      oggetto.w = oggetto.Font.TextWidth(oggetto.text)
      'oggetto.w = 2000
    Endif
  Next 'oggetto
  
  For Each oggetto In audioform.VBox4.children
    If oggetto Is Label Then
      oggetto.h = labelheight
      oggetto.w = oggetto.Font.TextWidth(oggetto.text)
      'oggetto.w = 2000
    Endif
  Next 'oggetto
  
End

Public Sub TrayIcon1_MouseDown()

  Dim iconified As Boolean = False
  iconified = (fmain.minimized And fmain.SkipTaskbar)
  If mouse.left Then
    'fmain.visible = Not fmain.visible
    If iconified Then 
      fmain.Minimized = False
      fmain.SkipTaskbar = False
      fmain.show
    Else
      fmain.Minimized = True
      fmain.SkipTaskbar = True
    Endif
  Endif

End

Public Sub TrayIcon1_Menu()

  OverlaytrayTip.hide
  MenuMain.popup

End

Public Sub TrayIcon1_MouseWheel()

  If mouse.delta > 0 Then
    SaveVolumeSlider.value = SaveVolumeSlider.value + 1
  Else
    SaveVolumeSlider.value = SaveVolumeSlider.value - 1
  Endif

End

Public TimerHideTray As New Timer As "TimerHideTray"

Public Sub TrayIcon1_Enter()

  If mplayer.ProcessRunningOvr() Then
    OverlaytrayTip.Redraw("..:Xt7-Player::.", Last.screenx - (TrayIcon1.w), Last.screeny - (OverlayTrayTip.h))
    OverlaytrayTip.show
    TimerHideTray.delay = 5000
    TimerHideTray.start
  Endif

End

Public Sub TimerHideTray_Timer()

  OverlaytrayTip.hide
  TimerHideTray.stop

End

Public Function ObjectByName(Objectname As String) As Object
  
  Dim obj As Object
  
  For Each obj In Me.Controls
    If Upper(obj.name) = Upper(Objectname) Then
      Debug "found" & objectname
      Debug
      Return obj
    Else
      Print Upper(objectname) & " differ from " & Upper(obj.name)
    Endif
  Next
  Return Null
  
End

Public Sub FlashCHK_Click()
  
  If FlashCHK.value = True Then
    timerflash.start
    Flashgrid.enabled = True
  Else
    timerflash.stop
    FlashGrid.enabled = False
    FlashCHK2.value = False
  Endif
  
End

Public Sub TimerFlash_Timer()
  
  Try MyFlash.UpdateGrid()
  
End

Public Sub FlashGrid_DblClick()
  
  Dim SelectedPath As String
  
  Try SelectedPath = Last[Last.row, 1].text
  If (Not Error ) Then
    If MouseInsideGrid(Last) Then
      Try Play(SelectedPath)
    Endif
  Endif
  
End

Public Sub FlashGrid_KeyPress()
  
  If (Key.code = Key.Return) Or (Key.code = Key.Enter) Then
    FlashGrid_DblClick()
  Endif
  
End

Public Sub FlashGrid_Menu()
  
  FlashMenuStopRecording.enabled = False
  Try FlashMenuStopRecording.enabled = MyFlash.IsRecording(Flashgrid[Flashgrid.row, 1].text)
  FlashMenuRecordas.enabled = Flashgrid.row >= 0
  FlashMenuDelete.enabled = Flashgrid.row >= 0
  MenuFlash.Popup
  
End

Public Sub FlashMenuRecordAs_Click()

  Dialog.filter = ["*.flv", ("Flash video files"), "*", ("All files")]
  Dialog.Title = ("Choose a destination file")
  If Dialog.SaveFile() Then Return ' User pressed Cancel -
  MyFlash.Record(Flashgrid[Flashgrid.row, 1].text, Dialog.path)
  
End

Public Sub FlashMenuStopRecording_Click()
  
  MyFlash.StopRecord(Flashgrid[Flashgrid.row, 1].text)
  
End

Public Sub FlashMenuDelete_Click()
  
  MyFlash.delete(Flashgrid[Flashgrid.row, 1].text)
  
End

Public Sub FlashCHK2_Click()
  
  If FlashCHK2.value = True Then
    FlashCHK.value = True
    FlashCHK_Click()
  Endif
  
End

Public Sub MyFlash_NewVideo(lastvideopath As String) 'when a new flash video is found, this event is raised
  
  Dim Question As String = ("New Flash(tm) video detected: \n") & lastvideopath & ("\n  Would you like to play it now in Xt7-Player?")
  
  If FlashCHK2.value = True Then
    If MyQuestion.Ask(Question, ("Play now"), ("Don't Play"), FlashCHK2.text, FlashCHK2) = 1 Then
      Fmain.Play(lastvideopath)
      Fmain.Show
    Endif
  Endif
  
End

Public Sub LeftSideTabs_Menu()
  
  UpdateMenuTabVisibility()
  
  MenuTabs.popup

End

Private TabsonLeftMenu As Menu

Public Sub UpdateMenuTabVisibility()
  'enable/disable menu voices
  
  Dim i, j As Integer
  
  Dim submenu, submenu2, pmenu As Menu '(hide/show,go to tab)
  Dim HideShowTabsMenu As Menu '(visibility)
  
  Dim WasInvisible As Boolean
  
  MenuTabs.Children.Clear
  TabsonleftMenu = New Menu(Menutabs) As "tabsonleftmenu"
  TabsonLeftMenu.text = ("Use vertical tabs")
  TabsonleftMenu.Picture = picture["icon:/16/previous"]
  
  HideShowTabsMenu = New Menu(menutabs)
  HideShowTabsMenu.name = "HideShowTabsMenu"
  HideShowTabsMenu.Text = ("Hide/Show tabs")
  HideShowTabsMenu.Picture = picture["icon:/16/watch"]
  
  For i = 0 To Leftsidetabs.count - 1
    WasInvisible = Not (Leftsidetabs[i].visible) 'we need the caption of the tab which is lost if it is invisible,
    Leftsidetabs[i].visible = True
    
    If Not (TabSelectedDVDAt(i) Or TabSelectedCDDAAt(i)) Then
      submenu2 = New Menu(menutabs) As "menutabs"
      SubMenu = New Menu(HideShowTabsMenu) As "HideShowTabMenu"
      Submenu.name = Leftsidetabs[i].text
      Submenu.text = ("Show") & " " & Leftsidetabs[i].text
      Submenu2.text = Leftsidetabs[i].text
      Submenu2.name = Leftsidetabs[i].text
      Submenu2.picture = Leftsidetabs[i].Picture
      Submenu.picture = Leftsidetabs[i].Picture
      If WasInvisible Then Leftsidetabs[i].Visible = False
      SubMenu.checked = Leftsidetabs[i].Visible
      submenu2.enabled = Leftsidetabs[i].Visible
    Endif
    If WasInvisible Then Leftsidetabs[i].Visible = False
    If IsProfileTab(i) Then 
      ' pmenu = New Menu(submenu2)
      ' pmenu.text = "prova"
      For j = 0 To ProfilesListBox.count - 1
        pmenu = New Menu(submenu2) As "menuprofileselect"
        pmenu.text = ProfilesListBox[j].Text
        pmenu.tag = ProfilesListBox[j].Text
        pmenu.Checked = (global.CurrentProfile = pmenu.tag)
        If (Not pmenu.checked) Then pmenu.picture = picture["icon:/16/properties"]
      Next
    Endif
    
  Next 'i
  
End

Public Function IsProfileTab(i As Integer) As Boolean

  Dim theobject As Object
  For Each theobject In Leftsidetabs[i].Children
    If theobject Is Label Then
      If theobject.tag = "profiles" Then Return True
    Endif
  Next 'theobject
  Return False

End

Public Sub menutabs_click()
  
  Dim ClickedtabID As Integer
  
  ClickedtabID = Global.TabIndexByName(Last.name, Leftsidetabs)
  Leftsidetabs.Refresh
  If (ClickedTabId <> -1) Then Leftsidetabs.index = ClickedtabID
  
End

Public Sub menuprofileselect_Click()

  Global.CurrentProfile = Last.tag
  ReLoadCurrentProfile()
  Try UpdateProfilesTabList()

End

Private Sub TabOrientation()
  
  Dim tmplayout As Integer[] = hsplit1.layout
  
  If fsform.FullScreen Then Return 
  If Leftsidetabs.Orientation = 19 Then 
    Leftsidetabs.Orientation = 1
  Else
    Leftsidetabs.Orientation = 19
  Endif
  If fmain.fullyloaded Then  'force an update
    tmplayout[1] = tmplayout[1] - 1
    tmplayout[0] = tmplayout[0] + 1
    hsplit1.Layout = tmplayout
  Endif
  
End

Public Sub tabsonleftmenu_Click()

  If fmain.fullyloaded Then TabOrientation()

End

Public Sub HideShowTabMenu_click()
  
  Dim i As Integer
  Dim WasInvisible As Boolean
  Dim ClickedtabID As Integer
  
  Last.checked = Not Last.checked
  For i = 0 To Leftsidetabs.count - 1
    WasInvisible = Not (Leftsidetabs[i].visible) 'we need the caption of the tab which is lost if it is invisible,
    Leftsidetabs[i].visible = True                'so make it temporally visible, and remember
    If Leftsidetabs[i].text = Last.name Then
      Leftsidetabs[i].Visible = Last.checked
    Else
      If WasInvisible Then Leftsidetabs[i].Visible = False
    Endif
  Next 'i
  'Focus the clicked Tab
  ClickedtabID = Global.TabIndexByName(Last.name, Leftsidetabs)
  Leftsidetabs.Refresh
  If (ClickedTabId <> -1) Then Leftsidetabs.index = ClickedtabID
  
End

Public Function IsTabVisible(tabname As String) As Boolean
  
  Dim i As Integer
  
  For i = 0 To Leftsidetabs.count - 1
    Print tabname
    If Leftsidetabs[i].text = tabname Then
      If Leftsidetabs[i].Visible Then Return True
    Endif
  Next 'i
  Return False
  
End

Public Sub UpdateProfilesTabList()
  Dim profilename As String
  Dim i As Integer
  ProfilesListBox.clear
  For Each profilename In Dir(global.confpath & "/", "*.profile")
    If Exist(global.confpath & "/" & profilename, True) Then
      If Stat(global.confpath & "/" & profilename, True).type = gb.Directory Then
        ProfilesListBox.Add(Split(profilename, ".")[0])
      Endif
    Endif
  Next
  ProfilesListBox.sorted = True
  For i = 0 To ProfilesListBox.count - 1
    If ProfilesListBox[i].text = Global.currentprofile Then ProfilesListBox[i].selected = True
  Next 'i
  CurrentProfileLabel.text = ("Current profile: ") & " " & Global.currentprofile
  
End

Public Sub ProfileDeleteBTN_Click()
  
  Dim profilename As String

  Try ProfileName = ProfilesListBox.Current.text & ".profile"
  If Not Error Then
    If ProfileName <> "Factory_Defaults.profile" Then
      If ProfileName = Global.currentprofile & ".profile" Then
        Message.Error(("You can't delete the current profile!"), "Understood")
        Return
      Endif
      If MyQuestion.Ask(("Are you sure you want to delete ") & ProfilesListbox.Current.Text & "?", ("Yes, Delete"), ("Don't delete")) = 1 Then
        Try RDelete(global.confpath & "/" & ProfileName)
        Try UpdateProfilestablist()
        Try ProfileManager.UpdateProfilelist()
      Endif
    Else
      Message.Error(("This is a read-only profile"))
    Endif
  Endif
  
End

Public Sub RDelete(directory As String)
  
  Dim subfile As String
  
  For Each subfile In RDir(directory)
    Try Kill directory & "/" & subfile
    Try Rmdir directory & "/" & subfile
  Next
  For Each subfile In RDir(directory)
    Try Kill directory & "/" & subfile
    Try Rmdir directory & "/" & subfile
  Next
  Try Rmdir directory
  
End

Public Sub ProfilesListBox_KeyPress()
  
  If (Key.code = Key.Return) Or (Key.code = Key.Enter) Then
    ProfilesListBox_DblClick()
  Endif
  
End

Public Sub ProfilesListBox_DblClick()
  
  ProfileLoadBTN_Click()
  
End

Public Sub ReLoadCurrentProfile()
  'DIM TheError AS Boolean = FALSE

  Dim cachedfile As File
  Try Global.ReallyLoadAllSettings() 'current profile is the default
  
  Try GeneralOptions.LoadWatchDir(global.confpath & "/" & global.CurrentProfile)
  Try GeneralOptions.LoadExcludeDir(global.confpath & "/" & global.CurrentProfile)
  Try HotKeys.LoadHotKeys(global.confpath & "/" & global.CurrentProfile)
  
  Try ComboHistory.LoadHistory(Searchfield, global.confpath & "/" & global.CurrentProfile)
  Try ComboHistory.LoadHistory(SearchfieldPLS, global.confpath & "/" & global.CurrentProfile)
  Try ComboHistory.LoadHistory(Searchfieldalbums, global.confpath & "/" & global.CurrentProfile)
  Try ComboHistory.LoadHistory(Searchfielddvb, global.confpath & "/" & global.CurrentProfile)
  Try ComboHistory.LoadHistory(youSearchfield, global.confpath & "/" & global.CurrentProfile)
  Try ComboHistory.LoadHistory(AddUriForm.UriInsComboBox, global.confpath & "/" & global.CurrentProfile)
  Try ComboHistory.LoadHistory(Fmain.UrlBox, global.confpath & "/" & global.CurrentProfile)


  FMain.SetStyle_early()
  FMain.SetStyle_later()
  UpdateSearchResults(MyLibrary, LibraryGrid, fmain.FullyLoaded, Searchfield.text)
  UpdateSearchResults(MyPlaylist, PlaylistGrid, fmain.FullyLoaded, SearchfieldPLS.text)
  
End

Public Sub ProfileLoadBTN_Click()

  Dim i As Integer
  Dim MySettings As New SettingsClass

  Try Global.CurrentProfile = ProfilesListBox.Current.text
  If Error Then
    For i = 0 To ProfilesListBox.count - 1
      If ProfilesListBox[i].selected Then 
        Global.CurrentProfile = ProfilesListBox[i].text
        Break
      Endif
    Next
  Endif
  ReLoadCurrentProfile()
  UpdateProfilesTabList()
  MySettings.WriteLastProfile(Global.confpath, global.CurrentProfile)
  Debug "wrote last profile"

End

Public Sub ProfileRenameBTN_Click()
  
  Dim Source, Destination, DestinationAnswer As String
  
  If ProfilesListbox.Current.Text <> "Factory_Defaults" Then
    DestinationAnswer = Replace(Trim(MyAskName.Ask(("Enter the new profile name"))), ".", "_")
    If Trim(DestinationAnswer) <> "" Then
      Source = global.confpath & "/" & ProfilesListbox.Current.Text & ".profile"
      Destination = global.confpath & "/" & DestinationAnswer & ".profile"
      Move Source To Destination
      If Not Error Then
        If ProfilesListbox.Current.Text = Global.currentProfile Then Global.currentProfile = DestinationAnswer
      Endif
    Endif
    Try UpdateProfilestablist()
  Else
    Message.Error(("This is a read-only profile"))
  Endif
  
End

Public Sub ProfileSaveBTN2_Click()
  
  If ProfilesListbox.Current.Text <> "Factory_Defaults" Then
    If MyQuestion.Ask(("You are going to overwrite the selected profile\nwith the current settings."), ("I know, proceed"), ("Cancel")) = 1 Then
      ReallySaveAllSettings(Replace(ProfilesListbox.Current.Text, ".", "_"))
    Endif
  Else
    Message.Error(("This is a read-only profile"))
  Endif
  
End

Public Sub ProfileSaveBTN_Click()
  
  Dim NewProfileName As String
  
  NewProfileName = MakeNewProfile()
  If NewProfileName <> "" Then
    ReallySaveAllSettings(NewProfileName)
  Endif
  
End

Public Sub ProfileMakeNewBTN_Click()
  
  Dim NewProfileName, Source, Destination As String
  
  NewProfileName = MakeNewProfile()
  If NewProfileName <> "" Then
    Source = global.confpath & "/" & "Factory_Defaults.profile"
    Destination = global.confpath & "/" & NewProfileName & ".profile"
    Try Shell "cp -a " & Source & "/* " & Destination Wait
  Endif
  
End

Public Function MakeNewProfile() As String
  
  Dim DestinationAnswer As String = ""
  
  DestinationAnswer = Trim(MyAskName.Ask(("Enter a name for the new profile:")))
  If Trim(DestinationAnswer) <> "" Then
    DestinationAnswer = Replace(DestinationAnswer, ".profile", "")
    DestinationAnswer = Replace(DestinationAnswer, " ", "_")
    DestinationAnswer = Replace(DestinationAnswer, ".", "_")
    If Trim(DestinationAnswer) <> "" Then
      Try Mkdir global.confpath & "/" & (Replace(DestinationAnswer, ".", "_")) & ".profile"
      If Not Error Then
        Try UpdateProfilesTabList()
        Return DestinationAnswer
      Else
        Return ""
      Endif
    Endif
  Endif
  
End

Public Sub PropertiesGrid_Menu()
  
End

Public Sub ProfilesListBox_Menu()
  
End

Public Sub ToolPanel1_Click()
  
End

Public Sub Button3_Click()
  Dim HotKeyConfigured As Boolean = True
  Dim Rewind As Boolean = True

  'HotKeysCheck First  
  HotKeyConfigured = HotKeyConfigured And (Trim(HotKeys.HotKeysGrid[73, 0].text) <> "")
  HotKeyConfigured = HotKeyConfigured And (Trim(HotKeys.HotKeysGrid[74, 0].text) <> "")
  HotKeyConfigured = HotKeyConfigured And (Trim(HotKeys.HotKeysGrid[75, 0].text) <> "")
  HotKeyConfigured = HotKeyConfigured And (Trim(HotKeys.HotKeysGrid[76, 0].text) <> "")
  HotKeyConfigured = HotKeyConfigured And (Trim(HotKeys.HotKeysGrid[77, 0].text) <> "")
  HotKeyConfigured = HotKeyConfigured And (Trim(HotKeys.HotKeysGrid[78, 0].text) <> "")
  HotKeyConfigured = HotKeyConfigured And (Trim(HotKeys.HotKeysGrid[79, 0].text) <> "")
  HotKeyConfigured = HotKeyConfigured And (Trim(HotKeys.HotKeysGrid[80, 0].text) <> "")
  
  If Not HotKeyConfigured Then
    MyQuestion.Ask(("Not all of the hotkeys are defined for dvd navigation mode\nPlease configure dvdnav hotkeys first."), "Ok", "")
    Return
  Endif
  'mplayer.do_play("dvdnav://", mplayer.CurrentOptions & " -nocache ")
  play("dvd://menu" & dvd_device(mplayer.last_media))
End

' Public Sub TimerDVD_Timer()
'   
'   'Try mplayer.Send("set_mouse_pos " & (mouse.screenx - VideoBox.screenx) & " " & (mouse.screeny - VideoBox.screeny))
'   Debug
'   mplayer.mpv_command(["mouse", (mouse.screenx - VideoBox.screenx), (mouse.screeny - VideoBox.screeny)])
'   Wait 0.1
'   mplayer.mpv_command(["discnav", "mouse_move"])
' End

Public Sub ButtonGetGenres_Click()
  Leftsidepanel.mouse = mouse.wait
  If buttonshoutcast.value Then
    Try MyRadio.GetGenres(GenresTree)
  Else
    'If Not fmain.fullyloaded Then Return
    Try IceRadio.FillGenresTree(Genrestree, False)
  Endif
  Leftsidepanel.mouse = mouse.normal
End

Public Sub GenresTree_Click()
  
  Dim IsChild As Boolean = False
  
  IsChild = Not (GenresTree.moveparent())
  GenresTree.MoveCurrent
  If IsChild Then
    Media_Next_path = GenresTree.Current.key
  Endif
  
End


Public Sub GenresTree_Activate()
  Dim IsChild As Boolean = False
  Dim genre As String

  GenresTree.MoveCurrent
  IsChild = Not (GenresTree.moveparent())
  If IsChild Then
    TogglePls.value = False
    Play(GenresTree.Current.key,, GenresTree.Current.text)
  Else
    If buttonicecast.value Then Return
    Last.mouse = mouse.wait
    Genre = GenresTree.Current.Text
    'Genre = Split(GenresTree.Current.Text, MyRadio.ts)[0]
    If Not Global.NeedTreeViewWorkaround() Then GenresTree.Current.Expanded = True
    Wait
    MyRadio.GetStationsFromGenre(Genre, GenresTree)
    If (GenresTree.Current.Children > 0) Then 
    If Not Global.NeedTreeViewWorkaround() Then GenresTree.Current.expanded = True 'gambas 3.4.0 bug
    Endif
   Last.mouse = mouse.normal
  Endif
End

Public Sub starticesearch()
  Leftsidepanel.mouse = mouse.wait
  NOSAVEHBox10.mouse = mouse.wait
  TextBox1.enabled = False

  IceRadio.search(TextBox1.text, ShutResultGrid)

  NOSAVEVBox2.visible = True
  NOSAVEVBox3.visible = False
  Highlight_shout_results()
  Leftsidepanel.mouse = mouse.normal
  NOSAVEHBox10.mouse = mouse.normal
  TextBox1.enabled = True
  ShutResultGrid.Rows.h = ShutResultGrid.Font.TextHeight("^_") + global.rowpadding
End


Public Sub startshoutSearch()
  
  Leftsidepanel.mouse = mouse.wait
  NOSAVEHBox10.mouse = mouse.wait
  TextBox1.enabled = False
  If MyRadio.GetStationsFromSearch(TextBox1.text, ShutResultGrid) <> False Then
    Message.Error(("Error reading from shoutcast server"))
  Endif
  NOSAVEVBox2.visible = True
  NOSAVEVBox3.visible = False
  Highlight_shout_results()
  Leftsidepanel.mouse = mouse.normal
  NOSAVEHBox10.mouse = mouse.normal
  TextBox1.enabled = True
  ShutResultGrid.Rows.h = ShutResultGrid.Font.TextHeight("^_") + global.rowpadding

End

Public Sub ShutResultGrid_DblClick()
  
  Dim SelectedPath As String
  
  Try SelectedPath = Last[Last.row, 3].text
  If Error Then Return
  If MouseInsideGrid(Last) Then
    Play(SelectedPath,, Last[Last.row, 0].text)
  Endif
  
End

Public Sub ShutResultGrid_KeyPress()
  
  If (Key.code = Key.Return) Or (Key.code = Key.Enter) Then
    ShutResultGrid_DblClick()
  Endif
  
End

Public Sub CloseTagEdBtn2_Click()
  
  NOSAVEVBox2.visible = False
  NOSAVEVBox3.visible = True
  If fullyloaded Then
    If TabSelectedShoutcast() Then ShoutCast_Select()
  Endif
  
End

Public Sub ShoutCastGridAddToLibrary_Click()
  
  Dim r As Integer
  Dim AnERROR As Boolean = False
  Dim QuickMode As Boolean
  
  QuickMode = (MyQuestion.Ask(("How do you want to add?"), ("Add quickly"), ("Get Stream info")) = 1)
  For r = 0 To ShutResultGrid.Rows.count - 1
    If ShutResultGrid.Rows[r].Selected Then
      Try MyLibrary.AddFile(LibraryGrid, ShutResultGrid[r, 3].text, QuickMode, True, ShutResultGrid[r, 0].text)
      If Error Then AnERROR = True
    Endif
  Next 'r
  If AnError Then
    MyQuestion.ask(("Error while adding one or more items"), ("Damn!"), "")
  Else
    UpdateSearchResults(MyLibrary, LibraryGrid, fmain.FullyLoaded, searchfield.text)
  Endif
  
End

Public Sub ShoutCastGridaddtoplaylist_Click()
  
  Dim r As Integer
  Dim AnERROR As Boolean = False
  Dim QuickMode As Boolean
  
  QuickMode = (MyQuestion.Ask(("How do you want to add?"), ("Add quickly"), ("Get Stream info")) = 1)
  For r = 0 To ShutResultGrid.Rows.count - 1
    If ShutResultGrid.Rows[r].Selected Then
      Try MyPlaylist.AddFile(PlaylistGrid, ShutResultGrid[r, 3].text, QuickMode, True, ShutResultGrid[r, 0].text)
      If Error Then AnERROR = True
    Endif
  Next 'r
  If AnError Then
    MyQuestion.ask(("Error while adding one or more items"), ("Damn!"), "")
  Else
    UpdateSearchResults(MyPlaylist, PlaylistGrid, fmain.FullyLoaded, SearchfieldPLS.text)
  Endif
  
End

Public Sub FilterTextBox_Change()

  Dim previous_search As String = FilterTextBox.text
  Wait 0.5
  If previous_search <> FilterTextBox.text Then Return
  Highlight_shout_results()
  
End

Public Sub Highlight_shout_results()
  
  Dim r, c, c1 As Integer
  Dim savedcolor As Integer ' = ShutResultGrid.background
  
  If Len(FilterTextBox.text) >= 3 Or Trim(FilterTextBox.text) = "" Then
    MyRadio.Alternatecolor(ShutResultGrid)
    For r = 0 To ShutResultGrid.rows.count - 1
      savedcolor = ShutResultGrid[r, 0].background
      For c = 0 To ShutResultGrid.columns.count - 2
        If (ShutResultGrid[r, c].text Like "*" & Trim(FilterTextBox.text) & "*") And (Trim(FilterTextBox.text) <> "") Then
          For c1 = 0 To ShutResultGrid.columns.count - 1
            ShutResultGrid[r, c1].background = color.gradient(ShutResultGrid.Background, Color.red)
          Next 'c1
          Break
        Else
          For c1 = 0 To ShutResultGrid.columns.count - 1
            ShutResultGrid[r, c1].background = savedcolor
          Next 'c1
        Endif
      Next 'c
    Next 'r
  Endif
  
End

Public Sub ShoutCast_Select()
  If NOSAVEVBox3.visible And GenresTree.count = 0 Then 
    If buttonshoutcast.value = True Then
      MyRadio.FillCachedGenres(GenresTree)
    Else
      'If Not fmain.fullyloaded Then Return
      Try IceRadio.FillGenresTree(genrestree, True)
    Endif
  Endif
End

Public Sub Youtube_Select()
  
  If youtubetree.count = 0 Then Youtube.init_tree(youtubetree)
  
End

Public Sub TextBox1_Click()
  If Trim(TextBox1.text) <> "" Then 
    If buttonshoutcast.value Then 
      startshoutSearch()
    Else
      starticesearch()
    Endif
  Endif
End

Public Sub TextBox1_KeyPress()
  If (KEY.code = Key.return Or KEY.code = Key.enter) Then
    If buttonshoutcast.value Then 
      startshoutSearch()
    Else
      starticesearch()
    Endif
  Endif
End


Public Sub ShutResultGrid_Select()
  
  Try Media_Next_path = ShutResultGrid[ShutResultGrid.row, 3].text
  
End

Public Sub ShutResultGrid_Menu()
  
  Dim tmptext As String
  
  Try tmptext = ShutResultGrid.Current.text
  If Error Then Return
  Shoutcastgridpopup.Popup
  
End

Public Sub GenresTree_Select()
  
  Try Media_Next_path = GenresTree.Current.key
  
End

Public Sub GenresTree_KeyPress()
  
  If (Key.code = Key.Return) Or (Key.code = Key.Enter) Then
    GenresTree_Select()
    GenresTree_Activate()
  Endif
  
End

Public Sub GenresTree_Menu()
  
  Dim IsChild As Boolean = False
  'if the item has no parent then refresh it, else play it
  GenresTree.MoveCurrent
  IsChild = Not (GenresTree.moveparent())
  If IsChild Then ShoutcastTreepopup.Popup
  
End

Public Sub ShoutCastTreeAddToLibrary_Click()
  
  Dim QuickMode As Boolean
  
  QuickMode = (MyQuestion.Ask(("How do you want to add?"), ("Add quickly"), ("Get Stream info")) = 1)
  Try MyLibrary.AddFile(LibraryGrid, GenresTree.Current.key, QuickMode, True, GenresTree.Current.text)
  If Error Then
    MyQuestion.ask(("Error while adding one or more items"), ("Damn!"), "")
  Else
    UpdateSearchResults(MyLibrary, LibraryGrid, fmain.FullyLoaded, searchfield.text)
  Endif
  
End

Public Sub ShoutCastTreeaddtoplaylist_Click()
  
  Dim QuickMode As Boolean
  
  QuickMode = (MyQuestion.Ask(("How do you want to add?"), ("Add quickly"), ("Get Stream info")) = 1)
  Try MyPlaylist.AddFile(PlaylistGrid, GenresTree.Current.key, QuickMode, True, GenresTree.Current.text)
  If Error Then
    MyQuestion.ask(("Error while adding one or more items"), ("Damn!"), "")
  Else
    UpdateSearchResults(MyPlaylist, PlaylistGrid, fmain.FullyLoaded, SearchfieldPLS.text)
  Endif
  
End

Public Sub CDDANext()
  If cddagrid.row = -1 Then cddagrid.row = 0
  If cddagrid.row = (cddagrid.Rows.count - 1) Then
    Try cddagrid.row = 0
    Global.IsNextSelected = False
  Else
    Try cddagrid.row = cddagrid.row + 1
    Global.IsNextSelected = True
  Endif
  Try cddagrid.Rows[cddagrid.row].selected = True
  If Not mplayer.ProcessRunningOvr() Or (Not global.IsCdaudio(mplayer.getP("fullpath"))) Then 
    play("cdda://") 'device gets added by Play()
  Endif
  mplayer.set_property_mpv("chapter", cddagrid.row)
End

Public Sub CDDAPrev()

  If cddagrid.row = -1 Then cddagrid.row = 0
  If cddagrid.row = 0 Then
    Try cddagrid.row = (cddagrid.Rows.count - 1)
  Else
    Try cddagrid.row = cddagrid.row - 1
  Endif
  Try cddagrid.Rows[cddagrid.row].selected = True
  If Not mplayer.ProcessRunningOvr() Or (Not global.IsCdaudio(mplayer.getP("fullpath"))) Then 
    play("cdda://") 'fixmempv: serve il device?
  Endif
  mplayer.set_property_mpv("chapter", cddagrid.row)
End

Public Sub DVDNEXT()
  treeview1.movecurrent
  If treeview1.MoveBelow() Then 
    Try treeview1.MoveFirst()
  Endif
  If Not Error Then
    Try treeview1.Item.selected = True
  Endif
  Try Media_Next_path = treeview1.Item.key
  Wait
  TreeView1_Activate()
End

Public Sub DVDPREV()
  treeview1.movecurrent
    If treeview1.MoveAbove() Then Try treeview1.MoveLast()
  If Not Error Then
    Try treeview1.Item.selected = True
  Endif
  Try Media_Next_path = treeview1.Item.key
  TreeView1_Activate()
End


Public Function PopupCddaError() As Boolean
  
  If MyQuestion.Ask(("Cannot access a valid cd audio or Cd device"), "Configure it", "Never mind") = 1 Then
    GeneralOptions.Show
    GeneralOptions.TabStrip1.index = Global.TabIndexByName(("Audio CD"), GeneralOptions.TabStrip1)
  Endif
  
End

Public Function PopupDVDError() As Boolean
  
  If MyQuestion.Ask(("Cannot access a valid dvd device"), "Configure it", "Never mind") = 1 Then
    GeneralOptions.Show
    GeneralOptions.TabStrip1.index = Global.TabIndexByName(("DVD"), GeneralOptions.TabStrip1)
  Endif
  
End



Public Sub MenuCDDA_Click()
  Dim cdtrack, trackname, l As String
  Dim i As Integer  
  'controllare se il dispositivo esiste ed è accessibile, altrimenti mostra messaggio d'errore
  'ed esci.
  If (Exist(GeneralOptions.CDDADeviceText.text)) Then
    If Stat(GeneralOptions.CDDADeviceText.text).Type = gb.Directory Then
      PopupCddaError()
      SetCDDATabVisibility(False)
      Return
    Endif
  Endif
  If (Not (Exist(GeneralOptions.CDDADeviceText.text))) Or (Trim(GeneralOptions.CDDADeviceText.text) = "") Then
    PopupCddaError()
    SetCDDATabVisibility(False)
    Return
  Endif
  
  fmain.mouse = mouse.wait
  CDDAGrid.clear
  CDDAGrid.Rows.count = 1
  CDDAGrid.columns.count = 3
  cddagrid[0, 0].text = ("Please, wait while getting disc information")
  cddagrid.Columns[0].width = -1 'cddagrid.Font.TextWidth("Please, wait while getting disc information")
  SetCddaTabVisibility(True)
  
  
  'play media
  Play("cdda://")
  
  
  CDDAGrid.Header = GridView.Horizontal
  CDDAGrid.Rows.count = 0
  CDDAGrid.columns.count = 3
  CDDAGrid.Columns[0].text = ("Track")
  CDDAGrid.Columns[1].text = ("Name")
  CDDAGrid.Columns[2].text = ("Length")
  CDDAGrid.Clear
  
  i = 1

  For Each cdtrack In mplayer.getP("cddbtracks")
    l = Split(cdtrack, Chr(8), "", False)[1]
    Try l = mplayer.FormatTime(l)
    trackname = Split(cdtrack, Chr(8), "", True)[0]
    
    CDDAGrid.Rows.count = CDDAGrid.Rows.count + 1
    CDDAGrid[CDDAGrid.Rows.count - 1, 0].text = ("cdda://") & i
    CDDAGrid[CDDAGrid.Rows.count - 1, 1].text = trackname
    CDDAGrid[CDDAGrid.Rows.count - 1, 2].text = l
    
    i += 1
  Next
  
  cddagrid.Columns[0].width = cddagrid.Font.TextWidth("cdda://000000")
  cddagrid.Columns[1].width = -1

  Try cddagrid.Rows[cddagrid.row].selected = False
  Try cddagrid.row = 0
  Try cddagrid.Rows[cddagrid.row].selected = True

  fmain.mouse = mouse.normal
  
End





Public Sub CDDAGrid_DblClick()
  Dim r As Integer
  r = cddagrid.row
  If Not mplayer.ProcessRunningOvr() Or (Not global.IsCdaudio(mplayer.getP("fullpath"))) Then 
    play("cdda://") 'device gets added by Play()
  Endif
  Wait
  mplayer.set_property_mpv("chapter", r)

  'Try Media_Next_path = CDDAGrid[CDDAGrid.row, 0].text
  'Play(Media_Next_path)
  SetActivePlayQueue("cdda")
End

Public Sub CDDAGrid_KeyPress()
  
  If (Key.code = Key.Return) Or (Key.code = Key.Enter) Then
    CDDAGrid_DblClick()
  Endif
  
End

Public Sub PodcastTree_Menu()
  
  Podcastmenu.popup
  
End

Public Sub Button1_Click()
  
  PodCastMenuNew_Click()
  
End

Public Sub PodcastTree_Activate()
  
  Dim IsChild As Boolean = False
  'if the item has no parent then refresh it, else play it
  PodcastTree.MoveCurrent
  IsChild = Not (PodcastTree.moveparent())
  If IsChild Then
    If global.IsNetworkURI(PodcastTree.current.key) Then
      Try fmain.Play(PodcastTree.current.key)
    Endif
  Else
    If (PodcastTree.Current.Children = 0) Then
      'TRY mypodcast.Refresh(PodcastTree.Current.key, PodcastTree)
      mypodcast.Refresh(PodcastTree.Current.key, PodcastTree)
      If Error Then
        Message.Error(("Error refreshing the feed"))
        Last.mouse = mouse.default
      Endif
      If (PodcastTree.Current.Children > 0) Then 
        If Not Global.NeedTreeViewWorkaround() Then PodcastTree.Current.Expanded = True
      Endif
    Endif
  Endif
  
End

Public Sub Button4_Click()
  
  mypodcast.Refreshall(PodcastTree)
  
End

Public Sub PodcastTree_KeyPress()
  
  If (key.code = key.delete) And key.shift Then
    Try podcasttree.current.delete
  Endif
  If (Key.code = Key.Return) Or (Key.code = Key.Enter) Then
    PodcastTree_Activate()
  Endif
  
End

Public Sub PodcastTree_Drop()
  
  Dim droppedfiles As String[]
  Dim DroppedFile As String
  
  droppedfiles = Split(Drag.Paste("text/uri-list"), "\n\r", "", True)
  For Each DroppedFile In Droppedfiles
    If Trim(DroppedFile) <> "" Then
      droppedfile = DConv(Global.NoFileSuffix(Global.FormatDrag(droppedfile)))
      If global.IsNetworkURI(droppedfile) Then Try mypodcast.Add(droppedfile, PodCastTree)
    Endif
  Next
  
End

Public Sub PodCastMenuNew_Click()
  
  Dim NewUrl As String = ""
  
  NewUrl = MyAskName.Ask(("Enter a new podcast url"))
  If Trim(NewUrl) <> "" Then
    Try mypodcast.add(NewUrl, PodcastTree)
    If Error Then
      Message.Error(("Error adding new feed"))
      PodcastTree.mouse = mouse.Default
    Endif
  Endif
  
End

Public Sub PodcastMenuRefresh_Click()
  
  Dim IsChild As Boolean = False
  
  podcasttree.MoveCurrent()
  IsChild = Not (podcasttree.moveparent())
  podcasttree.MoveBack
  If Not IsChild Then
    mypodcast.Refresh(PodcastTree.Current.key, PodCastTree)
  Endif
  
End

Public Sub PodCastMenuDelete_Click()
  
  Dim IsChild As Boolean = False
  
  podcasttree.MoveCurrent()
  IsChild = Not (podcasttree.moveparent())
  podcasttree.MoveBack
  If Not IsChild Then
    Try podcasttree.Current.delete
  Else
    MyQuestion.Ask(("Cannot delete child items!"), "Ok", "")
  Endif
  
End

Public Sub WalkTreePrint()
  'just an example to print all tree items...
  
  podcasttree.movefirst()
  Repeat
    If podcasttree.item.Children > 0 Then
      Print podcasttree.Item.key
      podcasttree.MoveChild()
    Endif
    Print podcasttree.Item.key
  Until podcasttree.MoveBelow()
  
End

Public Sub PodCastMenuDownload_Click()
  
  Dim CurrentUrl, CurrentText As String
  
  Try CurrentUrl = podcasttree.Current.Key
  If Error Then
    Message.Error(("Error: Cannot get current item"), ("Damn!"))
    Return
  Endif
  CurrentText = podcasttree.Current.text & "." & file.Ext(CurrentUrl)
  StreamDownload(CurrentUrl, CurrentText)
  
End

Public Sub PodCastMenuAddLibrary_Click()
  
  podcasttree.movefirst()
  Repeat
    If podcasttree.item.Children > 0 Then podcasttree.MoveChild()
    If podcasttree.Item.selected Then
      If Not (podcasttree.Item.text Like "[*]*") Then
        MyLibrary.AddFile(librarygrid, podcasttree.Item.key, True, True, podcasttree.Item.text)
      Endif
    Endif
  Until podcasttree.MoveBelow()
  GridRefreshWorkaround(librarygrid)
  
End

Public Sub PodCastMenuAddPlaylist_Click()
  
  podcasttree.movefirst()
  Repeat
    If podcasttree.item.Children > 0 Then podcasttree.MoveChild()
    If podcasttree.Item.selected Then
      If Not (podcasttree.Item.text Like "[*]*") Then
        MyPlaylist.AddFile(playlistgrid, podcasttree.Item.key, True, True, podcasttree.Item.text)
      Endif
    Endif
  Until podcasttree.MoveBelow()
  GridRefreshWorkaround(playlistgrid)
  
End

Public Sub LibraryGrid_Enter()

  Application.ShowTooltips = Buttonshowtooltips.value

End

Public Sub PlaylistGrid_Enter()

  Application.ShowTooltips = Buttonshowtooltips.value

End

Public Sub LibraryGrid_Leave()

  Application.ShowTooltips = GeneralOptions.ToolTipsCHK.value

End

Public Sub PlaylistGrid_Leave()

  Application.ShowTooltips = GeneralOptions.ToolTipsCHK.value

End

Private Sub HideScrollbars(librarygrid As Gridview)

  librarygrid.Scrollbar = Scroll.none
  GridPanels_Arrange()

End

Private Sub ShowScrollbars(librarygrid As Gridview)

  librarygrid.Scrollbar = Scroll.both
  GridRefreshWorkaround(librarygrid)

End

Public hirow As Integer = -1

Public Sub ChengeToggleColor(Tbutton As Object)
  
  If Tbutton.value Then
    Tbutton.BackGround = Color.Blend(Color.Blend((Tbutton.BackGround), Color.red), Tbutton.BackGround)
  Else
    Tbutton.BackGround = Tbutton.Parent.Background
  Endif
  
End

Public Sub ShufflePls_Click()
  
  If ShutPLS.Checked And ShufflePls.value Then
    Message.Warning(("Please, disable playlist shutdown option first!"))
    ShufflePls.value = False
  Else
    If ShufflePls.value Then TogglePls.value = True
  Endif
  
End

Public Sub MenuLibrarySearchAlbum_Click()
  
  
  
End


Public Sub MenuLibrarySetCover_click()

  Dim artist, album, filepath As String
  With librarygrid
    Artist = librarygrid[.row, MyLibrary.ColumnIndex["Artist"]].text
    Album = librarygrid[.row, MyLibrary.ColumnIndex["Album"]].text
    filepath = librarygrid[.row, MyLibrary.ColumnIndex["Full Path"]].text
  End With
  covermanager.SetACover(filepath, Artist, Album, True)

End

Public Sub MenuEmbeddedCoversLibrary_click()

  UpdateEmbeddedFromSelected(librarygrid)

End

Public Sub MenuEmbeddedCoversPls_click()

  UpdateEmbeddedFromSelected(Playlistgrid)

End

Public Sub MenuPlsSetCover_click()

  Dim artist, album, filepath As String
  With playlistgrid
    Artist = playlistgrid[.row, Myplaylist.ColumnIndex["Artist"]].text
    Album = playlistgrid[.row, Myplaylist.ColumnIndex["Album"]].text
    filepath = playlistgrid[.row, Myplaylist.ColumnIndex["Full Path"]].text
  End With
  covermanager.SetACover(filepath, Artist, Album, True)

End

Public Sub UpdateEmbeddedFromSelected(mygrid As Gridview)

  Dim r As Integer
  Dim coverfilename As String
  Dim fullpath As String
  
  If MyQuestion.Ask(("Xt7 will try to find and update embedded covers,\nBeware that covers explicitely set without album/artist information will be lost."), "Ok", "Cancel") = 2 Then Return
  mygrid.mouse = mouse.wait
  mygrid.enabled = False
  For r = 0 To mygrid.rows.count - 1
    If mygrid.Rows[r].Selected Then
      fullpath = mygrid[r, myplaylist.Columnindex["Full Path"]].text
      coverfilename = covermanager.Coverfile("", "", fullpath) 'generate a coverfilename using just filename (not album/artist)
      Try covermanager.RemoveCoverCache(coverfilename, True)
      covermanager.UnMarkUncovered(fullpath) 'unvalidate uncovered state
      mygrid[r, 0].text = ""
      mygrid[r, 0].Clear
    Endif
  Next 'r
  mygrid.mouse = mouse.Default
  mygrid.enabled = True

End

Public ForcedAspectRT As String = "default"

Public Sub AspectDefaultmenu_Click()
  
  mplayer.set_property_mpv("video-aspect", "2.35")
  ForcedAspectRT = "2.35"
  CorrectAreaAspect()
  
End

Public Sub Aspect1menu_Click()
  
  mplayer.set_property_mpv("video-aspect", "1.7778")
  ForcedAspectRT = "1.7778"
  CorrectAreaAspect()
  
End

Public Sub Aspect10menu_Click()
  
  mplayer.set_property_mpv("video-aspect", "1.6")
  ForcedAspectRT = "1.6"
  CorrectAreaAspect()
  
End

Public Sub Aspect11menu_Click()
  
  mplayer.set_property_mpv("video-aspect", "1.6")
  ForcedAspectRT = "1"
  CorrectAreaAspect()
  
End

Public Sub Aspect2menu_Click()
  
  mplayer.set_property_mpv("video-aspect", "1.3333")
  ForcedAspectRT = "1.3333"
  CorrectAreaAspect()
  
End

Public Sub AspectOtherMenu_Click()
  
  Dim ExAr As String
  
  ExAr = mplayer.get_property_mpv("video-aspect")
  ChooseAspect.show
  Repeat
    Wait 0.1
  Until ChooseAspect.visible = False
  If ChooseAspect.choice <> "-1" Then
    mplayer.set_property_mpv("video-aspect", ChooseAspect.choice)
    ForcedAspectRT = ChooseAspect.choice
  Else
    ForcedAspectRT = ExAr
    mplayer.set_property_mpv("video-aspect", ExAR)
  Endif
  CorrectAreaAspect()
  
End

Public Sub ButtonUp_Click()
  Object.Lock(urlbox)
  If String.Right(FileView1.dir, 1) = "/" Then FileView1.dir = String.Left(FileView1.dir, Len(FileView1.dir) - 1)
  FileView1.dir = File.dir(FileView1.dir)
  urlbox.text = Replace(FileView1.dir, "//", "/")
  Object.unLock(urlbox)
End

Public Sub ButtonRefresh_Click()
  fileview1.UnselectAll()
  Debug fileview1.dir
  fileview1Myreload()
End

Public Sub ButtonHidden_Click()
  
  FileView1.ShowHidden = Not FileView1.ShowHidden
  
End

Public Sub ActivateFile(fullpathitem As String)
  Dim selecteditem As String
  Try selecteditem = FileView1.Selection[0]
  If IsDir(fullpathitem) Then
    FileView1.dir = fullpathitem
    urlbox.text = Replace(FileView1.dir, "//", "/")
    If String.Right(urlbox.text, 1) = "/" Then urlbox.text = String.Left(urlbox.text, Len(urlbox.text) - 1)
  Else
    ComboHistory.AddHistory(urlbox, FileView1.dir)
    Try fileview1.current = selecteditem
    Play(fullpathitem)
    SetActivePlayQueue("browse")
  Endif
  
End

Public Sub FileView1_Activate()
  Dim fullpathitem As String = Replace(FileView1.dir & "/" & FileView1.Current, "//", "/")
  ActivateFile(fullpathitem)
End

Public Sub Urlbox_KeyPress()
  
  If (key.code = key.enter) Or (key.code = key.Return) Then
    If Urlbox.text <> FileView1.dir Then
      FileView1.dir = Urlbox.text
    Endif
  Endif
  
End

Public Sub FileView1_Icon(Path As String)

  Dim iconsize As Integer = FileView1.Font.TextHeight("|èJj")
  If IsDir(path) Then
    FileView1.icon = stock[CStr(iconsize) & "/directory"]
  Else
    FileView1.icon = covermanager.DefaultLibraryIcon(path, iconsize, True)
  Endif

End

Public Sub ButtonHome_Click()
  
  FileView1.dir = User.Home
  urlbox.text = User.Home
  
End

Public Sub ItemsFromBrowseTo(theplaylist As Playlistclass, thegrid As Gridview, filterstring As String)

  Dim nulllistbox As New ListBox(zzzfake)
  Dim selecteditem As String
  Dim StatType As Integer
  Dim t1 As Float = Timer()

  For Each selecteditem In FileView1.Selection
    SelectedItem = Replace(FileView1.dir & "/" & selecteditem, "//", "/")
    If Exist(selecteditem, True) Then
      StatType = Stat(selecteditem, True).type
      If StatType = gb.file Then
        theplaylist.AddFile(thegrid, SelectedItem, False, False)
        UpdateSearchResults(theplaylist, thegrid, filterstring)
      Else If StatType = gb.Directory Then
        If MyQuestion.Ask(("Are you sure you want to recursively add this directory?\n") & selecteditem, ("Add"), ("Cancel")) = 1 Then
          thegrid.enabled = False
          Fileview1.enabled = False
          'theplaylist.AddDir(librarygrid, selecteditem, nulllistbox)
          theplaylist.AddDir(thegrid, selecteditem, nulllistbox)
          Fileview1.enabled = True
          thegrid.enabled = True
          UpdateSearchResults(theplaylist, thegrid, filterstring)
        Endif
      Endif
    Endif
  Next 'selecteditem
  Debug Timer() - t1
End

Public Sub menubrowseaddtolibrary_Click()

  Try MyAlbumsLib.Init(mylibrary, AlbumGridView, searchfieldalbums.text)
  ItemsFromBrowseTo(mylibrary, librarygrid, Searchfield.text)
  If Error Then Debug "Error while initializing albums view"
  Try MyAlbumsLib.Arrange(generaloptions.IconWidthAlbums.text, albumviewtexlen)
  If Error Then Debug "Error while Arranging albums view"

End

Public Sub menubrowseaddtoplaylist_Click()

  ItemsFromBrowseTo(myplaylist, playlistgrid, SearchfieldPLS.text)

End

Public Sub FileView1_Menu()
  Dim selecteditem As String
  Wait 'needed to allow the item to be selected on right click
  Try SelectedItem = Replace(FileView1.dir & "/" & FileView1.selection[0], "//", "/")
  MenuAddToHistory.Enabled = IsDir(selecteditem)
  MenuBrowseDelete.Enabled = Not (IsDir(selecteditem))
  Menubrowse.popup
End

Public Sub MenuBrowseOpenContaining_Click()
  
  Dim selecteditem As String
  
  SelectedItem = Replace(FileView1.dir & "/" & FileView1.current, "//", "/")
  If IsDir(selecteditem) Then
    desktop.open(Selecteditem)
  Else
    desktop.open(FileView1.dir)
  Endif
  
End

Public Sub UrlBox_Click()
  
  If Trim(Urlbox.text) = "" Then Urlbox.text = "/"
  FileView1.dir = Urlbox.text
  
End

Public Sub MenuAddToHistory_Click()
  
  Dim selecteditem As String
  
  SelectedItem = Replace(FileView1.dir & "/" & FileView1.current, "//", "/")
  If IsDir(selecteditem) Then ComboHistory.AddHistory(urlbox, selecteditem)
  
End

Public Sub MenuBrowseDelete_Click()

  Dim selecteditem As String
  Dim therewasanerror As Boolean = False
  If (MyQuestion.ask(("Are you sure you want to delete selected item(s) from disk?"), ("Don't Delete"), ("Yes, Delete")) <> 2) Then Return

  For Each selecteditem In FileView1.Selection 
    selectedItem = Replace(FileView1.dir & "/" & selecteditem, "//", "/")
    If Exist(selecteditem, True) Then
      If Not (IsDir(selecteditem)) Then        
        Try Kill selecteditem
        If Not Error Then
          myplaylist.DeleteFromPath(selecteditem, playlistgrid)
          mylibrary.DeleteFromPath(selecteditem, librarygrid)
        Else
          therewasanerror = True
        Endif
      Endif
    Endif
  Next 'selecteditem
  fileview1.UnselectAll()
  fileview1Myreload()
  If therewasanerror Then Message.Error(("There was an error while trying to delete the item"), ("Ok"))
End

' 'Some hackish code due to gambas 3.4.0 and new treeview
'     Private YTreeJustExpandedOrCollapsed As Boolean = False
'     Public Sub youtubetree_mouseup()
'       If (youtubeTree.moveparent()) Then
'         If Not YTreeJustExpandedOrCollapsed Then youtubetree.Current.expanded = Not youtubetree.Current.expanded
'         YTreeJustExpandedOrCollapsed = False
'       Endif
'     End
'     
'     Public Sub youtubetree_Expand()
'        YTreeJustExpandedOrCollapsed = True
'     End
'     Public Sub youtubetree_Collapse()
'        YTreeJustExpandedOrCollapsed = True
'     End
' '------------

Public Function YoutubeParseOpts() As String
  
  Dim out As String
  
  out = out & "&orderby=" & ComboBoxOrderBy.text
  out = out & "&time=" & Comboboxtime.text
  If Trim(TextBoxUploader.text) <> "" Then out = out & "&author=" & Trim(TextBoxUploader.text)
  Return out
  
End

Public Sub youtubeTree_Activate()
   TimerTreeDelayExpand.Start()
End


Public Sub TimerTreeDelayExpand_Timer()
  Dim IsChild As Boolean = False
  Dim RealYTVideoUrl As String = ""

  'if the item has no parent then refresh it, else play it
  fmain.mouse = mouse.wait
  youtubeTree.MoveCurrent
  If youtubetree.Current.Key Like "__MORERESULTS__*" Then 
    youtubeappendmenu_Click()
    Goto returnlabel
  Endif
  IsChild = Not (youtubeTree.moveparent())
  If IsChild Then
    If global.IsNetworkURI(youtubeTree.current.key) Then
      fmain.Play(youtubeTree.current.key)
      SetActivePlayQueue("youtube")
      Try customtitle = Replace(youtubetree.Current.Text, "\n", " ")
    Endif
  Else
    'If (youtubeTree.Current.Children = 0) Then
      If youtubetree.Current.Key = "custom_search_results" Then
        'Youtube.CollapseAll(youtubetree)
        SearchYoutube()
      ' Else If youtubetree.Current.Key = "related" Then
      '   msgrelated = (("Please, right click on a video and select")) & "'" & (("Get related videos")) & "'"
      '   Message.info(msgrelated, "Ok")
      Else
        If Trim(ComboBoxRegion.text) = "" Then ComboBoxRegion.Index = 0 'ComboBoxRegion.text = "Any:"
        'Youtube.CollapseAll(youtubetree)
        Youtube.GetFeed(youtubeTree.Current.key, youtubeTree, (Desktop.h Div 12), Split(ComboBoxRegion.text, ":", "", False)[1], SpinBoxmaxresults.value)
      Endif
      If (youtubeTree.Current.Children > 0) Then youtubeTree.Current.Expanded = True
    'Endif
  Endif
  ReturnLabel:
  TimerTreeDelayExpand.stop
  fmain.mouse = mouse.normal
End

Public Sub youtubetree_Select()

  Dim IsChild As Boolean = False
  'if the item has no parent then refresh it, else play it
  youtubeTree.MoveCurrent
  IsChild = Not (youtubeTree.moveparent())
  If IsChild Then
    If global.IsNetworkURI(youtubeTree.current.key) Then
      fillyoutubeinfo(youtubeTree.current.key)
    Endif
  Endif
  Try Media_Next_path = youtubeTree.Current.key
  Try YouVideoInfo.w = scrollviewyt.w - 64

End

Public Sub SearchYoutube(Optional myappend As Boolean = False)
  Dim searchstring As String
  If Not (fmain.fullyloaded) Then Return
  fmain.mouse = mouse.wait
  ComboHistory.AddHistory(yousearchfield, yousearchfield.text)
  searchstring = Replace(yousearchfield.text, " ", "+")
  youtubetree.MoveTo("custom_search_results")
  youtubetree.Item.text = Split(youtubetree.Item.text, ":", "", True)[0] & ": " & yousearchfield.text
  'Youtube.CollapseAll(youtubetree)
  Youtube.FeedSearch(searchstring, "custom_search_results", youtubeTree, spinboxmaxresults.value, (desktop.h Div 12), YoutubeParseOpts(), myappend)
  fmain.mouse = mouse.default
End


Public Sub YouSearchfield_Activate()
  youtubetree.MoveTo("custom_search_results")
  youtubetree.Item.Selected = True
  'TimerTreeDelayExpand.start()
  TimerTreeDelayExpand_Timer()
End

Public Sub fillyoutubeinfo(url As String)
  
  Dim title, category, seconds, description, published, updated, author, authorlink As String
  Dim outtext As String = ""
  Dim ytsite As String = "http://www.youtube.com/watch?v="
  ytsite = ytsite & Youtube.getvideoid(url)
  Try title = Youtube.feedsinfo[url & ".title"]
  Try category = Youtube.feedsinfo[url & ".categorylabel"]
  Try seconds = mplayer.FormatTime(Youtube.feedsinfo[url & ".yt:durationseconds"])
  Try description = Youtube.feedsinfo[url & ".media:description"]
  Try published = Youtube.feedsinfo[url & ".published"]
  Try updated = Youtube.feedsinfo[url & ".updated"]
  authorlink = Youtube.feedsinfo[url & ".author"]
  author = file.Name(authorlink)
  YouVideoInfo.w = scrollviewyt.w - 64
  outtext = outtext & "<font color='white'>"
  outtext = outtext & "<b>Title:</b> " & title & "<br>"
  outtext = outtext & "<b>Link:</b> "
  outtext = outtext & "<font color='#8888FF'>"
  outtext = outtext & "<u>" & ytsite & "</u><br>"
  outtext = outtext & "</font>"
  outtext = outtext & "<b>Category:</b> " & category & "<br>"
  outtext = outtext & "<b>Author:</b> " & author & "<br>"
  outtext = outtext & "<b>Published:</b> " & published & "<br>"
  outtext = outtext & "<b>Updated:</b> " & updated & "<br>"
  outtext = outtext & "<b>Duration:</b> " & seconds & "<br>"
  outtext = outtext & "<b>Description:</b><br> " & description & "<br>"
  outtext = outtext & "</font>"
  outtext = Replace(outtext, "\n", "<br>")
  YouVideoInfo.tag = url
  YouVideoInfo.text = outtext
  YouVideoInfo.visible = True
  blinktimer.start
  
End

Private blinknum As Integer = 0

Public Sub blinktimer_Timer()
  
  If blinknum < 4 Then
    If Not scrollviewyt.visible Then
      If buttondetail.background = Color.default Then
        buttondetail.background = Color.red
        blinknum = blinknum + 1
      Else
        buttondetail.Background = Color.default
      Endif
    Endif
  Else
    buttondetail.Background = Color.default
    blinktimer.stop
  Endif
  
End

Public Sub SpinBoxmaxresults_KeyPress()
  
  If ((key.code = key.enter) Or (key.code = key.return)) Then SearchYoutube()
  
End

Public Sub YouVideoInfo_MouseDown()
  
  Dim ytsite As String = "http://www.youtube.com/watch?v="
  
  ytsite = ytsite & Youtube.getvideoid(YouVideoInfo.tag)
  If MyQuestion.Ask(("Would you like to go to the video homepage?"), ("Yes, Go to Youtube"), ("No, thanks")) = 1 Then
    'Shell "xdg-open '" & ytsite & "'"
    desktop.Open(ytsite)
  Endif
  
End

Public Sub YouVideoInfo_Enter()
  
  Last.mouse = mouse.Pointing
  
End

Public Sub youtubetree_Menu()
  
  Dim IsChild As Boolean = False
  'if the item has no parent then refresh it, else play it
  youtubetree.MoveCurrent
  
  If youtubetree.Current.Key Like "__MORERESULTS__*" Then Return
  
  IsChild = Not (youtubetree.moveparent())
  'IF IsChild THEN youtubetreepopup.Popup
  YtRefresh.enabled = Not (ischild) And (Not (youtubetree.Current.key = "related"))
  YoutubeTreeTreeGetRelatedMenu.Enabled = ischild
  YoutubetreeTreeaddtoLibrary.enabled = ischild
  YoutubetreeTreeaddtoplaylist.enabled = ischild
  youtubetreeDownload.Enabled = ischild
  'youtubeappendmenu.enabled = (Not ischild) And (youtubetree.Current.children > 0)
  youtubetreepopup.Popup
  
End

Public Sub youtubeappendmenu_Click()
  
  Dim relatedlink As String
  Dim relatedtotext As String
  Dim tmpkey, lastitemkey, myparentkey, tmptmpkey As String
  Dim howmanyparents As Integer = 0
  Object.Detach(youtubetree)
  youtubetree.MoveCurrent
  If youtubetree.Current.Key Like "__MORERESULTS__*" Then 
    tmpkey = youtubetree.Current.Key
    If Not (youtubetree.MovePrevious()) Then
      lastitemkey = youtubetree.Item.key
      youtubetree.item.selected = True
    Endif
    Try tmptmpkey = youtubetree.Item.key
    If Error Then Goto returnlabel
    While youtubetree.item.ParentKey <> Null
      howmanyparents += 1
      Try myparentkey = youtubetree.item.ParentKey
      youtubetree.moveparent()
    Wend

    If Error Then Goto ReturnLabel
    Try youtubetree.MoveTo(tmptmpkey)
    If Error Then Goto ReturnLabel
  Endif
  Debug youtubetree.Current.key
  Debug
  youtubetree.moveparent()
  Try youtubetree.Remove(tmpkey)
  fmain.mouse = mouse.wait
  Leftsidetabs.mouse = Mouse.wait
  If howmanyparents >= 2 Then 'myparentkey = "related" Then 'go to child item to see what related items we need
      tmptmpkey = youtubetree.Item.key 'gambas 3.3.4 bug!
      relatedlink = youtubetree.Current.ParentKey '.key 'youtubetree.Item.key 'why this change item !?!?
      Try youtubetree.MoveTo(tmptmpkey) 'gambas 3.3.4 bug!
      If Error Then Goto ReturnLabel
      relatedtotext = Left(youtubetree.item.text, InStr(youtubetree.item.text, "\n"))


      Youtube.GetRelated(relatedlink, youtubetree, relatedtotext, SpinBoxmaxresults.text, (Desktop.h Div 12),, True)
    Else If myparentkey = "custom_search_results" Then
      SearchYoutube(True)
    Else
      Youtube.GetFeed(myparentkey, youtubeTree, (Desktop.h Div 12), Split(ComboBoxRegion.text, ":", "", False)[1], SpinBoxmaxresults.value, True)
  Endif
  fmain.mouse = mouse.default
  Leftsidetabs.mouse = mouse.default
  'move to the last selected item
  Try youtubetree.MoveTo(lastitemkey)
  If Not Error Then 
    youtubetree.Item.selected = True
  Endif
  
  ReturnLabel:
  Object.Attach(youtubetree, fmain, youtubetree.name)

End

Public Sub NEW_OK_youtubeappendmenu_Click()
  
  Dim relatedlink As String
  Dim relatedtotext As String
  Dim tmpkey, lastitemkey, myparentkey, tmptmpkey As String
  
  Object.Detach(youtubetree)
  youtubetree.MoveCurrent
  If youtubetree.Current.Key Like "__MORERESULTS__*" Then 
    tmpkey = youtubetree.Current.Key
    If Not (youtubetree.MovePrevious()) Then
      lastitemkey = youtubetree.Item.key
      youtubetree.item.selected = True
    Endif
    tmptmpkey = youtubetree.Item.key
    While youtubetree.item.ParentKey <> Null
      Try myparentkey = youtubetree.item.ParentKey
      youtubetree.moveparent()
    Wend
    
    If Error Then Goto ReturnLabel
    Try youtubetree.MoveTo(tmptmpkey)
    If Error Then Goto ReturnLabel
  Endif
  Debug youtubetree.Current.key
  Debug
  youtubetree.moveparent()
  Try youtubetree.Remove(tmpkey)
  fmain.mouse = mouse.wait
  Leftsidetabs.mouse = Mouse.wait
  If myparentkey = "custom_search_results" Then
    SearchYoutube(True)
  Else If myparentkey = "related" Then 'go to child item to see what related items we need
   ' Try youtubetree.MoveChild
    'If Not Error Then
      relatedlink = youtubetree.Current.key 'youtubetree.Item.key
      relatedtotext = Left(youtubetree.Current.text, InStr(youtubetree.Current.text, "\n") - 1)
      youtubetree.moveparent 'then go back to the 'upstream'
      'Youtube.CollapseAll(youtubetree)
      Youtube.GetRelated(relatedlink, youtubetree, relatedtotext, SpinBoxmaxresults.text, (Desktop.h Div 12),, True)
    'Endif
  Else
    Youtube.GetFeed(myparentkey, youtubeTree, (Desktop.h Div 12), Split(ComboBoxRegion.text, ":", "", False)[1], SpinBoxmaxresults.value, True)
  Endif
  fmain.mouse = mouse.default
  Leftsidetabs.mouse = mouse.default
  'move to the last selected item
  Try youtubetree.MoveTo(lastitemkey)
  If Not Error Then 
    youtubetree.Item.selected = True
  Endif
  
  ReturnLabel:
  Object.Attach(youtubetree, fmain, youtubetree.name)

End

Public Sub OLDyoutubeappendmenu_Click()
  
  Dim IsChild As Boolean = False
  Dim relatedlink As String
  Dim relatedtotext As String
  Dim tmpkey, lastitemkey As String
  youtubetree.MoveCurrent
  
  If youtubetree.Current.Key Like "__MORERESULTS__*" Then 
    tmpkey = youtubetree.Current.Key
    If Not (youtubetree.MovePrevious()) Then
      lastitemkey = youtubetree.Item.key
    Endif
    Try youtubetree.MoveParent()
    If Error Then Return
    Try youtubetree.Item.selected = True
  Endif
  Debug youtubetree.Current.key
  Debug
  Try youtubetree.Remove(tmpkey)
  If Not ischild Then
    fmain.mouse = mouse.wait
    Leftsidetabs.mouse = Mouse.wait
    If youtubetree.Current.Key = "custom_search_results" Then
      SearchYoutube(True)
    Else If youtubetree.Current.Key = "related" Then 'go to child item to see what related items we need
      Try youtubetree.MoveChild
      If Not Error Then
        relatedlink = youtubetree.Item.key
        relatedtotext = youtubetree.Current.text
        youtubetree.moveparent 'then go back to the 'upstream'
        Youtube.CollapseAll(youtubetree)
        Youtube.GetRelated(relatedlink, youtubetree, relatedtotext, SpinBoxmaxresults.text, (Desktop.h Div 12),, True)
      Endif
    Else
      Youtube.GetFeed(youtubeTree.Current.key, youtubeTree, (Desktop.h Div 12), Split(ComboBoxRegion.text, ":", "", False)[1], SpinBoxmaxresults.value, True)
    Endif
    fmain.mouse = mouse.default
    Leftsidetabs.mouse = mouse.default
    'move to the last selected item
    Try youtubetree.MoveTo(lastitemkey)
    If Not Error Then 
      youtubetree.Item.selected = True
    Endif
  Endif

End

Public Sub YoutubeTreeTreeGetRelatedMenu_click(Optional myappend As Boolean = False)
  Dim IsChild As Boolean = False
  Dim relatedtotext As String
  youtubetree.MoveCurrent
  IsChild = Not (youtubetree.moveparent())
  youtubetree.MoveBack()
  If ischild Then
    fmain.mouse = mouse.wait
    Leftsidetabs.mouse = mouse.wait
    relatedtotext = youtubetree.Current.text
    'Youtube.CollapseAll(youtubetree)
    Youtube.GetRelated(youtubetree.Current.key, youtubetree, relatedtotext, SpinBoxmaxresults.text, (Desktop.h Div 12), myappend)
    fmain.mouse = mouse.default
    Leftsidetabs.mouse = mouse.default
  Endif
End

Public Sub YoutubetreeTreeaddtoLibrary_Click()
  
  Dim QuickMode As Boolean

  QuickMode = True
  Try MyLibrary.AddFile(librarygrid, youtubeTree.current.key, QuickMode, True, youtubetree.Current.text)
  If Error Then
    MyQuestion.ask(("Error while adding one or more items"), ("Damn!"), "")
  Else
    UpdateSearchResults(MyLibrary, LibraryGrid, fmain.FullyLoaded, searchfield.text)
  Endif
  
End

Public Sub YoutubetreeTreeaddtoPlaylist_Click()
  
  Dim QuickMode As Boolean
  
  QuickMode = True
  Try MyPlaylist.AddFile(PlaylistGrid, youtubeTree.current.key, QuickMode, True, youtubetree.Current.text)
  If Error Then
    MyQuestion.ask(("Error while adding one or more items"), ("Damn!"), "")
  Else
    UpdateSearchResults(MyPlaylist, PlaylistGrid, fmain.FullyLoaded, SearchfieldPLS.text)
  Endif

End

Public Sub youtubetreeDownload_Click()
  
  Dim CurrentUrl, CurrentText As String
  Dim RealYTVideoUrl As String

  fmain.mouse = mouse.wait
  Try CurrentUrl = youtubetree.Current.Key
  If Error Then
    Message.Error(("Error: Cannot get current item"))
    Return
  Endif
  CurrentText = Replace(youtubetree.Current.text, "\n", " ")
  Try RealYTVideoUrl = Youtube.realvideourl(CurrentUrl, GeneralOptions.Youtubeformat.Text)
  If Error Then
    Message.error(("Unable to get the real stream url"))
    Return
  Endif
  fmain.mouse = mouse.default
  StreamDownload(RealYTVideoUrl, CurrentText & ".mp4")
  
End

Public StreamDownloadDir As String = ""

Public Sub StreamDownload(url As String, Optional suggestname As String = "")
  
  Dim dest, commandline, destdir, destfile As String
  
  If Trim(StreamDownloadDir) = "" Then StreamDownloadDir = User.Home
  suggestname = Replace(suggestname, ":", ".")
  suggestname = Replace(suggestname, "/", "_")
  suggestname = Replace(suggestname, "\"", " ")
  suggestname = Replace(suggestname, "'", " ")
  
  Dialog.filter = [global.videofilter & global.UncommonVideoFilters, global.videofiltername, "*", ("All files")]
  
  Dialog.Path = StreamDownloadDir & "/" & suggestname
  If Dialog.SaveFile() Then Return
  StreamDownloadDir = file.dir(Dialog.Path)
  If Trim(GeneralOptions.DownloaderCombobox.text) = "" Then GeneralOptions.DownloaderCombobox.text = "xterm -e wget %url -O %dest"
  destdir = Requote(file.Dir(Dialog.path))
  destfile = Requote(file.name(Dialog.path))
  dest = Requote(dest)
  url = Requote(url)
  
  commandline = Replace(GeneralOptions.DownloaderCombobox.text, "%url", url)
  commandline = Replace(commandline, "%destdir", destdir)
  commandline = Replace(commandline, "%destfile", destfile)
  
  If url Like "*youtube*" Then
    If commandline Like "*wget *" Then commandline = commandline & " --load-cookies " & Youtube.Cookiesfile
    If commandline Like "*aria2c *" Then commandline = commandline & " --load-cookies=" & Youtube.Cookiesfile
  Endif
  
  Debug commandline
  Debug
  Shell commandline
  
End

Public Sub YtRefresh_Click()
  
  fmain.mouse = mouse.wait
  Leftsidetabs.mouse = mouse.wait
  If youtubetree.Current.Key = "custom_search_results" Then
    SearchYoutube()
  Else
    Youtube.GetFeed(youtubeTree.Current.key, youtubeTree, (Desktop.h Div 12), Split(ComboBoxRegion.text, ":", "", False)[1], SpinBoxmaxresults.value)
  Endif
  fmain.mouse = mouse.default
  Leftsidetabs.mouse = mouse.default
  
End

Public Sub buttonopts_MouseDown()
  
  sidepanelYTSearchoptions.visible = Not sidepanelYTSearchoptions.visible
  
End

Public Sub buttondetail_Click()
  scrollviewyt.visible = Not scrollviewyt.visible
  YouVideoInfo.w = scrollviewyt.w - 64
End

Public Sub youtubetree_KeyPress()
  
  If (Key.code = Key.Return) Or (Key.code = Key.Enter) Then
    youtubetree_Activate()
  Endif
  
End

Public Sub TextBoxUploader_KeyPress()
  
  If ((key.code = key.enter) Or (key.code = key.return)) Then SearchYoutube()
  
End

Public Sub buttonstartytsearch_Click()
  YouSearchfield_Activate()
End

Public Sub Form_DblClick()
  
End

Public Sub GetYoutubeSubs(VideoId As String)
  
  Dim Subdir As String = settings.defaultdir & "/" & Global.Appname & "/" & ".substmp/"
  Dim subfile, track, langcode, trackname As String
  Dim id As Integer = 0
  
  Try Mkdir Subdir
  For Each track In Youtube.AvailableSubs(VideoId)
    langcode = Split(track, ":", "", False, False)[0]
    trackname = Split(track, ":", "", False, False)[1]
    
    SubFile = Subdir & id & " - " & Trackname & "_" & LangCode & ".srt"
    file.Save(SubFile, Youtube.GetSub(VideoId, LangCode, trackname))
    mplayer.SubtitleAdd(SubFile)
    id = id + 1
  Next 'LangCode
  FillStreamsMenu()
  
End

Public Sub MenuShowDVBT_Click()
  
  DVBTuner.show
  
End

Public Sub ScanBtn_Click()

  If (Not global.initearlyformsdone) Then global.DelayLoadStates_Timer
  DVBTuner.show

End

'Public fakesplit As New Panel(zzzfake) As "Fakesplit"

' Public Sub Fakesplit_Enter()
'   Last.mouse = mouse.SplitH
' End

' Public Sub Fakesplit_Leave()
'   Last.mouse = mouse.default
'   fakesplit.hide
' End

' Public Sub Fakesplit_MouseMove()
'   Dim delta As Integer
'   delta = fakesplit.screenx - fakesplit.x 
'   fakesplit.x = mouse.screenx - delta
' End
' 
' Public Sub FakeSplitRefresh()
'   Dim splitterw As Integer = hsplit1.w - (hsplit1.Layout[0] + hsplit1.Layout[1])
'   Dim tmplayout As Integer[] = hsplit1.layout
'   tmplayout[1] = (hsplit1.w - fakesplit.x - splitterw)
'   tmplayout[0] = (hsplit1.w - tmplayout[1] - splitterw)
'   hsplit1.Layout = tmplayout
'   Hsplit1_MyRefresh()
' End
' 
' Public Sub Fakesplit_MouseUp()
'   FakeSplitRefresh()
' End

Public Sub HSplit1_Resize()

thumblebox.hide
  If Rnd(0, 1) > 0.75 Then
    Hsplit1_MyRefresh   
  Endif
  'old_workaround for missing picture, maybe not needed with mpv.
  timerhideshowvideo.stop
  timerhideshowvideo.start

End

 Public Sub timerhideshowvideo_Timer()
  Dim prevlayout As Integer[]
  Dim xy As Integer
  timerhideshowvideo.stop
  prevlayout = hsplit1.Layout
  If Not fsform.fullscreen Then
    'If (rightsidepanel.width < (ControlPanel.w + 64)) Then
    'If (seekbar.w < 64) Then
    If (rightsidepanel.width < 480) Then
      If (BottomVbox.Parent.name <> "FMain") Then 
        BottomVbox.Reparent(fmain)
      Endif
    Else
      If (BottomVbox.Parent.name <> "RightSidePanel") And (Not (fsform.FullScreen)) Then
          BottomVbox.Reparent(RightSidePanel)
      Endif
    Endif
    hsplit1.Layout = prevlayout
  Endif

  'prevent glitches near the hsplit border
  If Not fsform.fullscreen Then 
    xy = videobox.x
    Wait
    videobox.x = 20
    Wait
    videobox.x = xy
    Wait
    Hsplit1_MyRefresh  
      Else
    xy = videobox.y
    videobox.y = 20
    Wait
    videobox.y = xy
    Wait
  Endif

End


Public Sub ShadeList(brother As Object, Optional dltx As Integer = 0, Optional dlty As Integer = 0)
  If Not fmain.fullyloaded Then Return
  If ((brother.x + brother.y) < 0) Then Return
  shadeup.x = brother.x + dltx 
  Try shadeup.y = brother.clienty + brother.Columns.Height + dlty
  If Error Then Try shadeup.y = brother.clienty + dlty
  ' If (brother.Scrollbar = Scroll.Both Or brother.Scrollbar = Scroll.Horizontal) Then
  '   shadelow.y = brother.clienty + brother.clienth - shadelow.h + 2 + dlty
  ' Else
  '   shadelow.y = brother.clienty + brother.h - shadelow.h + 2 + dlty
  ' Endif
  shadeup.w = brother.clientw + 2
  ' shadelow.w = brother.clientw + 2
End

Public Sub GridPanels_BeforeArrange()
  If Not fmain.FullyLoaded Then Return
  shadeup.Reparent(Last)
  shadeup.visible = True
  ' shadelow.Reparent(Last)

End

Public Sub GridPanels_Arrange()

  Dim brother As Object
  Dim newsize As Integer = 9
  
  '  If Not (fmain.fullyloaded) Then Return
  
  For Each brother In shadeup.Parent.Children 
    If brother Is Gridview Then Break
  Next
  Try newsize = CInt(brother.Rows[1].h / 4) 
  If newsize > 9 Then newsize = 9
  Try shadeup.h = newsize
  shadelist(brother)

End

' Public Sub HSplit1_MouseMove()
'   If SwitchingFullScreen Then Return
'   If (fakesplit.parent.name <> Me.name) Then fakesplit.Reparent(fmain)
'   Object.Attach(fakesplit, fmain, "fakesplit")
'   fakesplit.Background = color.selectedbackground
'   Try fakesplit.x = hsplit1.Layout[0]
'   If Error Then Return
'   fakesplit.border = border.none
'   fakesplit.x = hsplit1.Layout[0]
'   fakesplit.Ignore = True
'   fakesplit.x = hsplit1.Layout[0]
'   fakesplit.w = hsplit1.w - (hsplit1.Layout[0] + hsplit1.Layout[1]) 
'   If fmain.menus.visible Then
'     fakesplit.y = hsplit1.screeny - fmain.screeny - fmain.font.TextHeight("|JIq") - desktop.scale
'       Else
'     fakesplit.y = hsplit1.screeny - fmain.screeny 
'   Endif
'   fakesplit.h = hsplit1.h 
'   fakesplit.raise
'   fakesplit.visible = True
'   fakesplit.SetFocus()
' End

' Public Sub Fakesplit_DblClick()
'   Dim splitterw As Integer = hsplit1.w - (hsplit1.Layout[0] + hsplit1.Layout[1])
'   Dim tmplayout As Integer[] = hsplit1.layout
'   If hsplit1.Layout[0] > 20 Then
'     tmplayout[1] = (hsplit1.w - splitterw)
'     tmplayout[0] = (hsplit1.w - tmplayout[1] - splitterw)
'   Else
'     tmplayout[0] = (fmain.w Div 3)
'     tmplayout[1] = hsplit1.w - tmplayout[0] - splitterw
'   Endif
'   hsplit1.Layout = tmplayout
'   Hsplit1_MyRefresh()
'   fakesplit.lower
'   fakesplit.visible = False
'   Object.Detach(fakesplit)
' End

Public Sub SearchFieldDVB_Activate()
  
  playselecteddvb()
  ComboHistory.AddHistory(SearchFieldDVB, SearchFieldDVB.text)
  
End

Public Sub SearchFieldDVB_Click()
  
  UpdateSearchResults(MyDVBTList, DVBTGrid, fmain.FullyLoaded, Searchfielddvb.text)
  
End

Public Sub SearchFieldDVB_KeyRelease()
  
  If (Key.code < Key.space) Or (Key.code > Key.delete) Then Return
  If key.code = key.tab Then Return
  UpdateSearchResults(MyDVBTList, DVBTGrid, fmain.FullyLoaded, Searchfielddvb.text)
  Searchfielddvb.SetFocus()
  
End

' Public Sub LeftSidePanel_Enter()
'   Fakesplit_Leave()
' End
' 
' Public Sub rightSidePanel_Enter()
'   Fakesplit_Leave()
' End

Public Sub MenuBug_Click()

  If MyQuestion.Ask(("Thank you,\nyou will be taken to the \nbug reporting web page."), ("Submit the bug"), ("Not now")) = 1 Then
    Desktop.Open("http://xt7-player.sourceforge.net/xt7forum/qazxswedcvfrtgbnhyujm.php?mode=post&f=3")
  Endif

End

Public Sub FileView1_Select()
  Try Media_Next_path = FileView1.dir & "/" & FileView1.Selection[0]
End

Public Sub HBox2_Arrange()

  If fmain.fullyloaded Then
    hbox20.enabled = (TabSelectedLibrary() Or TabSelectedPlaylist() Or TabSelectedAlbums())
  Endif

End

Public Sub PanScan_Click()

  Dim msgstr As String
  msgstr = ("Roll Your mouse wheel over the button\nto change panscan or Setup some hotkeys.") & "\n"
  msgstr &= ("Right click over the button will cycle through zoom modes")
  MyQuestion.Ask(msgstr, "Ok", "")

End

Public Sub PanScan_MouseWheel()

  If mplayer.ProcessRunningOvr() Then
    If Not (mplayer.getP("audioonly")) Then
      If mouse.Delta > 0 Then 
        PanScanCorrect(+0.05)
      Else
        PanScanCorrect(-0.05)
      Endif
    Endif
  Endif

End

Public Sub LibraryGrid_Click()

  EnableDisableTagBtn()

End

Public Sub PlaylistGrid_Click()

  EnableDisableTagBtn()

End

Public Sub TimerQuit_Timer()

  fmain.close

End

Public Sub MenuLoadSubtitle_Click()

  Dim tmp As String[]
  Dim tmp2 As String = myDialog.path

  tmp = myDialog.filter
  Try myDialog.path = file.Dir(mplayer.getP("fullpath"))
  myDialog.filter = ["*.srt;*.sub;*.ass;*.ssa;*.txt", ("SubTitle files")]
  If Not (myDialog.OpenFile()) Then
    If mplayer.IsSubFile(DConv(myDialog.Path)) Then sub_add(DConv(myDialog.Path))
  Endif
  myDialog.filter = tmp
  myDialog.path = tmp2

End

Public Sub StreamsSubtitlesMenu_show()

  If mplayer.ProcessRunningOvr() Then 
    FillStreamsMenu()
  Endif

End

Public querymp As MplayerClass

Public Sub PanScan_Menu()

  Dim mptxt As String 
  Object.Detach(realtimeform.PanscanSlider)
  Select Case forcedzoomrt
    Case ""
      forcedzoomrt = "HALFBARS"
      mptxt = ("Zoom mode: cut half bars")
    Case "HALFBARS"
      forcedzoomrt = "NOBARS"
      mptxt = ("Zoom mode: cut bars")
    Case "NOBARS"
      forcedzoomrt = ""
      ResizeFactor = 0
      'old_ResizeFactor = 1
      mptxt = ("Zoom mode: 1:1")
  End Select
  
  mplayer.ShowText(mptxt, "1000")
  CorrectAreaAspect()
  realtimeform.PanscanSpinBox.value = realtimeform.PanscanSlider.value
  Object.Attach(realtimeform.PanscanSlider, realtimeform, realtimeform.PanscanSlider.name)

End


Public Sub NewThumbReadyFor(fullpath As String)

  If TabSelectedPlaylist() Then 
    ThumbToGrid(myplaylist, playlistgrid, fullpath)
  Else If TabSelectedLibrary() Then
    ThumbToGrid(mylibrary, libraryGrid, fullpath) 
  Endif

End

Public Sub ThumbToGrid(mypls As PlaylistClass, mygrid As Gridview, fullpath As String)

  Dim r As Integer = -1
  
  Try r = mypls.FindRowByPath(mygrid, fullpath)
  If r = -1 Then Return
  mygrid[r, 0].text = ""
  mygrid[r, 0].clear

End

Public Sub SearchLabel_Click()

  Searchfields.show

End

Public Function maketooltip(mypath As String, librarygrid As Gridview, mylibrary As Playlistclass) As String

  Dim r As Integer
  Dim album, myyear, genre, artist, title, track, length, vcodec, width, height, vkbps, fps, acodec, arate, akbps, channels, comment, path As String
  Dim m As String = ""
  Dim ms As New String[]
  Dim i, w As Integer
  Dim Maxw As Integer = 0
  Dim sep As Integer 
  
  Try r = mylibrary.FindRowByPath(LibraryGrid, mypath) 
  If Error Then Return
  '= librarygrid[r, Mylibrary.Columnindex["Filename"]].text
  '
  length = mylibrary.CellValue(librarygrid, r, Mylibrary.Columnindex["Length"])
  artist = mylibrary.CellValue(librarygrid, r, Mylibrary.Columnindex["Artist"])
  album = mylibrary.CellValue(librarygrid, r, Mylibrary.Columnindex["Album"])
  myyear = mylibrary.CellValue(librarygrid, r, Mylibrary.Columnindex["Year"])
  track = mylibrary.CellValue(librarygrid, r, Mylibrary.Columnindex["Track"])
  title = mylibrary.CellValue(librarygrid, r, Mylibrary.Columnindex["Title"])
  genre = mylibrary.CellValue(librarygrid, r, Mylibrary.Columnindex["Genre"])
  comment = mylibrary.CellValue(librarygrid, r, Mylibrary.Columnindex["Comment"])
  '= librarygrid[r, Mylibrary.Columnindex["Type"]].text
  acodec = mylibrary.CellValue(librarygrid, r, Mylibrary.Columnindex["Audio Codec"])
  akbps = mylibrary.CellValue(librarygrid, r, Mylibrary.Columnindex["Audio Bitrate"])
  Try akbps = CInt(akbps) Div 1000
  arate = mylibrary.CellValue(librarygrid, r, Mylibrary.Columnindex["Audio Rate"])
  channels = mylibrary.CellValue(librarygrid, r, Mylibrary.Columnindex["Channels"])
  vcodec = mylibrary.CellValue(librarygrid, r, Mylibrary.Columnindex["Video Codec"])
  vkbps = mylibrary.CellValue(librarygrid, r, Mylibrary.Columnindex["Video Bitrate"])
  Try vkbps = CInt(vkbps) Div 1000
  fps = mylibrary.CellValue(librarygrid, r, Mylibrary.Columnindex["Fps"])
  width = mylibrary.CellValue(librarygrid, r, Mylibrary.Columnindex["Width"])
  height = mylibrary.CellValue(librarygrid, r, Mylibrary.Columnindex["Height"])
  path = mylibrary.CellValue(librarygrid, r, Mylibrary.Columnindex["Full Path"])
  
  ms.add(("Filename: ") & Chr(0) & file.name(mypath) & "\n")
  ms.add(("In: ") & Chr(0) & file.Dir(path) & "\n")
  
  If Trim(album) & Trim(myyear) & Trim(genre) <> "" Then
    If Trim(album) = "" Then album = ("Unknown")
    If Trim(myyear) = "" Then myyear = ("Unknown")
    If Trim(genre) = "" Then genre = ("Unknown")
    ms.add(("Album: ") & Chr(0) & album & ", " & ("Year: ") & myyear & ", " & ("Genre: ") & genre & "\n")
  Endif
  
  If Trim(artist) <> "" Then ms.add(("Artist: ") & Chr(0) & Artist & "\n")
  If Trim(title) & Trim(track) <> "" Then
    If Trim(Title) = "" Then Title = ("Unknown")
    If Trim(Track) = "" Then Track = ("Unknown")
    ms.add(("Title: ") & Chr(0) & Title & (", Track No.: ") & Track & "\n")
  Endif
  ms.add(("Length: ") & Chr(0) & length & "\n")
  
  If Trim(vcodec) & Trim(width) & Trim(height) & Trim(vkbps) & Trim(fps) <> "" Then
    If Trim(vcodec) = "" Then vcodec = ("Unknown")
    If Trim(width) = "" Then width = ("Unknown")
    If Trim(height) = "" Then height = ("Unknown")
    If Trim(vkbps) = "" Then vkbps = ("Unknown")
    If Trim(fps) = "" Then fps = ("Unknown")
    ms.add(("Video: ") & Chr(0) & vcodec & ": " & width & "x" & height & "@" & vkbps & "kbps, " & fps & " fps" & "\n")
  Endif
  If Trim(acodec) & Trim(arate) & Trim(akbps) & Trim(channels) <> "" Then
    If Trim(acodec) = "" Then acodec = ("Unknown")
    If Trim(arate) = "" Then arate = ("Unknown")
    If Trim(akbps) = "" Then akbps = ("Unknown")
    If Trim(channels) = "" Then channels = ("Unknown")
    ms.add(("Audio: ") & Chr(0) & acodec & ", " & arate & "Hz @" & akbps & "kbps, " & channels & " " & ("channels") & "\n")
  Endif
  If Trim(comment) <> "" Then ms.add(("Comment: ") & Chr(0) & comment)
  
  For i = 0 To ms.count - 1
    'w = Application.Font.TextWidth(ms[i])
    w = Application.Font.TextWidth(Left(ms[i], InStr(ms[i], Chr(0))))
    If (w > maxw) Then maxw = w
  Next
  
  sep = Application.Font.TextWidth(" ")
  
  maxw = maxw + sep * 2
  For i = 0 To ms.count - 1
    'w = Application.Font.TextWidth(ms[i])
    w = Application.Font.TextWidth(Left(ms[i], InStr(ms[i], Chr(0))))
    m &= Replace(ms[i], Chr(0), pixelspaces(maxw - w, sep))
  Next
  
  If Right(m) = "\n" Then m = Left(m, Len(m) - 1)
  
  Return m

End

Public Function pixelspaces(width As Integer, singlewidth As Integer) As String

  Return Space(width Div singlewidth)

End

Public Sub ShowGridTooltipIn(mygrid As Gridview, myplaylist As Playlistclass)

  Dim currentpath, album As String
  Dim popupmsg As String
  
  Dim crow, fpcolumn, ccolumn As Integer
  Dim msx, msy As Integer

  If mouse.left Or mouse.right Or mouse.middle Then Return
  
  Repeat 'wait until mouse finished moving
    msx = mouse.screenx
    msy = mouse.ScreenY
    Wait 0.01
  Until ((msx = mouse.screenx) And (msy = mouse.ScreenY)) 'wait until mouse is still
  
  Try crow = global.MyRowAt(mygrid, mouse.screeny - mygrid.screeny)
  If ( Error Or (crow = -1)) Then 
    Application.ShowTooltips = False
    Return
  Endif
  
  fpcolumn = myplaylist.ColumnIndex["Full Path"]
  If mygrid.name <> "AlbumGridView" Then
    Try currentpath = mygrid[crow, fpcolumn].text
    If Error Then
      Application.ShowTooltips = False
      Return
    Endif
  Else 'is albumgrid
    ccolumn = mygrid.ColumnAt(mouse.screenx - mygrid.screenx)
    If ccolumn = -1 Then Return
    currentpath = MyAlbumsLib.PathFromCoordinates(crow, ccolumn)
  Endif
  Application.ShowTooltips = Buttonshowtooltips.value
  If mygrid.name <> "AlbumGridView" Then
    Try popupmsg = maketooltip(currentpath, mygrid, myplaylist)
  Else
    album = MyAlbumsLib.AlbumFromCoordinates(crow, ccolumn)
    If album = "" Then Return
    Try popupmsg = MyAlbumsLib.AlbumToolTip(album)
  Endif
  mygrid.tooltip = popupmsg

End

Private mmliblocked As Boolean = False

Public Sub LibraryGrid_MouseMove()

  If mmliblocked Then Return
  mmliblocked = True
  If generaloptions.HighlightCHK.value Then
    Try hirow = global.MyRowAt(librarygrid, mouse.screeny - librarygrid.screeny)
    Try librarygrid[hirow, 0].text = ""
    Try librarygrid[hirow, 0].clear
  Endif
  If Not (Buttonshowtooltips.value) Then 
    mmliblocked = False
    Return
  Endif
  ShowGridTooltipIn(librarygrid, mylibrary)
  mmliblocked = False

End

Private mmplslocked As Boolean = False

Public Sub PlaylistGrid_MouseMove()

  If mmplslocked Then Return
  mmplslocked = True
  If generaloptions.HighlightCHK.value Then
    Try hirow = playlistgrid.RowAt(mouse.screeny - playlistgrid.screeny)
    Try playlistgrid[hirow, 0].text = ""
    Try playlistgrid[hirow, 0].clear
  Endif
  If Not (Buttonshowtooltips.value) Then 
    mmplslocked = False
    Return
  Endif
  ShowGridTooltipIn(playlistgrid, myplaylist)
  mmplslocked = False

End

Private mmalblocked As Boolean = False

Public Sub AlbumGridView_MouseMove()

  MyAlbumsLib.highlighter(mouse.screenx, mouse.screeny)
  If mmalblocked Then Return
  mmalblocked = True
  If Not (Buttonshowtooltips.value) Then Return
  ShowGridTooltipIn(AlbumGridView, mylibrary)
  mmalblocked = False

End

Private scrollingtimer As New Timer As "scrollingtimer"
Public gridscrolling As Boolean = False

Public Sub PlaylistGrid_Scroll()

  gridscrolling = True
  scrollingtimer.delay = 100
  scrollingtimer.start

End

Public Sub LibraryGrid_Scroll()

  gridscrolling = True
  scrollingtimer.delay = 100
  scrollingtimer.start

End

Public Sub scrollingtimer_Timer()

  scrollingtimer.Stop
  gridscrolling = False

End

Public Sub MenuLibraryInvertSort_Click()
  
End

Public Sub MenuLibrarySortByAlbum_Click()

  ColumnClick(librarygrid, mylibrary, mylibrary.ColumnIndex["Album"], Searchfield.text)

End

Public Sub MenuLibrarySortByArtist_Click()

  ColumnClick(librarygrid, mylibrary, mylibrary.ColumnIndex["Artist"], Searchfield.text)

End

Public Sub MenuLibrarySortByPath_Click()

  ColumnClick(librarygrid, mylibrary, mylibrary.ColumnIndex["Full Path"], Searchfield.text)

End

Public Sub DVBTGrid_Menu()
  'if i'm alone, then leave me here!

  menudvbt.Popup

End

Public Sub RenameGridItem(mygrid As Gridview, myrow As Integer, myplaylist As Playlistclass, newname As String)

  Dim fullpath, sep, oldname As String
  
  Dim i As Integer
  Dim imax As Integer

  Try fullpath = myplaylist.ColumnIndex["Full Path"]
  If Error Then Return
  
  sep = myplaylist.TableSeparator
  oldname = mygrid[myrow, myplaylist.ColumnIndex["Filename"]].text
  
  'find pRow to update ptable too (other than searchtable)
  imax = myplaylist.PTable.count - 1
  For i = 0 To imax
    If myplaylist.AreEquivalentRows(myplaylist.PTable[i], myplaylist.SearchTable[myrow]) Then Break
  Next
  If i > imax Then 
    Debug "cannot rename, couldn't find searchtable element into ptable (!?)"
    Debug
    Return
  Else
    myplaylist.SearchTable[myrow] = Replace(myplaylist.SearchTable[myrow], sep & oldname & sep, sep & newname & sep)
    myplaylist.ptable[i] = myplaylist.SearchTable[myrow]
    mygrid[myrow, 0].text = ""
    mygrid[myrow, 0].Clear
  Endif

End

Public Sub MenuLibraryRename_CLICK()

  RenameGridItemWrapper(librarygrid, mylibrary)

End

Public Sub MenuPlaylistRename_click()

  RenameGridItemWrapper(PLAYLISTGRID, MyPlaylist)

End

Public Sub MenuRename_Click()

  RenameGridItemWrapper(dvbtgrid, MyDVBTList)

End

Public Sub RenameGridItemWrapper(g As Gridview, p As Playlistclass)

  Dim i As Integer
  Dim newname As String
  g.enabled = False
  For i = 0 To g.Rows.Count - 1 
    If g.Rows[i].Selected Then
      newname = MyAskName.Ask(("Rename to:"), g[i, 0].text, False)
      RenameGridItem(g, i, p, newname)
    Endif
  Next
  g.enabled = True
End


Public Sub Startdumping()
  mplayer.Send("capturing") 'enable
End

Private Sub StopDumping(destfile As String)
  Dim mymsg As String
  Dim mynow As String = Now()
  Dim ismp3 As Boolean = False
  mynow = Replace(mynow, "/", "-")
  mynow = Replace(mynow, " ", "_")
  mynow = Replace(mynow, ":", ".")
  
  mplayer.Send("capturing 0") 'disable
  If Trim(destfile) = "" Then destfile = User.Home
  destfile &= "/Xt7.REC."
  destfile &= file.Name(mplayer.getP("fullpath")) & "-" & mynow
  destfile = Replace(destfile, ".pls", "")
  Ismp3 = Ismp3 Or (Lower(mplayer.getP("fullpath")) Like "*.mp3") 
  Ismp3 = Ismp3 Or (Lower(mplayer.getP("audio-codec")) Like "*mpg123*") 
  Ismp3 = Ismp3 Or (Lower(mplayer.getP("audio-codec")) Like "*mp3*") 
  Ismp3 = Ismp3 And mplayer.getP("audioonly")
  
  If ismp3 Then 
    destfile &= ".mp3"
      Else
    destfile &= ".ts"
  Endif
  Debug "mv " & dumpfile & " " & Shell(destfile)
  Shell "mv " & dumpfile & " " & Shell(destfile)
  Debug
  mymsg = (("Moving $(dumpfile) \nTo: \n$(destfile)"))
  mymsg = Replace(mymsg, "$(dumpfile)", dumpfile)
  mymsg = Replace(mymsg, "$(destfile)", destfile)
  mymsg &= ("\n\nYou can configure the paths in Generaloptions -> dvb-t")
  Message.Info(mymsg)
  buttoncapture.value = 0
  buttoncapture.visible = buttoncapture.enabled
  ArrangeCpl()
  Try myplaylist.AddFile(playlistgrid, destfile, False)
  GridRefreshWorkaround(playlistgrid)
End

Public Sub ButtonCapture_Click()
  If mplayer.ProcessRunningOvr() Then
    If Last.value Then
      'StopDumping(generaloptions.dvbfinaldir.text)
      Startdumping()
        Else
      StopDumping(generaloptions.dvbfinaldir.text)
    Endif
  Endif
End


Private albumsinitialized As Boolean = False
Public Sub Albums_Select()
  If Not fmain.fullyloaded Then Return
    If Not albumsinitialized Then 
      MyAlbumsLib.init(mylibrary, AlbumGridView, searchfieldalbums.text)
      albumsinitialized = True
      MyAlbumsLib.Arrange(generaloptions.IconWidthAlbums.text, albumviewtexlen)
    Endif
End


Public Sub SearchFieldAlbums_Click()
  'If Not fmain.fullyloaded Then Return
    MyAlbumsLib.Init(mylibrary, AlbumGridView, searchfieldalbums.text)
    Wait
    MyAlbumsLib.Arrange(generaloptions.IconWidthAlbums.text, albumviewtexlen)
    albumsinitialized = True
End



Public Sub AlbumGridView_Data(Row As Integer, Column As Integer)
  ' shadelow.visible = True
  MyAlbumsLib.data(row, column)
End


Public Sub AlbumGridView_change()
  If Not fmain.FullyLoaded Then Return
  If AlbumGridView.row < 0 Then Return
  If AlbumGridView.column < 0 Then Return
  MyAlbumsLib.SelectCell(AlbumGridView.row, AlbumGridView.Column)
End

Public Sub SearchFieldAlbums_KeyRelease()
  Dim previous_search As String
  If Not fmain.fullyloaded Then Return
  If (Key.code < Key.space) Or (Key.code > Key.delete) Then Return
  If key.code = key.tab Then Return
  previous_search = searchfieldalbums.text
  'If ((Len(Searchfieldpls.text) > 2) Or (Len(Searchfieldpls.text) = 0)) Then
    Wait 0.5
    If previous_search = searchfieldalbums.text Then
      'UpdateSearchResults(MyPlayList, PlayListGrid, fmain.FullyLoaded, SearchfieldPLS.text)
      MyAlbumsLib.Init(mylibrary, AlbumGridView, searchfieldalbums.text)
      MyAlbumsLib.Arrange(generaloptions.IconWidthAlbums.text, albumviewtexlen)
        Else
      Return
    Endif

End

Public Sub SearchFieldAlbums_Activate()
  ComboHistory.AddHistory(Searchfieldalbums, Searchfieldalbums.text)
End



Public Sub AlbumGridView_Activate()
  Dim tracks As String[]
  Dim track As String
  Dim firstrow As Integer
  Dim answer As Integer
  Dim selectedrow As Integer
  tracks = MyAlbumsLib.GetTracks(AlbumGridView.row, AlbumGridView.Column).Sort(gb.Natural)
  answer = MyQuestion.Ask(("What do you want to do with this album tracks?"), ("Append to playlist"), ("Append and play"))
  If answer = -1 Then Return
  If (tracks.count > 50) Then 
    If MyQuestion.Ask(("Append more than 50 tracks?"), ("yes"), ("no")) = 2 Then Return
  Endif
  
  fmain.mouse = mouse.wait
  
  selectedrow = playlistgrid.row
  If tracks.count > 0 Then 
    firstrow = playlistgrid.Rows.count 
    For Each track In tracks
      myplaylist.AddFile(playlistgrid, track, False)
      Wait
    Next
    GridRefreshWorkaround(playlistgrid)
    TogglePls.value = 1
    If answer = 2 Then 
      playlistgrid.UnSelectAll()
      playlistgrid.row = firstrow
      playlistgrid.Rows[playlistgrid.row].selected = True
      Try Play(PlayListGrid[Playlistgrid.row, MyPlayList.Columnindex["Full Path"]].text)
      If Error Then message.Error(("Something went wrong; does the file exists?"))
      Leftsidetabs.index = Global.TabIndexByName("playlist", Leftsidetabs)
      Leftsidetabs.Refresh
        Else
      playlistgrid.Rows[selectedrow].selected = True
    Endif
  Endif
  
  fmain.mouse = mouse.normal
End

Public Sub AlbumGridView_Menu()
  AlbumGridView.row = AlbumGridView.rowat(Mouse.screeny - AlbumGridView.screeny)
  AlbumGridView.column = AlbumGridView.columnat(Mouse.screenx - AlbumGridView.screenx)
  MyAlbumsLib.SelectCell(AlbumGridView.row, AlbumGridView.Column)
  menupopupalbumview.Popup()
End

Public Sub MenuSetACover_Click()
  Dim album, artist, filepath As String
  Dim r, c As Integer
  r = AlbumGridView.Row
  c = AlbumGridView.Column
  album = MyAlbumsLib.AlbumFromCoordinates(r, c)
  artist = MyAlbumsLib.ArtistFromCoordinates(r, c)
  filepath = MyAlbumsLib.pathFromCoordinates(r, c)

  covermanager.SetACover(filepath, artist, album)
End

Public Sub AlbumGridView_Leave()
  Application.ShowTooltips = GeneralOptions.ToolTipsCHK.value
End

Public Sub LibraryGrid_MouseDown()
  Dim MouseRow As Integer
  Try mouserow = librarygrid.RowAt(mouse.y)
  If Error Then Return

  If mouse.left And Not (mouse.Control Or mouse.Shift) Then 
    librarygrid.UnSelectAll
    librarygrid.Rows[mouserow].selected = True
    librarygrid.row = mouserow
    Return
  Endif

  If Mouse.Right Then
    If Not (librarygrid.rows[mouserow].selected) Then
      librarygrid.UnSelectAll
      ' librarygrid.Rows[mouserow].selected = True  
      ' librarygrid.row = mouserow
    Endif
    librarygrid.Rows[mouserow].selected = True
    librarygrid.row = mouserow
    LibraryGrid_Menu()
  Endif
End

Public Sub PlaylistGrid_MouseDown()
  Dim MouseRow As Integer
  Try mouserow = playlistgrid.RowAt(mouse.y)
  If mouse.left And Not (mouse.Control Or mouse.Shift) Then 
    playlistgrid.UnSelectAll
    playlistgrid.Rows[mouserow].selected = True
    playlistgrid.row = mouserow
    Return
  Endif

  If Mouse.Right Then
    If Not (playlistgrid.rows[MouseRow].selected) Then
      playlistgrid.UnSelectAll
      ' playlistgrid.Rows[MouseRow].selected = True  
      ' playlistgrid.row = mouserow
    Endif
    playlistgrid.Rows[MouseRow].selected = True
    playlistgrid.row = mouserow
    Playlistgrid_Menu()
  Endif
End


' Public Sub shadeuplow_Enter()
'   Dim brother As Gridview
'   For Each brother In Last.Parent.Children 
'     If brother Is Gridview Then Break
'   Next
'   Try brothersproxies.Add(brother.proxy, brother.name)
'   brother.proxy = Last
' End
' Public Sub shadeuplow_Leave()
'   Dim brother As Gridview
'   For Each brother In Last.Parent.Children 
'     If brother Is Gridview Then Break
'   Next
'   Try brother.proxy = brothersproxies[brother.name]
' End


Public Sub ButtonSavePls_Click()
  Dim playlistsfullpath As String = global.ConfPath & "/" & global.UserPlaylistsDir
  If Trim(PlaylistsCombo.text) = "" Then 
    Message.Error(("Please, first enter a playlist name to save"), "Ok")
    Return
  Endif
  If Not Exist(playlistsfullpath) Then
    Try Mkdir playlistsfullpath
    If Error Then 
      Message.Error(("Couldn't make the user playlist directory\n") & playlistsfullpath, ("Ok"))
      Return
    Endif
  Endif
  If Exist(playlistsfullpath & "/" & PlaylistsCombo.text & ".xpl") Then
    If MyQuestion.Ask(PlaylistsCombo.text & " " & ("exists."), ("Overwrite"), ("Never mind")) = 2 Then Return
  Endif
  Try myplaylist.SaveAs(playlistsfullpath & "/" & PlaylistsCombo.text & ".xpl")
  If Error Then 
    Message.Error(("There was an error saving the playlist:\n") & PlaylistsCombo.text, ("Ok"))
      Else
    Message.Info(("Playlist saved:\n") & PlaylistsCombo.text, ("Ok"))
    If PlaylistsCombo.Find(PlaylistsCombo.text) = -1 Then PlaylistsCombo.Add(PlaylistsCombo.text)
  Endif
End

Public Sub PlaylistsCombo_enter()
  Try fillplaylistcombo()
End

Public Sub fillplaylistcombo()
  Dim playlistsfullpath As String = global.ConfPath & "/" & global.UserPlaylistsDir
  Dim aplaylist As String
  Dim previous As String = ""
  Try previous = PlaylistsCombo.text
  Object.Lock(playlistscombo)
  For Each aplaylist In Dir(playlistsfullpath, "*.xpl")
    aplaylist = Replace(aplaylist, ".xpl", "")
    If PlaylistsCombo.Find(aplaylist) = -1 Then PlaylistsCombo.Add(aplaylist)
  Next
  PlaylistsCombo.text = previous
  Object.unLock(playlistscombo)
End

Public Sub ButtonDeletePls_Click()
  Dim playlistsfullpath As String = global.ConfPath & "/" & global.UserPlaylistsDir
  If Trim(PlaylistsCombo.text) = "" Then Return
  If MyQuestion.Ask(("Playlist:") & " " & PlaylistsCombo.text, ("Delete"), ("Never mind")) = 2 Then Return
  Try Kill playlistsfullpath & "/" & PlaylistsCombo.text & ".xpl"
  If Error Then Message.Error(("Couldn't delete") & " " & playlistsfullpath & "/" & PlaylistsCombo.text & ".xpl", ("Ok"))
  Try PlaylistsCombo.Remove(PlaylistsCombo.Find(PlaylistsCombo.text)) 
  PlaylistsCombo.text = ""

End

Public Sub PlaylistsCombo_Click()
  Dim answer As Integer

  Dim playlistsfullpath As String = global.ConfPath & "/" & global.UserPlaylistsDir
  answer = MyQuestion.Ask(("Loading the playlist:") & "\n" & PlaylistsCombo.current.text, ("Load/Replace"), ("Append"))
  'Message.question("Loading the playlist:" & "\n" & PlaylistsCombo.current.text, ("Load/Replace"), ("Append"), ("Never mind"))
  If answer = -1 Then Return
  MyPlaylist.LoadFile(playlistsfullpath & "/" & PlaylistsCombo.text & ".xpl", PlayListGrid, (answer = 2))
  UpdateSearchResults(MyPlayList, PlayListGrid, fmain.FullyLoaded, SearchfieldPLS.text)
End

Public Sub ButtonEPG_Click()
  global.Center(Me, epgform)
  EpgForm.Show()
End


Public Sub ButtonSavePls2_Click()
  If (Not global.initearlyformsdone) Then InitEarlyForms()
  GeneralOptions.show
  GeneralOptions.TabStrip1.index = Global.TabIndexByName(("DVB-T"), GeneralOptions.TabStrip1)
End

Public Sub PictureBox1_Drop()
  Dim droppedfile As String
  Dim mywget As New Wgetclass
  Dim wgetfile As String
  Try droppedfile = Split(Drag.Paste("text/uri-list"), "\n\r", "", True)[0]
  If Error Then 
    Try droppedfile = Split(Drag.Paste("text/plain"), "\n\r", "", True)[0]
    If Error Then Return
  Endif
  droppedfile = DConv(Global.NoFileSuffix(Global.FormatDrag(droppedfile)))

  If droppedfile Like "http*://*" Then
    Try wgetfile = (mywget.DownloadAsync(droppedfile, True))
    If Error Then
      Message.Error(("Couldn't download:\n" & droppedfile))
      Return
    Endif
    Try picturebox1.Picture = picture.Load(wgetfile)
    If Not Error Then 
      If MyQuestion.Ask(("Would you like to save the current profile?"), "Save", "Don't Save") = 1 Then 
        Try Kill global.confpath & "/" & ".bottombackground"
        Try Copy wgetfile To global.confpath & "/" & ".bottombackground"
        generaloptions.Init()
        generaloptions.FirstLoadIfNeeded()
        generaloptions.BottomPanelImage.text = global.confpath & "/" & ".bottombackground"
        generaloptions.SaveCurrentTo(global.CurrentProfile)
        'fmain.MenuSaveDefault_Click()
      Endif
    Endif
    'If Not Error Then fmain.Picture = picturebox1.Picture.Image.Stretch(fmain.w, fmain.h).picture
  
      Else 'local file
        
    Try picturebox1.Picture = picture.Load(droppedfile)
    If Not Error Then 
      'fmain.Picture = picturebox1.Picture.Image.stretch(fmain.w, fmain.h).picture
      If MyQuestion.Ask(("Would you like to save the current profile?"), "Save", "Don't Save") = 1 Then 
        Try Kill global.confpath & "/" & ".bottombackground"
        Try Copy droppedfile To global.confpath & "/" & ".bottombackground"
        generaloptions.Init()
        generaloptions.FirstLoadIfNeeded()
        generaloptions.BottomPanelImage.text = global.confpath & "/" & ".bottombackground"
        generaloptions.SaveCurrentTo(global.CurrentProfile)
        'fmain.MenuSaveDefault_Click()
      Endif
    Endif
  Endif

End

' Public Sub ButtonmenuBTN_Click()
'   ButtonMenu.init()
'   Buttonmenu.Move(mouse.screenx, mouse.screeny)
'   Buttonmenu.show  
' End





Public Sub GetLastVersion()
  Dim httpclient1 As Httpclient
  httpclient1 = New Httpclient As "httpclientlastversion"
  If Not (Exist(global.ConfPath & "/nocheckupdates")) Then
 ' If User.Id <> 0 Then
    HttpClient1.url = "http://xt7-player.sourceforge.net/xt7forum/checkupdates.php"
      Else  
    HttpClient1.url = "http://xt7-player.sourceforge.net/xt7forum/index.php"
  Endif
  HttpClient1.Async = True
  HttpClient1.timeout = 10 
  Try HttpClient1.Get()
End


Public Sub PictureBox1_MouseMove()
End

Public Sub VideoAreaGroup_MouseMove()

   videobox.SetFocus()  
   outerbox.mouse = Mouse.default
   videobox.mouse = Mouse.default
  ' If Mouse.screenx < (outerbox.screenx + 10) Then UseFakeSplit()
  ' If Lower(mplayer.Media_FullPath_Playing) Like "dvdnav*" Then
  '   Try mplayer.Send("set_mouse_pos " & (mouse.screenx - VideoBox.screenx) & " " & (mouse.screeny - VideoBox.screeny))
  '   Return
  ' Endif
  If global.pluginmode Then
    timerpluginmode.Stop()
    If fsform.fullscreen Then 
      Return
        Else
      cachebar.Move(0, bottomvbox.y - cachebar.h)
      bottomvbox.visible = True
      cachebar.raise
      cachebar.Show
      timerpluginmode.Start()
    Endif
      Else
    If fsform.fullscreen Then 
      HideMouseDelayed()
    Endif
  Endif
End


Public Sub timerpluginmode_Timer()
    bottomvbox.visible = False
    cachebar.visible = False
End


Private timerpluginmodenabled As Boolean = False
Public Sub ControlFrame_Enter()
   timerpluginmodenabled = timerpluginmode.enabled
   timerpluginmode.stop
End
Public Sub ControlFrame_Leave()
  timerpluginmode.enabled = timerpluginmodenabled
End

Private Sub CantSeekMessage()
  If Not mplayer.ProcessRunningOvr() Then Return
  mplayer.ShowText(("Stream is not seekable, use arrow keys or doubleclick"), 1000)
  StatusLabelLeft.foreground = Color.green
  StatusLabelLeft.text = " " & ("Stream is not seekable!, use arrow keys or doubleclick to override")
  'OneSecTimer.stop
  Stopmthumbler()
  Wait 1
  'OneSecTimer.Trigger
  Wait
  StatusLabelLeft.foreground = Color.white
  'OneSecTimer.start
End

Public ThumblerActive As Boolean = False
Public Sub ProgressFrame_MouseDrag()
  Dim relative As Float
  Dim msg As String
  If Not mplayer.ProcessRunningOvr() Then Return
  If CanUseThumbler() Then 
    TimerSeekThumble.start
    movethumble()
  Endif

  If Not mplayer.ProcessRunningOvr() Then Return
  
  If (mplayer.getP("partially-seekable") = "yes") Then 
    CantSeekMessage()
    Return
  Endif
  
  relative = (mouse.x / progressframe.w)
  
  If relative <= 0 Then 
    relative = 0.00000000000000000000001
      Else
        If relative > 1 Then relative = 1
  Endif
  'Debug relative
  msg = (" seek to:") & " " & mplayer.FormatTime(CInt(mplayer.getP("=length") * relative))
  'msg = ("seek to:") & " " & mplayer.getP("length")
   'seekbar.value = mouse.x / seekbar.w
   seekbar.value = mouse.x / Last.w
   SetProgress(seekbar.value)
  StatusLabelLeft.text = msg
  mplayer.ShowText(msg, 1000)
End



Public Sub Form_Show()
  HSplit1_Resize()
End

Public Sub FileView1_beforeArrange()
  Dim newsize As Integer = 9
  Try newsize = CInt(fileview1.Font.TextHeight("|") / 2.5) 
  If newsize > 9 Then newsize = 9
  Try shadeup.h = newsize

  shadeup.visible = False
  shadeup.Reparent(fileview1.parent)
  ' shadelow.Reparent(Last.parent)
End

Public Sub FileView1_Arrange()
  Dim achild As Object
  For Each achild In FileView1.Children
    If achild Is Columnview Then
      If achild.proxy Is Gridview Then
        'Stop
        shadelist(achild.proxy, Object.GetProperty(FileView1.Parent, "padding") + achild.proxy.clientx - 1, FileView1.y - 1)
        If fmain.fullyloaded Then shadeup.visible = True
      Endif
    Endif
  Next
End

' Public fakesplit As New Panel(zzzfake) As "Fakesplit"
' 
' Public Sub Fakesplit_Enter()
'   Last.mouse = mouse.SplitH
' End
' 
' Public Sub Fakesplit_Leave()
'   Last.mouse = mouse.default
'   fakesplit.hide
' End
' 
' Public Sub Fakesplit_MouseMove()
'   Dim delta As Integer
'   delta = fakesplit.screenx - fakesplit.x 
'   fakesplit.x = mouse.screenx - delta
' End
' 
' Public Sub Fakesplit_DblClick()
'   Dim splitterw As Integer = hsplit1.w - (hsplit1.Layout[0] + hsplit1.Layout[1])
'   Dim tmplayout As Integer[] = hsplit1.layout
'   If hsplit1.Layout[0] > 20 Then
'   tmplayout[1] = (hsplit1.w - splitterw)
'   tmplayout[0] = (hsplit1.w - tmplayout[1] - splitterw)
'   Else
'   tmplayout[0] = (fmain.w Div 3)
'   tmplayout[1] = hsplit1.w - tmplayout[0] - splitterw
'   Endif
'   hsplit1.Layout = tmplayout
'   Hsplit1_MyRefresh()
'   fakesplit.lower
'   fakesplit.visible = False
'   Object.Detach(fakesplit)
' End
' 
' Public Sub UseFakeSplit()
'   If SwitchingFullScreen Then Return
'   If (fakesplit.parent.name <> Me.name) Then fakesplit.Reparent(fmain)
'   Object.Attach(fakesplit, fmain, "fakesplit")
'   fakesplit.Background = color.selectedbackground
'   fakesplit.Ignore = True
'   Try fakesplit.x = Leftsidepanel.w - 5 'Mouse.screenx - fmain.screenx - 5  'hsplit1.Layout[0]
'   If Error Then Return
'   fakesplit.border = border.none
'   fakesplit.w = 10 'hsplit1.w - (hsplit1.Layout[0] + hsplit1.Layout[1])
'   If fmain.menus.visible Then
'     fakesplit.y = hsplit1.screeny - fmain.screeny - fmain.font.TextHeight("|JIq") - desktop.scale
'       Else
'     fakesplit.y = hsplit1.screeny - fmain.screeny - 1
'   Endif
' 
'   fakesplit.h = hsplit1.h
'   fakesplit.raise
'   fakesplit.visible = True
'   fakesplit.SetFocus()
' End
' 
' 
' Public Sub LeftSidePanel_MouseMove()
'   If Mouse.x > Last.w - 10 Then UseFakeSplit()
' End
' Public Sub RightSidePanel_MouseMove()
'   If Mouse.x < 10 Then UseFakeSplit()
' End
' 
' Public Sub FakeSplitRefresh()
' Dim splitterw As Integer = hsplit1.w - (hsplit1.Layout[0] + hsplit1.Layout[1])
' Dim tmplayout As Integer[] = hsplit1.layout
'   tmplayout[1] = (hsplit1.w - fakesplit.x - splitterw)
'   tmplayout[0] = (hsplit1.w - tmplayout[1] - splitterw)
'   hsplit1.Layout = tmplayout
'   Hsplit1_MyRefresh()
' End



' Public Sub Fakesplit_MouseUp()
'    FakeSplitRefresh()
' End

Public Sub UrlBox_Change()
  If Not fmain.fullyloaded Then Return
  fileview1.Refresh()
  fileview1.UnselectAll()
  FileView1_Arrange()
End





Public Sub volumecontainer_Arrange()

  SaveVolumeSlider.w = Last.w

End

Public Sub textlabel1_MouseWheel()

  If Mouse.Delta > 0 Then 
    mplayer.Send("seek +20")
    mplayer.do_seek_by("+20")
      Else
    mplayer.do_seek_by("-20")
  Endif
  UpdateSeekSlider()
End

Public Sub ControlPanel_Drop()
   PictureBox1_Drop()
End

Public Sub ControlPanelRight_Drop()
   PictureBox1_Drop()
End



Public mthumbler As Mplayerclass
Public Sub ActivateThumbler()
'fixmempv stub
  Dim opts As String = "-noconfig all -noautosub -nosub -osdlevel 0 -nocache -nosound -zoom -loop 0 -speed 0.5"
  Dim fullpath As String

  If Not mplayer.ProcessRunningOvr() Then Return
  fullpath = mplayer.get_property_mpv("path", True)
  If fullpath = "" Then Return
  
  ' fixmempv ipv4 and ipv6 selection seems to be gone in mpv (?)
  ' If mplayer.commandline Like "* -prefer-ipv4 *" Then 
  '   opts &= " -prefer-ipv4 "
  '     Else If mplayer.commandline Like "* -prefer-ipv6 *" Then 
  '       opts &= " -prefer-ipv6 "
  ' Endif
  thumblebox.Hide()
  
  mthumbler = New Mplayerclass

  mthumbler.set_option("config", "no")
  mthumbler.set_option("input-conf", "/tmp/FakeInput.conf")
  mthumbler.set_option("load-scripts", "no")
  mthumbler.set_option("osc", "no")
  mthumbler.set_option("input-cursor", "no")
  mthumbler.set_option("input-vo-keyboard", "no")  
  mthumbler.set_option("sub-auto", "no")
  'mthumbler.set_option("sub", "no") 'deprecated in mpv (?)
  mthumbler.set_option("osd-level", "0")
  mthumbler.set_option("cache", "no")
  mthumbler.set_option("no-audio", "")
  mthumbler.set_option("loop", "inf")
  mthumbler.set_option("speed", "0.5")
  mthumbler.set_option("vd-lavc-fast", "yes")
  mthumbler.set_option("vd-lavc-skiploopfilter", "all")
  mthumbler.set_option("wid", thumblevideo.handle)
  mthumbler.set_option("vo", "xv,x11") 'mpv has issues when using opengl over opengl (no pip with opengl :( )
  

  mthumbler.do_play(fullpath)
  While Not mthumbler.ProcessRunningOvr()
    Wait 0.1
  Wend
  While mthumbler.get_property_mpv("video-params/aspect") = "(unavailable)" 'needed later to size the thumbler box
    Wait 0.1
  Wend
  mthumbler.Renice(GeneralOptions.NiceLevelSpinBox.value + 5, True)
  ThumblerActive = True
  'movethumble()
  ' If global.MouseInside(panel9) Then
  '   If Mouse.left Then movethumble()
  ' Endif
End

Public Sub HideThumbler()
  If Not thumbleractive Then Return
  If Not thumblebox.visible Then Return
  mthumbler.do_pause()
  TimerSeekThumble.stop
  thumblebox.hide
  Wait 0.1
  thumblebox.hide
End


Public Sub ProgressFrame_Leave()
  HideThumbler()
End


Private previoustimerseek As Integer = 0
Public Sub TimerSeekThumble_Timer()
  Dim newseek As Integer
  If Not thumbleractive Then activatethumbler()
  mthumbler.do_leave_pause()
  newseek = (seekbar.value * 100) 
  If newseek > 99 Then newseek = 99
  If newseek <> previoustimerseek Then
    mthumbler.do_seek(newseek)
    previoustimerseek = newseek
  Endif
End

Private Sub movethumble()
  Dim x, y, w, h As Integer
  Dim ar As Float = -1
  Dim t As String
  If Not thumbleractive Then Return
  If Not mplayer.ProcessRunningOvr() Then Return
  If Not mthumbler.ProcessRunningOvr() Then Return
  Try ar = CFloat(mthumbler.getP("video-params/aspect"))
  If ar = -1 Then Return
  w = (Screen.width Div 6)
  Try h = (w / ar) 
  If Error Then Return
  x = Mouse.screenx - (thumblebox.h Div 2) - outerbox.screenx
  y = controlframe.screeny - outerbox.screeny - thumblebox.h - cachebar.h  'outerbox.screeny + outerbox.h - thumblebox.h - 1
  thumblebox.Move(x, y, w, h)
  Wait
  thumblebox.show()
  thumblebox.Raise()
End



Private Function CanUseThumbler() As Boolean
  If mplayer.getP("audioonly") Then Return False
  If (mplayer.getP("partially-seekable") = "yes") Then Return False
  If Not mplayer.ProcessRunningOvr() Then Return False
  If mplayer.getP("fullpath") Like "*ttp://*youtube*" Then
    If (generaloptions.SeekThumbsYoutubeCheckbox.value = True) Then 
      Return True
        Else
      Return False
    Endif
  Endif
  If global.IsNetworkURI(mplayer.getP("fullpath")) Then Return False
  If (generaloptions.SeekThumbsCheckbox.value = True) Then Return True
  Return True
End

Private Sub Stopmthumbler()
  TimerSeekThumble.stop
  Try mthumbler.do_stop()
  thumblebox.Hide()
  thumbleractive = False
End

Public Sub ProgressFrame_MouseWheel()
  If mplayer.ProcessRunningOvr() Then
    If Mouse.delta > 0 Then
      seekbar.value += 0.01
      SetProgress(seekbar.value)
        Else
      seekbar.value -= 0.01
      SetProgress(seekbar.value)
    Endif
  Endif
  SeekBar_Change()
End



Public Sub FileView1_KeyPress()

  If (Key.code = Key.enter) Or (Key.code = Key.return) Then
    If fileview1.Selection.count > 0 Then
      If IsDir(fileview1.dir & "/" & fileview1.selection[0]) Then
        urlbox.text = fileview1.dir & "/" & fileview1.selection[0]
        UrlBox_Click
          Else 'isfile
        Play(fileview1.dir & "/" & fileview1.selection[0])
        SetActivePlayQueue("browse")
      Endif
    Endif
    Return
  Endif
  If Key.code = Key.BackSpace Then
    ButtonUp_Click()
    Debug
    Return
  Endif

  If Key.code = Key.Delete Then
    MenuBrowseDelete_Click()
    Debug
    Return
  Endif

  If Key.code = Key.f5 Then
    ButtonRefresh_Click()
    Debug
    Return
  Endif
  
  
  If Key.text = "" Then Return
  If Not SelectFileviewFromKey(key.text) Then
    fileview1.UnselectAll()
    SelectFileviewFromKey(key.text) 
  Endif
End


Private Function SelectFileviewFromKey(akey As String) As Boolean
  Dim currentindex, toselect As Integer
  Dim currentstring As String = ""
  Try currentstring = fileview1.selection[0]
  fileview1.SelectAll
  If currentstring <> "" Then 
    currentindex = fileview1.Selection.Find(currentstring)
      Else
    currentindex = -1
  Endif
  Debug currentindex
  toselect = fileview1.Selection.Find(aKey & "*", gb.like, currentindex + 1)
  If toselect >= 0 Then 
    fileview1.current = fileview1.Selection[toselect]
    Return True
      Else
    Try fileview1.current = currentstring
    Return False
  Endif
End


Private PlayQueueIs As String 'remember where the Last played item is from
  Public Sub SetActivePlayQueue(Queue As String)
    Dim i As Integer
    For i = 0 To Leftsidetabs.count - 1
      If Leftsidetabs[i].text Like "< * >" Then Leftsidetabs[i].text = Replace(Replace(Leftsidetabs[i].text, " >", ""), "< ", "")
    Next
  
    PlayQueueIs = queue
    If Right(Leftsidetabs.Current.text) <> " >" Then Leftsidetabs.Current.text = "< " & Leftsidetabs.Current.text & " >"
  End
  
  Public Function GetActivePlayQueue() As String
    Return PlayQueueIs
  End


Public Sub ButtonStop_MouseDown()
   flipbutton(Last)
End
Public Sub ButtonStop_Mouseup()
  flipbutton(Last)
End
Public Sub Buttonplay_MouseDown()
   flipbutton(Last)
End
Public Sub Buttonplay_Mouseup()
  flipbutton(Last)
End
Public Sub Buttonprev_MouseDown()
   flipbutton(Last)
End
Public Sub Buttonprev_Mouseup()
  flipbutton(Last)
End
Public Sub Buttonnext_MouseDown()
   flipbutton(Last)
End
Public Sub Buttonnext_Mouseup()
  flipbutton(Last)
End
Public Sub Buttonrew_MouseDown()
   flipbutton(Last)
End
Public Sub Buttonrew_Mouseup()
  flipbutton(Last)
End
Public Sub Buttonfwd_MouseDown()
   flipbutton(Last)
End
Public Sub Buttonfwd_Mouseup()
  flipbutton(Last)
End
Public Sub buttoncapture_MouseDown()
   flipbutton(Last)
End
Public Sub buttoncapture_Mouseup()
  flipbutton(Last)
End
Public Sub ButtonNowNext_MouseDown()
   flipbutton(Last)
End
Public Sub buttonnownext_Mouseup()
  flipbutton(Last)
End


Private Sub flipbutton(thebutton As Object)
   If fmain.fullyloaded Then theButton.picture = theButton.Picture.Image.Mirror(False, True).picture
End

Public Sub ExtractAudioLibrarymenu_Click()
  Dim selecteditems As New String[]
  Dim i As Integer
  For i = 0 To librarygrid.Rows.max
    If librarygrid.Rows[i].Selected Then selecteditems.Add(librarygrid[i, mylibrary.Columnindex["Full Path"]].text)
  Next
  ExtractAudio(selecteditems)
End

Public Sub ExtractAudioPlaylistmenu_Click()
  Dim selecteditems As New String[]
  Dim i As Integer
  For i = 0 To playlistgrid.Rows.max
    If playlistgrid.Rows[i].Selected Then selecteditems.Add(playlistgrid[i, myplaylist.Columnindex["Full Path"]].text)
  Next
  ExtractAudio(selecteditems)
End

Public Sub youtubetreeextractaudio_Click()
  Dim selecteditems As New String[]
  Try selecteditems.Add(youtubetree.Current.Key)
  If Not Error Then
    Try ExtractAudio(selecteditems)
      Else
    Message.Error(("Error while getting selection"))
  Endif
End

Public Sub MenuBrowseExtractAudio_Click()
  Dim selecteditems As New String[]
  Dim item As String
  For Each item In fileview1.selection
    selecteditems.Add(fileview1.Dir & "/" & item)
  Next
  
  Try ExtractAudio(selecteditems)
End


Public Sub ExtractAudio(selecteditems As String[])
  ' If audioconvert.converting Then
  '   Message.Error("Sorry, another conversion is in progress")
  '     Else
  '   audioconvert.items = selecteditems
  ' Endif
  audioconvert.items.Insert(selecteditems)
  If (Not audioconvert.visible) Then global.Center(fmain, audioconvert)

  audioconvert.show()
End


Public Sub ButtonRadios_click()
  Last.mouse = mouse.Wait
  If buttonicecast.value Then
    If Not fmain.fullyloaded Then Return
    Try IceRadio.FillGenresTree(genrestree, True)
  Else
    MyRadio.FillCachedGenres(genrestree)
  Endif
  Last.mouse = mouse.Normal
End



Public Sub Initprogress()
  'Dim barpicture As New Picture
  'barpicture.Resize(10, 10)
  'barpicture.Fill(Color.red) 'Selectedbackground)
  'barpicture.Fill(Color.Selectedbackground)
  'Progress.Picture = barpicture
  'Progress.Picture = Picture.Load("shadow.png")
  'progress.Picture = progress.Picture.Image.Desaturate().Colorize(Color.selectedbackground).picture
  'progress.Picture = progress.Picture.Image.Colorize(Color.lightBackground).Contrast(0.75).brightness(-0.10).picture
  progress.picture = Picture.Load("barglow.png")
 
  'progress.Picture = progress.Picture.Image.Colorize(Color.lightBackground).Contrast(0.5).brightness(-0.20).picture
  progress.Picture = progress.Picture.Image.Colorize(Color.lightBackground).Contrast(0.5).brightness(-0.20).picture
  progress.Move(0, 0, 0, progress.parent.h)
  'ProgressGlow.Move(0, 0, 0, progress.Parent.h)
  ProgressFrame.proxy = progress
End

Public Sub SetProgress(newset As Float)
  Dim border As Integer = 0
  Dim bor As Integer = 0
  ' Dim newpos As Integer = CInt(progress.parent.clientw * newset)
  ' progress.Move(ProgressFrame.clientx, ProgressFrame.clienty, newpos, progress.Parent.clienth)
  ' ProgressGlow.Move(Progressframe.clientx, ProgressFrame.clienty, newpos, progress.Parent.clienth)

   'Dim newpos As Integer = CInt(ProgressFrame.clientw * newset - ProgressFrame.padding)
   Dim newpos As Integer = CInt(ProgressFrame.clientw * newset - ProgressFrame.padding)
   If newpos < border Then newpos = border
   'progress.Move(0, 0, newpos, progressframe.h)
    'progress.Move(progressframe.clientx, progressframe.clienty, newpos, progressframe.clienth)
    progress.Move(progressframe.clientx + bor, progressframe.clienty + bor, newpos - border, progressframe.clienth - border)
   'ProgressGlow.Move(progresscontainer.clientx, progresscontainer.clienty, newpos, progressframe.clienth)
  'Debug seekbar.visible

End




' Public Sub textboxdata_Activate()
' Stop
'     Debug mplayer.GetProperty("pause")
' 
' End




Public Sub textboxdata_Activate()
  Debug mplayer.send(Last.text)
End

Public Sub textboxdata_KeyPress()

  

End




Private ABLoopInitValue As Float = 99999.99999
Private ABLoopInitText As String = "(AB)-A"
Private ABLoopA As Float = ABLoopInitValue
Private ABLoopB As Float = ABLoopInitValue

Private Sub InitABLoop()
  ABLoopA = ABLoopInitValue
  ABLoopB = ABLoopInitValue
  ABLoopButton.text = ""
  ABLoopButton.picture = Picture["media-loop-off.png"]
  ABLoopButton.value = False
  ABLoopButton.tooltip = ("No loop set")
  ABLoopTimer.stop
End


Public Sub ABLoopButton_mouseup()
  Dim StartTime As Float = Timer()
  Dim timeout As Integer = 100
  
  'mplayer not running or cancel loop -> init and return
  If Not mplayer.ProcessRunningOvr() Or (ABLoopB <> ABLoopInitValue) Or Mouse.Right Then 
    InitABLoop()
    Return
  Endif

  If ABLoopA = ABLoopInitValue Then 'A loop not set -> get loop point A
    Repeat
      Try ABLoopA = mplayer.CurrentTimeFloat()
      If ABLoopA = ABLoopInitValue Then 
        Wait 0.1
        timeout -= 1
      Endif
    Until (ABLoopA <> ABLoopInitValue) Or timeout = 0
    If timeout <> 0 Then
      ABLoopA -= Round((Timer() - starttime), 1)
      ABLoopButton.picture = Picture["media-loop-a.png"]
      ABLoopButton.tooltip = CStr(AbLoopA) & "<->"
    Endif
    Return
      
      Else 'B loop not set -> get loop point B and start the loop
    
    Repeat
      Try ABLoopB = mplayer.CurrentTimeFloat()
      If ABLoopB = ABLoopInitValue Then 
        Wait 0.1
        timeout -= 1
      Endif
    Until (ABLoopB <> ABLoopInitValue) Or timeout = 0
    If timeout <> 0 Then
      ABLoopB -= Round((Timer() - starttime), 1)
      If ABLoopA >= ABLoopB Then
        Debug
        Debug "Loop Point A >= Loop Point B, and cannot loop backwards, please retry."
        ABLoopB = ABLoopInitValue
        Return
      Endif
      ABLoopButton.picture = Picture["media-loop-ab.png"]
      ABLoopButton.tooltip = CStr(AbLoopA) & "<->" & CStr(AbLoopB)
      ABLoopTimer.delay = CInt((ABloopB - ABLoopA) * 100 / 4) 'be light on this
      ABLoopTimer.start
      ABLoopTimer.trigger

    Endif    
  Endif
End

Public Sub ABLoopTimer_Timer()
  Dim mptime As Float = 99999.99999
  Dim timeout As Integer = 100 'centisecs
  Dim newdelay As Integer
  Repeat
    mptime = mplayer.CurrentTimeFloat()
  Until mptime <> 99999.99999 Or (timeout = 0)
  If timeout = 0 Then
    Debug
    Debug "Couldn't get current time -> cannot loop!"
     ABLoopTimer.delay = 1000 'safe value
    Return
  Endif

  If mptime >= ABLoopB Then 

    mplayer.Send("seek " & CStr(ABLoopA) & " 2")
    CInt((ABloopB - ABLoopA) * 100 / 4) 'be light on this
    Return
  Endif
  
  newdelay = CInt(((ABloopB - mptime) * 1000) / 2)
  If newdelay < 50 Then newdelay = 50
  ABLoopTimer.delay = newdelay

End






Public Sub bPrev_Click()
  mplayer.mpv_command(["discnav", "prev"])
End

Public Sub bUp_Click()
  mplayer.mpv_command(["discnav", "up"])
End

Public Sub bMenu_Click()
  mplayer.mpv_command(["discnav", "menu"])
End

Public Sub bLeft_Click()
  mplayer.mpv_command(["discnav", "left"])
End

Public Sub bSelect_Click()
  mplayer.mpv_command(["discnav", "select"])
End

Public Sub bRight_Click()
  mplayer.mpv_command(["discnav", "right"])
End

Public Sub bDown_Click()
  mplayer.mpv_command(["discnav", "down"])
End

Private Sub hide_on_fs(f As Form)
  'attempt to fix a problem with newchains window not appearing
  'when called from fullscreen
  If fsform.FullScreen Then
    f.Hide
    Wait 0.1
  Endif
End


Public Sub GeneralOptionsmenupopup_Click()
  Me.mouse = Mouse.Wait
  GeneralOptions.show
  Me.mouse = Mouse.Default
End
Public Sub ChainsMenuPopup_Click()
  Me.mouse = Mouse.Wait
  hide_on_fs(newchains)
  NewChains.show
  Me.mouse = Mouse.Default
End
Public Sub VideoFiltersMenuPopup_Click()
  Me.mouse = Mouse.Wait
  hide_on_fs(newchains)
  NewChains.show_video_filters()
  Me.mouse = Mouse.Default
End
Public Sub VideoDriversMenuPopup_Click()
  Me.mouse = Mouse.Wait
  hide_on_fs(newchains)
  NewChains.show_video_drivers()
  Me.mouse = Mouse.Default
End
Public Sub AudioFiltersMenuPopup_Click()
  Me.mouse = Mouse.Wait
  hide_on_fs(newchains)
  NewChains.show_audio_filters()
  Me.mouse = Mouse.Default
End
Public Sub AudioDriversMenuPopup_Click()
  Me.mouse = Mouse.Wait
  hide_on_fs(newchains)
  NewChains.show_audio_drivers()
  Me.mouse = Mouse.Default
End
Public Sub SubsAndOsdMenuPopup_Click()
  Me.mouse = Mouse.Wait
  hide_on_fs(subandosd)
  SubAndOsd.show
  Me.mouse = Mouse.Default
End
Public Sub HotKeysMenuPopup_Click()
  Me.mouse = Mouse.Wait
  hide_on_fs(hotkeys)
  HotKeys.show
  Me.mouse = Mouse.Default
End

Public Sub ButtonmenuNEWBTN_click()
  topmenu.popup
End
