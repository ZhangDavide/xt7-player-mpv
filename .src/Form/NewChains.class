' Gambas class file

Public AlreadyLoaded As Boolean = False 'true if the form loaded it's settings from disk at least one time
Public InitDone As Boolean = False

Private Sub fill_tabstrip(aTabstrip As Tabstrip, aScrollview As Scrollview)
  Dim i As Integer
  Dim tabScrollview As ScrollView
  Dim tabstrip_elements As New String[]
  aTabstrip.count = aScrollview.children.count
  For i = 0 To aTabstrip.count - 1
      aTabstrip.index = i
      aTabstrip.text = aScrollview.Children[i].name
      aTabstrip.Arrangement = Arrange.Vertical
    If aScrollview.Children[i].name <> "equalizer" Then 'do not make a scrollview for preconfigured (drawed with the ide) filters.
      tabScrollview = New ScrollView(aTabstrip)
      tabScrollview.name = aTabstrip.text & ".ScrollView"
      tabScrollview.expand = True
      tabScrollview.Arrangement = Arrange.vertical
      tabScrollview.padding = 8
      tabScrollview.Spacing = True
      tabScrollview.border = False
      tabScrollview.margin = True
      tabScrollview.ScrollBar = Scroll.Both
    Endif
    tabstrip_elements.Add(Lower(aTabstrip.text))
  Next 'i
  aTabstrip.tag = tabstrip_elements
End

Private tabs As String[] = ["filters_video", "filters_audio", "drivers_video", "drivers_audio"] '<-this has to reflect the main tabs order



Private Sub Init_filters_audio()
  Dim filters_audio_list As New String[]
  Dim filter As String
  filters_audio_list = ["equalizer", "drc", "karaoke", "extrastereo", "scaletempo", "dynaudnorm", "volume", "CustomAudio1", "CustomAudio2", "CustomAudio3", "lavcac3enc"]
  For Each filter In filters_audio_list
    If filter = "scaletempo" Then 
      draw_list_item(filters_audio_container, filter, True)
        Else
      draw_list_item(filters_audio_container, filter)
    Endif
  Next 'filter
  filters_audio_container.tag = TabStrip_filters_audio
  fill_tabstrip(TabStrip_filters_audio, filters_audio_container)
  draw_filters_audio_cfg()
End


Private Sub Init_filters_video()
  Dim filters_video_list As New String[]
  Dim filter As String
  filters_video_list = ["Yadif", "GradFun", "HqDn3D", "UnSharp", "DeLogo", "Eq", "Scale", "Expand"]
  filters_video_list.Insert(["Stereo3D", "CustomVideo1", "CustomVideo2", "CustomVideo3"])
  For Each filter In filters_video_list
    draw_list_item(filters_video_container, filter)
  Next
  filters_video_container.tag = TabStrip_filters_video
  fill_tabstrip(TabStrip_filters_video, filters_video_container)
  draw_filters_video_cfg()
End


Private Sub Init_drivers_audio()
  Dim drivers_audio_list As New String[]
  Dim driver As String
  drivers_audio_list = ["alsa", "pulse", "jack", "pcm", "custom audio", "null"]
  For Each driver In drivers_audio_list
    draw_list_item(drivers_audio_container, driver)
  Next
  tabstrip1.index = tabs.Find("drivers_audio")
  drivers_audio_container.tag = ConfigureTabs_audio
End

Private Sub Init_drivers_video()
  Dim drivers_video_list As New String[]
  Dim driver As String
  drivers_video_list = ["opengl", "xv", "vdpau", "vaapi", "custom video", "null"]
  For Each driver In drivers_video_list
    draw_list_item(drivers_video_container, driver)
  Next
  tabstrip1.index = tabs.Find("drivers_video")
  drivers_video_container.tag = ConfigureTabs_video
End


Private Sub draw_list_item(item_container As Scrollview, item_name As String, Optional checked As Boolean = False)
Dim t As Integer
    'an Hbox container; his name holds the item name information
    filter_box = New Hbox(item_container)
      filter_box.autoresize = True
      filter_box.name = item_name

    'a button to move the item in the list
    filter_button_up = New Button(filter_box) As "filter_button_up"
      filter_button_up.border = False
      filter_button_up.text = ""
      filter_button_up.w = 16
      filter_button_up.h = 16
      filter_button_up.picture = stock["16/up"]
    
    'a button to move the item in the list
    filter_button_down = New Button(filter_box) As "filter_button_down"
      filter_button_down.border = False
      filter_button_down.picture = stock["16/down"]
      filter_button_down.text = ""
      filter_button_down.w = 16
      filter_button_down.h = 16

    'a checkbox to enable/disable the item
    filter_checkbox = New CheckBox(filter_box) As "filter_checkbox"
      Object.Lock(filter_checkbox)
      filter_checkbox.name = item_name & "_checkbox_" & item_container.name
      filter_checkbox.text = Null
      filter_checkbox.autoresize = True
      t = filter_checkbox.w
      filter_checkbox.autoresize = False
      filter_checkbox.w = t * 3 'hack may not work well with all of the themes.
      filter_checkbox.value = checked
      Object.unLock(filter_checkbox)
      
    'finally the text label; his name holds the item name information
    filter_text = New Textlabel(filter_box) As "filter_label"
      filter_text.name = "filter_text." & item_name
      filter_text.text = item_name
      filter_text.Alignment = Align.Left
      filter_text.h = CInt(filter_text.Font.TextHeight("|") * 1.3)
      'filter_text.AutoResize = True
      filter_text.expand = True
      
End


Private Function chain_items_in(item_container As ScrollView) As String[]
  Dim out As New String[]
  Dim i As Object
  For Each i In item_container.Children
    If i Is HBox Then
      out.add(i.name)
    Endif
  Next
  Return out
End


Private Sub ReDraw_Ordered(item_container As Scrollview, chain_items As String[])
  Dim i, j, t As Integer
  Dim childrens As New Object[]

  For i = 0 To item_container.Children.count - 1
    childrens.add(item_container.Children[i])
    t += 1
  Next 'i
  
  For i = item_container.Children.count - 1 DownTo 0
    If item_container.Children[i] Is Hbox Then 
      If item_container.Children[i].parent <> Me Then item_container.Children[i].reparent(Me)
    Endif
  Next 'i

  For i = 0 To chain_items.max
    For j = 0 To childrens.Max
      If childrens[j].name = chain_items[i] Then
         If childrens[j].parent <> item_container Then childrens[j].reparent(item_container)
         childrens.Delete(j)
         Break
      Endif
    Next
  Next
  'if we add some filter/drivers and the user has a previous item order selected,
  'then we must reparent the newly added filters too.
  While childrens.count > 0
   If childrens[0].parent <> item_container Then childrens[0].reparent(item_container)
   childrens.Delete(0)
  Wend

End


Private Sub chain_item_move(itembox As Hbox, up As Boolean) 
  Dim my_pos As Integer
  Dim t As String
  Dim chain_items As String[]
  Dim items_container As Scrollview

  items_container = itembox.parent
  chain_items = chain_items_in(items_container)
  my_pos = chain_items.Find(itembox.name)
  
  t = chain_items[my_pos]

  If up Then 
    If my_pos = 0 Then Return
    chain_items[my_pos] = chain_items[my_pos - 1] 
    chain_items[my_pos - 1] = t 
      Else
    If my_pos = chain_items.max Then Return
    chain_items[my_pos] = chain_items[my_pos + 1] 
    chain_items[my_pos + 1] = t 
  Endif
  ReDraw_Ordered(items_container, chain_items)
End


Private filter_box As Hbox
Private filter_checkbox As CheckBox
Private filter_button_up As Button
Private filter_button_down As Button
Private filter_text As Textlabel


Public Sub filter_button_up_click()
  Dim up As Boolean = True
  chain_item_move(Last.parent, up = True)
End


Public Sub filter_button_down_click()
  Dim up As Boolean = True
  chain_item_move(Last.parent, up = False)
End


Public Sub filter_label_MouseDown()
  select_item(Last)
End

Public Sub filter_checkbox_Click()
    select_item(Last)
End


Public Sub filter_label_Menu()
  If Lower(Last.parent.name) Like "custom*" Then Last.text = MyAskName.Ask(("Rename the current filter:"), Last.text, False)
End


Private Sub select_item(item As Object)
  Dim bro As Object
  If item.parent.parent.enabled Then
    For Each bro In item.parent.parent.Children
      If bro Is HBox Then
        bro.background = Color.TextBackground
        bro.foreground = Color.TextForeground
      Endif
    Next
    item.parent.background = Color.SelectedBackground
    item.parent.foreground = Color.SelectedForeground
  Endif
  Select_tabstrip_item(item.parent.name, item.parent.parent.tag)

  If textareahelp.visible Then
    timerDelayShowHelp.start
  Endif
  

End

Public Sub show_audio_filter(filter_name As String)
  Select_tabstrip_item(filter_name, tabstrip_filters_audio)
End

Public Sub show_video_filter(filter_name As String)
  Select_tabstrip_item(filter_name, tabstrip_filters_video)
End


Private Sub Select_tabstrip_item(item_name As String, aTabstrip As Tabstrip)
  Dim item_tab As Integer = -1
  Dim i As Integer
  helpbox.tag = item_name
  Try item_tab = aTabstrip.Tag.Find(Lower(item_name))
  If item_tab >= 0 Then 
    aTabstrip.index = item_tab
    HelpBox.reparent(aTabstrip)
      Else
    For i = 0 To aTabstrip.count - 1
      aTabstrip.index = i
      If Lower(aTabstrip.caption) = item_name Then 
        HelpBox.reparent(aTabstrip)
        Return
      Endif
    Next
  Endif
End




Public Sub Init()
  Init_drivers_audio()
  Init_drivers_video()
  Init_filters_audio()
  Init_filters_video()
  tabstrip1.index = 0
  initdone = True
End



Private Sub draw_filters_audio_cfg()
  Dim AllParams As New Variant[]
  Dim NotSwitchable As Boolean = False
  Dim Switchable As Boolean = True
  Dim ladspacompiledin As Boolean = False
  Dim aTabstrip As Tabstrip = TabStrip_filters_audio
  ladspacompiledin = FMain.mplayer.supportsladspa()

  AllParams.Clear
  'drc[=method:target]
  AllParams.add(["ROCHOOSE", ("Method"), "1", "2", "VolNorm1", ""])
  AllParams.add(["RANGEFLOAT", ("Target"), "0", "0.25", "2", "VolNorm2", ""])
  Global.DrawGui(AllParams, "drc", aTabstrip, NotSwitchable)
  AllParams.Clear

  'extrastereo[=mul]
  AllParams.add(["RANGEFLOAT", ("Amount"), "0", "2.25", "10", "ExtraStereo1", ""])
  Global.DrawGui(AllParams, "extrastereo", aTabstrip, NotSwitchable)
  AllParams.Clear


  'lavcac3enc
  AllParams.add(["ROCHOOSE", "tospdif=", "yes", "no", "lavcac3enc1", ("Output raw AC-3 stream if no, output to S/PDIF for pass-through if yes (default).")])
  AllParams.add(["ROCHOOSE", "bitrate=", "auto", "96", "128", "192", "224", "320", "448", "512", "640", "lavcac3enc2", ("The bitrate use for the AC-3 stream.")])
  AllParams.add(["ROCHOOSE", "minch=", "3", "2", "3", "4", "5", "6", "lavcac3enc3", ("If the input channel number is less than <minchn>, the filter will detach itself (default: 3).")])
  Global.DrawGui(AllParams, "lavcac3enc", aTabstrip, switchable)
  AllParams.Clear
  
  
  'Karaoke
  Global.DrawGui(AllParams, "karaoke", aTabstrip, NotSwitchable)
  AllParams.Clear



  'volume[=<volumedb>[:...]]
   ' AllParams.add(["RANGE", "volumedb=", "-200", "0", "60", "Volume1", "db"])
    AllParams.add(["RANGE", "replaygain-preamp=", "-20", "0", "20", "Volume4", ("Pre-amplification in dB to apply to the replaygain gain")])
    AllParams.add(["ROCHOOSE", "replaygain-track=", "yes", "no", "Volume2", ("Use track-gain from replaygain metadata value")])
    AllParams.add(["ROCHOOSE", "replaygain-album=", "yes", "no", "Volume3", ("Like replaygain-track, but using the album-gain value")])
    AllParams.add(["ROCHOOSE", "replaygain-clip=", "yes", "no", "Volume5", ("Prevent replaygain clipping by lowering the gain")])
    AllParams.add(["ROCHOOSE", "softclip=", "yes", "no", "Volume6", ("Turns on soft clipping")])
    Global.DrawGui(AllParams, "volume", aTabstrip, Switchable)
    AllParams.Clear
    
  'scaletempo[=option1:option2:...]
  'Syntax for TheParameters is:["SUBLABEL", caption(SubFilterName), TextLabel name ,comment]

    AllParams.add(["ROCHOOSE", "speed=", "both", "tempo", "pitch", "none", "scaletempo1", ("Runtime response to speed change")])
    AllParams.add(["RANGEFLOAT", "scale=", "0.1", "1", "4", "scaletempo5", ""])
    AllParams.add(["RANGE", "stride=", "5", "60", "500", "scaletempo2", ""])
    AllParams.add(["RANGEFLOAT", "overlap=", "0.10", "0.20", "1", "scaletempo3", ""])
    AllParams.add(["RANGE", "search=", "1", "14", "100", "scaletempo4", ""])
    Global.DrawGui(AllParams, "scaletempo", aTabstrip, Switchable)
    AllParams.Clear
    


  'Dynaudnorm lavfi
  'Syntax for TheParameters is:["SUBLABEL", caption(SubFilterName), TextLabel name ,comment]
    AllParams.Add(["TITLE", "Dynamic Audio Normalizer."])
    AllParams.add(["RANGE", "f=", "10", "50", "8000", "dynaudnorm1", "frame length in msec"])
    AllParams.add(["RANGE", "g=", "3", "11", "301", "dynaudnorm2", "filter size (odd numbers)"])
    AllParams.add(["RANGEFLOAT", "p=", "1", "0.95", "1", "dynaudnorm3", "peak value"])
    AllParams.add(["RANGE", "m=", "1", "5", "100", "dynaudnorm4", "max amplification"])
    AllParams.add(["RANGEFLOAT", "r=", "0", "0", "1", "dynaudnorm5", "target RMS"])
    AllParams.add(["RANGE", "n=", "0", "1", "1", "dynaudnorm6", "enable channel coupling"])
    AllParams.add(["RANGE", "c=", "0", "0", "1", "dynaudnorm7", "enable DC correction"])
    AllParams.add(["RANGE", "b=", "0", "0", "1", "dynaudnorm8", "enable alternative boundary mode"])
    AllParams.add(["RANGEFLOAT", "s=", "0", "0", "30", "dynaudnorm9", "compress factor"])    
    Global.DrawGui(AllParams, "dynaudnorm", aTabstrip, False,,, "lavfi")
    AllParams.Clear
    


    
    AllParams.Add(["FREE", ("Custom audio filter(s):"), "", "ACustom11", ("E.g.:resample=44100:1:2,hrtf=s")])
    AllParams.Add(["FREE", ("Custom audio filter(s):"), "", "ACustom12", ("E.g.:resample=44100:1:2,hrtf=s")])
    AllParams.Add(["FREE", ("Custom audio filter(s):"), "", "ACustom13", ("E.g.:resample=44100:1:2,hrtf=s")])
    AllParams.Add(["FREE", ("Custom audio filter(s):"), "", "ACustom14", ("E.g.:resample=44100:1:2,hrtf=s")])
    AllParams.Add(["FREE", ("Custom audio filter(s):"), "", "ACustom15", ("E.g.:resample=44100:1:2,hrtf=s")])
    If ladspacompiledin Then
      Global.DrawGui(AllParams, "CustomAudio1", aTabstrip, Switchable,, ButtonLadspaHelper)
        Else
      Print "WARNING:----------------------------------------------"
      Print "        Your mpv has not been compiled with ladspa support"
      Print "        You will not be able to use any ladspa filter"
      Print "        and ladspahelper window will be unavaileble in xt7."
      Print "        Recompile mpv with ladspa support or ask your"
      Print "        distribution to fix it."
      Print ""
      Global.DrawGui(AllParams, "CustomAudio1", aTabstrip, Switchable)
      
    Endif
    AllParams.Clear
  
    AllParams.Add(["FREE", ("Custom audio filter(s):"), "", "ACustom21", ("E.g.:resample=44100:1:2,hrtf=s")])
    AllParams.Add(["FREE", ("Custom audio filter(s):"), "", "ACustom22", ("E.g.:resample=44100:1:2,hrtf=s")])
    AllParams.Add(["FREE", ("Custom audio filter(s):"), "", "ACustom23", ("E.g.:resample=44100:1:2,hrtf=s")])
    AllParams.Add(["FREE", ("Custom audio filter(s):"), "", "ACustom24", ("E.g.:resample=44100:1:2,hrtf=s")])
    AllParams.Add(["FREE", ("Custom audio filter(s):"), "", "ACustom25", ("E.g.:resample=44100:1:2,hrtf=s")])
    If ladspacompiledin Then
      Global.DrawGui(AllParams, "CustomAudio2", aTabstrip, Switchable,, ButtonLadspaHelper)
        Else
      Global.DrawGui(AllParams, "CustomAudio2", aTabstrip, Switchable)
    Endif

    AllParams.Clear
    
    AllParams.Add(["FREE", ("Custom audio filter(s):"), "", "ACustom26", ("E.g.:resample=44100:1:2,hrtf=s")])
    AllParams.Add(["FREE", ("Custom audio filter(s):"), "", "ACustom27", ("E.g.:resample=44100:1:2,hrtf=s")])
    AllParams.Add(["FREE", ("Custom audio filter(s):"), "", "ACustom28", ("E.g.:resample=44100:1:2,hrtf=s")])
    AllParams.Add(["FREE", ("Custom audio filter(s):"), "", "ACustom29", ("E.g.:resample=44100:1:2,hrtf=s")])
    AllParams.Add(["FREE", ("Custom audio filter(s):"), "", "ACustom30", ("E.g.:resample=44100:1:2,hrtf=s")])
    If ladspacompiledin Then
      Global.DrawGui(AllParams, "CustomAudio3", aTabstrip, Switchable,, ButtonLadspaHelper)
        Else
      Global.DrawGui(AllParams, "CustomAudio3", aTabstrip, Switchable)
    Endif

    AllParams.clear
End


Public Sub ButtonLadspaHelper_Click()
  Dim ptext As String

  If Not global.which("analyseplugin") Then
    If MyQuestion.ask(("Even if your mpv has ladspa support compiled in,\nyou seem to miss the ladspa package.\nbecause 'analyseplugin' executable is not found"), ("Continue anyway"), ("Abort")) = 2 Then Return
  Endif
  ladspahelper.LOADING = True
  Try ptext = Last.previous.text
  If ptext Like "ladspa=*" Then
    ladspahelper.TextBox1.text = ptext
    ladspahelper.button2_click()
  Endif
  global.Center(Me, Ladspahelper)
  ladspahelper.parentcontainer = Last.previous
  ladspahelper.show
  ladspahelper.LOADING = False
End
Private Sub draw_filters_video_cfg()
  Dim AllParams As New Variant[]
  Dim NotSwitchable As Boolean = False
  Dim Switchable As Boolean = True
  Dim aTabstrip As Tabstrip = TabStrip_filters_video
  
  AllParams.Clear
  ' unsharp[=l|cWxH:amount[:l|cWxH:amount]]
  AllParams.add(["CHOOSE", ("Luminance Matrix"), "3:3", "5:5", "7:7", "9:9", "11:11", "13:13", "15:15", "Sharp1", ("The higher, the slower")])
  AllParams.add(["RANGEFLOAT", ("Luma amount"), "-2", "0", "5", "Sharp2", ("Negative means blur")])
  AllParams.add(["CHOOSE", ("Chrominance Matrix"), "3:3", "5:5", "7:7", "9:9", "11:11", "13:13", "15:15", "Sharp3", ("The higher, the slower")])
  AllParams.add(["RANGEFLOAT", ("Chroma amount"), "-2", "0", "5", "Sharp4", ("Negative means blur")])
  Global.DrawGui(AllParams, "unsharp", aTabstrip, NotSwitchable)
  AllParams.Clear
  
  'expand[ = w: h: x: y: o: a: r]
  AllParams.add(["RANGE", ("Width"), "-2048", "0", "2048", "Expand1", ("0 to Disable; Negative as offset to original value")])
  AllParams.add(["RANGE", ("Height"), "-2048", "0", "2048", "Expand2", ("0 to Disable; Negative as offset to original value")])
  AllParams.add(["RANGE", ("X Position"), "-1", "-1", "2048", "Expand3", ("Original image position; -1 to center")])
  AllParams.add(["RANGE", ("Y Position"), "-1", "-1", "2048", "Expand4", ("Original image position; -1 to center")])
  AllParams.add(["CHOOSE", ("Fit an aspect instead of a resolution"), "", "4/3", "3/2", "16/9", "16/10", "1.85/1", "2.35/1", "2.39/1", "Expand6", ""])
  AllParams.add(["RANGE", ("Make Width and Height divisible by"), "1", "1", "64", "Expand7", ""])
  Global.DrawGui(AllParams, "expand", aTabstrip, NotSwitchable)
  AllParams.Clear
  
   
  'hqdn3d[ = luma_spatial: chroma_spatial: luma_tmp: chroma_tmp]
  AllParams.Add(["RANGE", ("Spatial luma strength"), "0", "4", "200", "HqDn3D1", ""])
  AllParams.Add(["RANGE", ("Spatial chroma strength"), "0", "3", "200", "HqDn3D2", ""])
  AllParams.Add(["RANGE", ("Temporal luma strength"), "0", "6", "200", "HqDn3D3", ""])
  AllParams.Add(["RANGE", ("Temporal chroma strength"), "0", "4", "200", "HqDn3D4", ""])
  Global.DrawGui(AllParams, "hqdn3d", aTabstrip, NotSwitchable)
  AllParams.Clear
  
  'scale[=w:h[:ilaced[:chr_drop[:par[:par2[:presize[:noup[:arnd]]]]]]]]
  AllParams.Add(["RANGE", ("Width"), "-11", "0", "2048", "Scale1", ("0 disables scaling,see man below")])
  AllParams.Add(["RANGE", ("Height"), "-11", "0", "2048", "Scale2", ("0 disables scaling,see man below")])
  AllParams.Add(["FREE", ("Scaling Parameters"), "", "Scale5", ("Depends on sws, leave blank if unsure")])
  AllParams.Add(["FREE", ("Scaling Parameters"), "", "Scale6", ("Depends on sws, leave blank if unsure")])
  AllParams.Add(["ROCHOOSE", ("Chroma skipping"), ("0 - Use all available input lines for chroma"), ("1 - Use only every 2. input line for chroma"), ("2 - Use only every 4. input line for chroma"), ("3 - Use only every 8. input line for chroma"), "Scale4", ("lower=slower")])
  AllParams.Add(["ROCHOOSE", ("Disable Upscaling"), ("0 - Allow Upscaling"), ("1 - Disallow if one dimensions exceeds its original value"), ("2 - Disallow if both dimensions exceed their original values"), "scale8", ""])
  AllParams.Add(["ROCHOOSE", ("Accurate Rounding"), ("no - Disable Accurate rounding"), ("yes - Enable Accurate rounding"), "scale9", ""])
  Global.DrawGui(AllParams, "scale", aTabstrip, NotSwitchable)
  AllParams.Clear
  
  'delogo[=x:y:w:h:t]
  AllParams.Add(["RANGE", "X", "0", "0", "2048", "Delogo1", ("TopLeft Corner")])
  AllParams.Add(["RANGE", "Y", "0", "0", "2048", "Delogo2", ("TopLeft Corner")])
  AllParams.Add(["RANGE", ("Width"), "0", "0", "2048", "Delogo3", ""])
  AllParams.Add(["RANGE", ("Height"), "0", "0", "2048", "Delogo4", ""])
  AllParams.Add(["RANGE", ("Tickness"), "-1", "0", "2048", "Delogo5", ("-1 draws a green border")])
  AllParams.add(["SWITCH", "show", "DISABLED", "Delogo6", ("Draw a rectangle showing the area defined by x/y/w/h.")])
  Global.DrawGui(AllParams, "delogo", aTabstrip, NotSwitchable)
  AllParams.Clear

  
  AllParams.Add(["FREE", ("Custom video filter(s):"), "", "VCustom11", ("E.g.:mirror,smartblur=0.4:0.5:10")])
  AllParams.Add(["FREE", ("Custom video filter(s):"), "", "VCustom12", ("E.g.:mirror,smartblur=0.4:0.5:10")])
  AllParams.Add(["FREE", ("Custom video filter(s):"), "", "VCustom13", ("E.g.:mirror,smartblur=0.4:0.5:10")])
  AllParams.Add(["FREE", ("Custom video filter(s):"), "", "VCustom14", ("E.g.:mirror,smartblur=0.4:0.5:10")])
  AllParams.Add(["FREE", ("Custom video filter(s):"), "", "VCustom15", ("E.g.:mirror,smartblur=0.4:0.5:10")])
  Global.DrawGui(AllParams, "CustomVideo1", aTabstrip, Switchable)
  AllParams.Clear
      
  AllParams.Add(["FREE", ("Custom video filter(s):"), "", "VCustom21", ("E.g.:mirror,smartblur=0.4:0.5:10")])
  AllParams.Add(["FREE", ("Custom video filter(s):"), "", "VCustom22", ("E.g.:mirror,smartblur=0.4:0.5:10")])
  AllParams.Add(["FREE", ("Custom video filter(s):"), "", "VCustom23", ("E.g.:mirror,smartblur=0.4:0.5:10")])
  AllParams.Add(["FREE", ("Custom video filter(s):"), "", "VCustom24", ("E.g.:mirror,smartblur=0.4:0.5:10")])
  AllParams.Add(["FREE", ("Custom video filter(s):"), "", "VCustom25", ("E.g.:mirror,smartblur=0.4:0.5:10")])
  Global.DrawGui(AllParams, "CustomVideo2", aTabstrip, Switchable)
  AllParams.Clear

  AllParams.Add(["FREE", ("Custom video filter(s):"), "", "VCustom26", ("E.g.:mirror,smartblur=0.4:0.5:10")])
  AllParams.Add(["FREE", ("Custom video filter(s):"), "", "VCustom27", ("E.g.:mirror,smartblur=0.4:0.5:10")])
  AllParams.Add(["FREE", ("Custom video filter(s):"), "", "VCustom28", ("E.g.:mirror,smartblur=0.4:0.5:10")])
  AllParams.Add(["FREE", ("Custom video filter(s):"), "", "VCustom29", ("E.g.:mirror,smartblur=0.4:0.5:10")])
  AllParams.Add(["FREE", ("Custom video filter(s):"), "", "VCustom30", ("E.g.:mirror,smartblur=0.4:0.5:10")])
  Global.DrawGui(AllParams, "CustomVideo3", aTabstrip, Switchable)
  AllParams.Clear
      
  'eq2[=gamma:contrast:brightness:saturation:rg:gg:bg:weight]
  AllParams.add(["RANGEFLOAT", ("Gamma"), "0.1", "1.0", "10", "Eq1", ("Initial gamma value(default: 1.0)")])
  AllParams.add(["RANGEFLOAT", ("Contrast"), "-2.0", "1.0", "2", "Eq2", ("Initial contrast (-x = negative image)")])
  AllParams.add(["RANGEFLOAT", ("Brightness"), "-1", "0", "1", "Eq3", ("Initial brightness (default: 0.0)")])
  AllParams.add(["RANGEFLOAT", ("Saturation"), "0", "1.0", "3", "Eq4", ("Initial Saturation (default: 0.0)")])
  AllParams.add(["RANGEFLOAT", ("Gamma Red"), "0.1", "1.0", "10", "Eq5", ("gamma for the red component (default: 1.0)")])
  AllParams.add(["RANGEFLOAT", ("Gamma Green"), "0.1", "1.0", "10", "Eq6", ("gamma for the green component (default: 1.0)")])
  AllParams.add(["RANGEFLOAT", ("Gamma Blue"), "0.1", "1.0", "10", "Eq7", ("gamma for the blue component (default: 1.0)")])
  AllParams.add(["RANGEFLOAT", ("Weight"), "0", "1.0", "1", "Eq8", ("Reduce effect of gamma correction")])
  Global.DrawGui(AllParams, "eq", aTabstrip, NotSwitchable)
  AllParams.Clear


 'gradfun[=strength[:radius]]
  AllParams.Add(["RANGEFLOAT", ("Strength"), "0.51", "1.5", "64", "gradfun1", ("Maximum amount by which the filter will change any one pixel.  Also the threshold for detecting nearly flat regions (default: 1.2).")])
  AllParams.Add(["RANGE", ("Radius"), "0", "16", "32", "gradfun2", ("Neighborhood to fit the gradient to.  Larger radius makes for smoother gradients, but also prevents the filter from modifying pixels near detailed regions (default: 16).")])
  Global.DrawGui(AllParams, "gradfun", aTabstrip, NotSwitchable)
  AllParams.Clear
  
 'yadif=[mode[:field_dominance]]
  AllParams.Add(["CHOOSE", ("Deinterlace mode"), "", ("frame - Output 1 frame for each frame."), ("field - Output 1 frame for each field."), ("frame-nospatial - Like 0 but skips spatial interlacing check."), ("field-nospatial - Like 1 but skips spatial interlacing check"), "yadif1", ""])
  Global.DrawGui(AllParams, "yadif", aTabstrip, NotSwitchable)
  AllParams.Clear
  
  
  'stereo3d=[in:out]
  AllParams.Add(["CHOOSE", ("Input format"), ("sbsl - side by side parallel (left eye left, right eye right)"), ("sbsr - side by side crosseye (right eye left, left eye right)"), ("abl - above-below (left eye above, right eye below)"), ("abr - above-below (right eye above, left eye below)"), ("ab2l - above-below with half height resolution (left eye above, right eye below)"), ("ab2r - above-below with half height resolution (right eye above, left eye below)"), "stereo3d1", ""])
  AllParams.add(["CHOOSE", ("Output format"), ("arcg - anaglyph red/cyan gray (red filter on left eye, cyan filter on right eye)"), ("arch - anaglyph red/cyan half colored (red filter on left eye, cyan filter on right eye)"), ("arcc - anaglyph red/cyan color (red filter on left eye, cyan filter on right eye)"), ("arcd - anaglyph red/cyan color optimized with the least squares projection of dubois (red filter on left eye, cyan filter on right eye)"), ("agmg - anaglyph green/magenta gray (green filter on left eye, magenta filter on right eye)"), ("agmh - anaglyph green/magenta half colored (green filter on left eye, magenta filter on right eye)"), ("agmc - anaglyph green/magenta colored (green filter on left eye, magenta filter on right eye)"), ("aybg - anaglyph yellow/blue gray (yellow filter on left eye, blue filter on right eye)"), ("aybh - anaglyph yellow/blue half colored (yellow filter on left eye, blue filter on right eye)"), ("aybc - anaglyph yellow/blue colored (yellow filter on left eye, blue filter on right eye)"), ("irl - Interleaved rows (left eye has top row, right eye starts on next row)"), ("irr - Interleaved rows (right eye has top row, left eye starts on next row)"), ("ml - mono output (left eye only)"), ("mr - mono output (right eye only)"), "stereo3d2", ""])  
  Global.DrawGui(AllParams, "stereo3d", aTabstrip, NotSwitchable)
  AllParams.Clear
End

Private Function parse_video_filter_custom() As String
'will parse the filter which the user can freely configure.
  Dim MyScrollView As Object  'the scrollview present in every tab, parent of all the controls
                              'in the tab, it is created in the fillfilters function
  Dim PanelObject As Object 'the Hbox which contains a single parameter
                            'it is created by DrawFiltersGui function
  Dim SubObject As Object
  Dim customfilter As String = ""

  For Each MyScrollview In TabStrip_filters_video.Children
    For Each PanelObject In MyScrollView.Children
      If PanelObject.name Like "*HBox" Then
        For Each SubObject In PanelObject.Children
          If Not (SubObject Is Label) Then
            If (SubObject Is Checkbox) Then
              If subobject.value = True Then
                If subobject.next Is Textbox Then
                  If Trim(subobject.NEXT.text) <> "" Then
                    If customfilter = "" Then
                      customfilter = customfilter & subobject.NEXT.text
                        Else
                      customfilter = customfilter & "," & subobject.NEXT.text
                    Endif
                  Endif
                Endif
              Endif
            Endif
          Endif
        Next
      Endif
    Next
  Next
  Return customfilter
End


Private Function parse_audio_filter_custom() As String
'will parse the filter which the user can freely configure.
  Dim MyScrollView As Object  'the scrollview present in every tab, parent of all the controls
                              'in the tab, it is created in the fillfilters function
  Dim PanelObject As Object 'the Hbox which contains a single parameter
                            'it is created by DrawFiltersGui function
  Dim SubObject As Object
  Dim customfilter As String = ""

  For Each MyScrollview In TabStrip_filters_audio.Children
    For Each PanelObject In MyScrollView.Children
      If PanelObject.name Like "*HBox" Then
        For Each SubObject In PanelObject.Children
          If Not (SubObject Is Label) Then
            If (SubObject Is Checkbox) Then
              If subobject.value = True Then
                If subobject.next Is Textbox Then
                  If Trim(subobject.NEXT.text) <> "" Then
                    If customfilter = "" Then
                      customfilter = customfilter & subobject.NEXT.text
                        Else
                      customfilter = customfilter & "," & subobject.NEXT.text
                    Endif
                  Endif
                Endif
              Endif
            Endif
          Endif
        Next
      Endif
    Next
  Next
  Return customfilter
End

Private Function Parse_video_filter(Filtername As String) As String
  'will parse the tabstrip at filtername index and output
  'a commandline to add a filter in mplayer
  Dim ParsedFilter As String = Lower(FilterName)
  Dim TmpString As String = ""
  Dim MyScrollView As Object   'the scrollview present in every tab, parent of all the controls in the tab
  Dim PanelObject As Object 'the Hbox which contains a single parameter it Is Created by DrawFiltersGui
  Dim SubObject As Object
  Dim aTabstrip As Tabstrip = TabStrip_filters_video
  Dim i As Integer
  Dim parse As Boolean = True
  Dim out As String
  i = aTabstrip.index
  'Find the ParsedFilter Tab and activate it:
  aTabstrip.index = Global.TabIndexByName(ParsedFilter, aTabstrip)
  If Parsedfilter Like "customvideo*" Then
    out = Parse_video_filter_Custom()
    aTabstrip.index = i
    Return out
      Else
    'Discend the Tab objects,parse them and build the commandline
    'hierarchy is:
    'Tabstrip -> scrollviews -> Panels -> ParameterObjects
    For Each MyScrollview In aTabstrip.Children
      For Each PanelObject In MyScrollView.Children
        If PanelObject.name Like "*HBox" Then
          For Each SubObject In PanelObject.Children
            If Not (SubObject Is Label) Then
              If Not ((SubObject Is Checkbox) Or (subobject.name Like "NOPARSE*")) Then
                parse = True
                  Else
                parse = SubObject.value '(is a checkbox,parse only if it is checked)
              Endif
              If SubObject.text <> "" Then
                If parse Then TmpString = global.RemoveShortcut(TmpString & Split(SubObject.text, " ")[0] & ":")
                  Else
                If parse Then TmpString = global.RemoveShortcut(TmpString & ":")
              Endif
            Endif
          Next
        Endif
      Next
    Next
    TmpString = Left(Tmpstring, Len(TmpString) - 1)
    ' If ParsedFilter Like "pp*" Then 
    '   ParsedFilter = "pp"
    '     Else If (Lower(ParsedFilter) = "myexpand") Then 'gbr3 workaround
    '       parsedfilter = "expand"                       'gbr3 workaround
    ' Endif
  '   If parsedfilter = "stereo3d" Then
  '     global.myDebug( "Adding scale filter after stereo3d filter to avoid problems")
  '     Return ParsedFilter & "=" & TmpString & ",scale"
  '       Else
  '     Return ParsedFilter & "=" & TmpString
  '   Endif
  ' Endif
    Stop
    aTabstrip.index = i
    If tmpstring <> "" Then
      Return ParsedFilter & "=" & TmpString
        Else
      Return ParsedFilter
    Endif

  Endif
End


Private Function Parse_audio_filter(Filtername As String) As String
  'will parse the tabstrip at filtername index and output
  'a commandline to add a filter in mplayer
  Dim ParsedFilter As String = Lower((FilterName))
  Dim TmpString As String = ""
  Dim MyScrollView As Object  'the scrollview present in every tab, parent of all the controls in the tab
  Dim PanelObject As Object 'the Hbox which contains a single parameter it is created by DrawFiltersGui function
  Dim SubObject As Object
  Dim aTabstrip As Tabstrip = TabStrip_filters_audio
  Dim i As Integer
  Dim parse As Boolean = True
  Dim out As String
  Dim is_lavfi As Boolean = False
  i = aTabstrip.index
  
  'Find the ParsedFilter Tab and activate it:
  aTabstrip.index = aTabstrip.Tag.Find(ParsedFilter)
  If ParsedFilter = "equalizer" Then
    out = ParseEq()
    aTabstrip.index = i 
    Return out
  Else If Parsedfilter Like "customaudio*" Then
    out = parse_audio_filter_custom()
    aTabstrip.index = i 
    Return out
      Else
    'Discend the Tab objects,parse them and build the commandline
    'hierarchy is:
    'Tabstrip -> scrollviews -> Panels -> ParameterObjects
    For Each MyScrollview In aTabstrip.Children
      If MyScrollView.tag = "lavfi" Then is_lavfi = True
      For Each PanelObject In MyScrollView.Children
        If PanelObject.name Like "*HBox" Then
          parse = True
          If PanelObject.tag = "lavfi" Then
            Break
          Endif
          For Each SubObject In PanelObject.Children
            If Not (SubObject Is Label) Then
              If (SubObject Is Checkbox) Then
                parse = SubObject.value '(is a checkbox,parse only if it is checked)
                  Else If Lower(subobject.name) Like "noparse*" Then
                    parse = False
              Endif
              If SubObject.text <> "" Then
                If (parse And Not (subobject Is Checkbox)) Then TmpString = global.RemoveShortcut(TmpString & Split(SubObject.text, " ")[0] & ":")
                If (parse And (subobject Is Checkbox)) Then
                  TmpString = global.RemoveShortcut(TmpString & Split(SubObject.text, " ")[0]) 'fixmempv perchè non mette i due punti alla fine del checkbox?
                Endif
                  Else
                If parse Then
                  Print subobject.name
                  TmpString = global.RemoveShortcut(TmpString & ":")
                Endif
              Endif
            Endif
          Next
        Endif
      Next
    Next

    If (Right(tmpstring) = ":") Then
      TmpString = Left(Tmpstring, - 1)
    Endif
    aTabstrip.index = i
    If tmpstring <> "" Then parsedfilter = ParsedFilter & "=" & TmpString
    If is_lavfi Then parsedfilter = "lavfi=[" & parsedfilter & "]"
    Return ParsedFilter

  Endif
End

Public Sub ApplyBTN_Click()
  OkToChangeToCustom = False
  Fmain.apply
  OkToChangeToCustom = True
End



Public Function parse_drivers(audio As Boolean) As String
  Dim item_box As Hbox
  Dim cBox As Checkbox 
  Dim item_name As String
  Dim drivers As String
  Dim item_container As Object
  Dim video_driver_overridden As String = ""

  If audio Then 
    item_container = drivers_audio_container
      Else
    item_container = drivers_video_container
  Endif
  
  If Not audio Then 'search for any override in generaloptions (like hwdec macro)
    Try video_driver_overridden = GeneralOptions.video_driver_overridden() 
    If video_driver_overridden <> "" Then
        drivers &= parse_video_driver(video_driver_overridden, item_container.tag) & ","
        Goto returnlabel
    Endif
  Endif
  
  For Each item_box In item_container.children
    item_name = item_box.name
    cBox = Me.Controls[item_name & "_checkbox_" & item_container.name]  
    If cBox.value = True Then
      If audio Then 
        drivers &= parse_audio_driver(item_name, item_container.tag) & ","
          Else
        drivers &= parse_video_Driver(item_name, item_container.tag) & ","
      Endif
    Endif
  Next
  
  ReturnLabel:
  If Right(drivers) = "," Then drivers = Left(drivers, "-1")
  Return drivers
  
End




Public Function parse_filters(audio As Boolean) As String
  Dim item_name As String
  Dim item_box As Hbox
  Dim cBox As Checkbox
  Dim filters As String
  Dim filters_container As Scrollview
  Dim filter As String
  If audio Then 
    filters_container = filters_audio_container
      Else
    filters_container = filters_video_container
  Endif

  For Each item_box In filters_container.children
    
    item_name = item_box.name
    cBox = Me.Controls[item_name & "_checkbox_" & filters_container.name]
    If cBox.value = True Then
      If audio Then 
        filter = Parse_audio_filter(item_name)        'needed to fix
        If filter <> "" Then filters &= filter & ","  'null custom filters
          Else
        filter = Parse_video_filter(item_name)        'needed to fix
        If filter <> "" Then filters &= filter & ","  'null custom filters
      Endif
    Endif
  Next
  While Right(filters) = ","
    filters = Left(filters, -1)
  Wend
  Return filters
End








'-------------- Manage Audio Equalizer ------------------
Public NewEq As String

Private Function ParseEq() As String

  'Force an update of neweq
  SlidersFreq_Change()
  Return neweq
End

'salva 'il settagio custom su un file
'ricaricalo quando si sceglie custom
'quando salvare il settaggio su un file?
'basta salvarlo quando si cambia preset

Private OkToChangeToCustom As Boolean = True

Public Sub SlidersFreq_Change()
  Dim Theslider, TheTextbox As Object
  Dim params As String = ""
  Dim i As Integer = 0
  If Not presetting Then
    If OkToChangeToCustom Then
      customizing = True
      PresetsCombobox.text = ("Custom")
      customizing = False
    Endif
  Endif
  If UpdatingGui Then Return
  For Each Theslider In sliderscontainer.Children
    If Theslider Is Slider Then
      'params = params & (12 - TheSlider.value - 12) & ":"
      params = params & (TheSlider.value) & ":"
      'params = params & ":"
      TheTextbox = valuescontainer.children[i]
      'TheTextbox.text = (12 - TheSlider.value - 12)
      TheTextbox.text = TheSlider.value
      i = i + 1
    Endif
  Next 'slider
  params = Left$(params, Len(params) - 1)
  NewEq = "equalizer=" & params
  Try FMain.mplayer.send("pausing_keep af_cmdline equalizer " & params)
  If Lower(PresetsCombobox.text) = "custom" Then SaveCustomEqSettings(params)
End

Private presetting As Boolean = False

Private customizing As Boolean = False
Public Sub PresetsCombobox_click()
  If Customizing Then Return
  presetting = True
  Select Case Trim(Lower(PresetsCombobox.text))
    Case "flat"
      UpdateGui("0:0:0:0:0:0:0:0:0:0")
    Case "1965"
      UpdateGui("-20:-7:-4:-7:3:-2:-4:4:1:-6")
    Case "air"
      UpdateGui("0:0:0:0:0:0:0:0:0:3")
    Case "brittle"
      UpdateGui("-12:-9:-7:-5:-2:-2:-2:-1:4:1")
    Case "car stereo"
      UpdateGui("-5:1:0:-4:-5:-3:-2:-2:1:-2")
    Case "classic v"
     UpdateGui("5:0:-5:-8:-7:-4:-3:-1:3:5")
    Case "clear"
     UpdateGui("1:0:0:0:0:0:0:0:2:2")
    Case "death"
     UpdateGui("20:12:4:0:0:0:0:0:0:0")
    Case "dark"
      UpdateGui("-6:-2:-2:-2:-2:-2:-5:-8:-12:-18")
    Case "drums"
     UpdateGui("2:0:0:0:0:0:0:2:0:0")
    Case "home theater"
     UpdateGui("5:0:-3:-6:-5:-1:0:-1:3:3")
    Case "loudness"
      UpdateGui("4:4:-2:-2:-2:-2:-4:-10:0:4")
    Case "metal"
     UpdateGui("4:5:0:-2:0:1:1:1:-1:-1")
    Case "pop"
     UpdateGui("6:3:-2:-4:-3:0:0:2:2:5")
    Case "premaster"
     UpdateGui("0:3:-3:0:0:0:0:3:3:3")
    Case "presence"
      UpdateGui("0:0:0:0:0:5:4:3:0:0")
    Case "punch & sparkle"
      UpdateGui("3:3:-3:-5:-2:1:1:0:1:5")
    Case "shimmer"
      UpdateGui("0:0:-2:-5:0:0:0:4:3:4")
    Case "soft bass"
      UpdateGui("3:4:-13:-5:-1:5:1:-1:-2:-9")
    Case "strings"
      UpdateGui("-3:-4:-5:-4:-2:-2:-2:-1:3:-2")
     Case "custom"
       UpdateGui(LoadCustomEqSettings())
  End Select
  SlidersFreq_Change()
  presetting = False
End

Private UpdatingGui As Boolean = False
Public Sub UpdateGui(Params As String)
  Dim value As Integer
  Dim i As Integer = 0
  Dim valueobj, sliderobj As Object
  UpdatingGui = True
    For Each value In Split(params, ":", "", True)
      valueobj = valuescontainer.children[i]
      sliderobj = sliderscontainer.children[i]
      valueobj.text = value
      sliderobj.value = value
      i = i + 1
    Next 'value
  UpdatingGui = False
End

Private Sub SaveCustomEqSettings(EqSettings As String)
  File.Save(global.confpath & "/" & global.currentprofile & ".profile/audioequalizer.txt", EqSettings)
End

Private Function LoadCustomEqSettings() As String
  Try Return File.Load(global.confpath & "/" & global.currentprofile & ".profile/audioequalizer.txt")
End


'-------------------- end manage equalizer





'Save and Load Functions------------------------------------------------------

Public Sub savecurrent()
  Dim MySettings As New SettingsClass
  MySettings.Save(Me, global.confpath & "/" & global.CurrentProfile)
  global.save_cached_options(global.CurrentProfile) 
End

Public Sub SaveBTN_Click()
  'store items order in textboxes, so that the settings class will save them
  Dim item As Hbox

  filters_audio_order.text = ""
  For Each item In filters_audio_container.Children
    filters_audio_order.text &= item.name & Chr(8)
  Next

  filters_video_order.text = ""
  For Each item In filters_video_container.Children
    filters_video_order.text &= item.name & Chr(8)
  Next

  drivers_audio_order.text = ""
  For Each item In drivers_audio_container.Children
    drivers_audio_order.text &= item.name & Chr(8)
  Next

  drivers_video_order.text = ""
  For Each item In drivers_video_container.Children
    drivers_video_order.text &= item.name & Chr(8)
  Next
  savecurrent()
End


Public Sub FirstLoadIfNeeded()
  If Not (alreadyloaded) Then 
    MenuLoadDefault_Click()
    Alreadyloaded = True
  Endif
End

Public Sub MenuLoadDefault_Click()
  Dim MySettings As New SettingsClass
  If Not InitDone Then Init()
  
  MySettings.Load(Me, global.confpath & "/" & global.CurrentProfile)

  If filters_audio_order.text <> "" Then 
    ReDraw_Ordered(filters_audio_container, Split(filters_audio_order.text, Chr(8), "", True))
  Endif
  If filters_video_order.text <> "" Then 
    ReDraw_Ordered(filters_video_container, Split(filters_video_order.text, Chr(8), "", True))
  Endif
  If drivers_audio_order.text <> "" Then 
    ReDraw_Ordered(drivers_audio_container, Split(drivers_audio_order.text, Chr(8), "", True))
  Endif
  If drivers_video_order.text <> "" Then 
    ReDraw_Ordered(drivers_video_container, Split(drivers_video_order.text, Chr(8), "", True))
  Endif
  AlreadyLoaded = True
  
  'FMain.cachedopts = "" 'fixmempv se vuoi reimplementare le cachedopts
End


Public Sub MenuSaveDefault_Click()
  SaveCurrent()
End


Public Sub MenuSaveToAll_Click()

  Dim profilename, profilenamesplitted As String
  Dim MySettings As New SettingsClass
  If MyQuestion.Ask(("This will save this window settings\n to all profiles found but the 'Factory_defaults' one"), ("Proceed"), ("Don't")) = 2 Then
    Return
      Else
     For Each profilename In Dir(global.confpath & "/", "*.profile")
        If Stat(global.confpath & "/" & profilename, True).type = gb.Directory Then
          profilenamesplitted = Split(profilename, ".")[0]
          If profilenamesplitted <> "Factory_Defaults" Then
            MySettings.Save(Me, global.confpath & "/" & profilenamesplitted)
          Endif
        Endif
     Next 'profilename
  Endif
End



'--End Save and load functions-----------------------------------
'Private tabs As String[] = ["filters_video", "filters_audio", "drivers_video", "drivers_audio"] '<



Public Sub override_video_driver(vo As String)
  If vo = "" Then 
    NewChains.drivers_video_container.enabled = True
    nosavelabel1.text = ""
    nosavelabel1.Visible = False
    Return
      Else
    NewChains.drivers_video_container.enabled = False
    nosavelabel1.text = vo & " " & ("is overridden")
    nosavelabel1.Visible = True
  Endif
End







Public Sub show_audio_drivers()
  Me.Show
  tabstrip1.index = tabs.Find("drivers_audio")
End
Public Sub show_video_drivers()
  Me.Show
  tabstrip1.index = tabs.Find("drivers_video")
End
Public Sub show_audio_filters()
  Me.Show
  tabstrip1.index = tabs.Find("filters_audio")
End
Public Sub show_video_filters()
  Me.Show
  tabstrip1.index = tabs.Find("filters_video")
End


Public Sub OkBTN_Click()
  Me.hide
End

Private aligned As Boolean = False
Public Sub Form_Open()
  If Not initdone Then 
    Try GeneralOptions.FirstLoadIfNeeded()
    Init()
    initdone = True
  Endif
  If Not AlreadyLoaded Then
    MenuLoadDefault_Click()
    Alreadyloaded = True
  Endif
  If Not aligned Then 
    AlignObjects()
    aligned = True
  Endif
  Global.Center(Fmain, Me)
End


Public Sub Form_Show()
  If Not FMain.fullyloaded Then Return
  Form_Open()
  GeneralOptions.EnableDisable_video_drivers_panels()
End



Public Sub timerDelayShowHelp_Timer()
  Dim help_str As String
  timerDelayShowHelp.stop
  help_str = FMain.mplayer.search_man(HelpBox.tag)
  TextAreahelp.text = help_str
  textareahelp.pos = 0
  TextAreahelp.EnsureVisible()
End

'my personal expander because the gambas one is... buggy!

  Private Sub HelpBox_myArrange()
    If textareahelp.visible = False Then
      helpbox.expand = False
      Last.h = Button_show_man.h
        Else
      helpbox.expand = True
    Endif
  End
  
  Public Sub HelpBox_BeforeArrange()
    HelpBox_myArrange()
  End
  
  Public Sub Button_show_man_Click()
    If Last.value Then
      timerDelayShowHelp.start
    Endif
    textareahelp.visible = Last.value
    HelpBox_myArrange()
  End
  
Public Sub HelpBox_hide()
  helpbox.expand = False
  helpbox.h = 32
End
  
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Public Sub NOSAVELabel1_MouseUp()
  GeneralOptions.Show
  GeneralOptions.TabStrip1.index = Global.TabIndexByName(("Video"), GeneralOptions.TabStrip1)
End




Private Sub AlignObjects()
  Dim containers As New Object[]
  Dim align_objs As New Object[]
  Dim acontainer As Object
  Dim aBox, child As Object
  Dim c, l, checkbox_no_text_width, max_obj_w As Integer
  Dim acheckbox As Checkbox
  Dim alabel As Label

  containers.Add(xvScrollview)
  containers.Add(GLScrollView)
  containers.Add(VdPauScrollView)
  containers.Add(VaapiScrollview)
  containers.Add(CustomVideoScrollview)

  containers.Add(AlsaScrollview)
  containers.Add(jackScrollview)
  containers.Add(pulseScrollview)
  containers.Add(pcmscrollview)
  
    'find the width of an empty checkbox
  alabel = New Label(zzzfake)
  alabel.text = "sometext"
  alabel.autoresize = True
  
  acheckbox = New CheckBox(zzzFake)
  acheckbox.text = "sometext"
  acheckbox.autoresize = True
  'it seems that "*3*" is the key, but the right thing to do is:
  'get the width of "[x] sometext", get the width of "sometext"; subtract the latter from the former.
  checkbox_no_text_width = acheckbox.w - alabel.w 'acheckbox.w * 3.1 
  acheckbox.Delete
  alabel.delete

  For Each acontainer In containers
   
    max_obj_w = 0
    align_objs.clear
    For Each aBox In acontainer.children
      Try c = aBox.Children.Count
      If Not Error Then
        If c > 1 Then

          child = aBox.children[0]
          If (child Is Checkbox) Or (child Is Label) Then
            If child.text = "" Then child = child.next
            l = child.Font.textwidth(child.text & "--") + checkbox_no_text_width
            If l > max_obj_w Then max_obj_w = l
            align_objs.Add(child)
            If acontainer.name = "ScrollView2" Then
              global.myDebug(child.text, l, max_obj_w)
            Endif

          Endif
        Endif
      Endif
    Next 'abox

    'align labels
    For Each child In align_objs
      Object.SetProperty(child, "autoresize", False)
      Object.SetProperty(child, "w", max_obj_w)
    Next

  Next 'acontainer
End


'----------------------------
'from the old xvonfigure*driver


Public Function parse_audio_driver(driver_name As String, aTabstrip As Tabstrip) As String
  Dim obj, child, container_obj As Object
  Dim tab_index_old As Integer = aTabstrip.index
  Dim outline As String
  Dim sep As String = Chr(126)
  If Lower(driver_name) Like "custom*" Then
    Return TextBox5customaudio.text
  Endif

  aTabstrip.index = 0
  While Lower(aTabstrip.Caption) <> driver_name
    Try aTabstrip.index += 1
    If Error Then
      global.myDebug("Could not find the right tab :( ")
      Return ""
    Endif
  Wend

  If aTabstrip.Children.count = 0 Then 
    global.mydebug("aTabstrip.Children.count is actually 0 (?), could not parse audio driver.")
    Return ""
  Endif
  If aTabstrip.Children[0] Is Scrollview Then 
    container_obj = aTabstrip.Children[0]
      Else
    container_obj = aTabstrip
  Endif
  
  For Each obj In container_obj.Children
    If Upper(obj.name) Like Upper(driver_name) & "*" Then
      For Each child In obj.Children
        'IF child.name LIKE "*Chk" THEN 
        If object.type(child) = "CheckBox" Then
          If child.value Then
              outline = outline & child.tag
                If (child.next <> Null) Then
                  If (object.type(child.next) = "ComboBox") Or (object.type(child.next) = "SpinBox") Or (object.type(child.next) = "TextBox") Then
                    If child.NEXT.text Like "*" & sep & "*" Then
                      outline = outline & Split(child.NEXT.text, sep)[0]
                        Else
                      outline = outline & child.NEXT.text
                    Endif
                  Endif
                Endif
                outline = outline & ":"
          Endif
        Endif
      Next
    Endif
  Next

  aTabstrip.index = tab_index_old
  If Right(outline) = ":" Then outline = Left(outline, -1)
  If Right(outline) = "" Then 
    Return driver_name
      Else
    Return driver_name & "=" & outline 
  Endif

End



Public Sub PcmFileOpen_Click()
    If Dialog.SaveFile() Then Return
    TextBox8pcm.text = "\"" & myDialog.Path & "\""
End

Public Sub GetAlsaDevices() As String[]
  Dim acard, acardid, acardname, apcm, apcminfo, apcminfos, apcmid As String
  Dim adevices As New String[]
  Dim apcms As New String[]
  Dim acards As New String[]
  Dim sep As String = Chr(126)
  adevices.Add("plug:dmix" & " " & sep & " " & "(" & ("Default device, software mixing") & ")")
  adevices.Add("default" & " " & sep & " " & "(" & ("Default alsa device") & ")")
  adevices.Add("spdif" & " " & sep & " " & "(" & ("Default S/PDIF device") & ")")
  adevices.Add("hdmi" & " " & sep & " " & "(" & ("Default hdmi device") & ")")
  Try acards = Dir("/proc/asound/", "card*", gb.directory)
  If Not Error Then
    For Each acard In acards
      Try acardname = Trim(File.Load("/proc/asound/" & acard & "/id"))
      If Error Then acardname = "Unknown Card"
      acardid = Replace(acard, "card", "")
      Try apcms = Dir("/proc/asound/" & acard, "pcm*p").Sort(gb.Ascent)
      If Not Error Then
        For Each apcm In apcms
          Try apcminfos = Trim(File.Load("/proc/asound/" & acard & "/" & apcm & "/info"))
          If Error Then apcminfos = "name: No pcm info"
          For Each apcminfo In Split(apcminfos, "\n", "", True)
            If apcminfo Like "name: *" Then
              apcminfo = Trim(Split(apcminfo, ":", "", True)[1])
              apcmid = Replace(apcm, "pcm", "")
              apcmid = Trim(Replace(apcmid, "p", ""))
              Break
            Endif
          Next
         ' global.myDebug( acardid, apcmid, acardname, apcminfo)
          adevices.add("[plughw:" & acardid & "," & apcmid & "]" & " " & sep & " " & "(" & acardname & ":" & apcminfo & ")")
        Next
      Endif

    Next
  Endif
  
 Return adevices
  
End



Public Function parse_video_driver(driver_name As String, aTabstrip As Tabstrip) As String
  Dim obj, child, container_obj As Object
  Dim tab_index_old As Integer = aTabstrip.index
  Dim outline As String
  
  If Lower(driver_name) Like "custom*" Then
    Return TextBox5cv.text
  Endif

  aTabstrip.index = 0
  While Lower(aTabstrip.Caption) <> driver_name
    Try aTabstrip.index += 1
    If Error Then
      global.myDebug("Could not find the right tab :( ")
      Return ""
    Endif
  Wend

  If aTabstrip.Children.count > 0 Then
    If aTabstrip.Children[0] Is Scrollview Then 
      container_obj = aTabstrip.Children[0]
        Else
      container_obj = aTabstrip
    Endif
  
    For Each obj In container_obj.children
      If Upper(obj.name) Like Upper(driver_name) & "*" Then
        For Each child In obj.Children
          'IF child.name LIKE "*Chk" THEN 
          If object.type(child) = "CheckBox" Then
            If child.value Then
                outline = outline & child.tag
                  If (child.next <> Null) Then
                    If (object.type(child.next) = "ComboBox") Or (object.type(child.next) = "SpinBox") Or (object.type(child.next) = "TextBox") Then
                      If (object.type(child.next) = "ComboBox") Then
                        Try outline = outline & Split(child.NEXT.text, " ")[0]
                          Else
                        Try outline = outline & child.NEXT.text
                        If Error Then global.myDebug("an error occurred, please report this message and what you're doing")
                      Endif
                    Endif
                  Endif
                  outline = outline & ":"
            Endif
          Endif
        Next
      Endif
    Next
  Endif
  
  aTabstrip.index = tab_index_old
  If Right(outline) = ":" Then outline = Left(outline, -1)
  If Right(outline) = "" Then 
    Return driver_name
      Else
    Return driver_name & "=" & outline 
  Endif

End


Public Sub xvScrollview_Arrange()
  Shell "xvinfo -short | grep -i adaptor" To TextBoxAdaptorsxv.text
  TextBoxAdaptorsxv.text = ("Adaptors list:\n---------------------------------\n") & TextBoxAdaptorsxv.text
End

Public Sub CheckBox2gl_Click()
  If Last.value Then CheckBox3gl.value = False
End

Public Sub CheckBox3gl_Click()
  If Last.value Then CheckBox2gl.value = False
End


Private GotAlsaDevices As Boolean = False
Public Sub AlsaDeviceTextBox_Enter()
  Dim adevice As String 
  Dim prevtext As String = Last.text
  If GotAlsaDevices Then Return
  For Each adevice In GetAlsaDevices()
    AlsaDeviceTextBox.Add(adevice)
  Next
  If AlsaDeviceTextBox.find(prevtext) = -1 Then AlsaDeviceTextBox.Add(prevtext, 0)
  GotAlsaDevices = True
  AlsaDeviceTextBox.text = prevtext
End

